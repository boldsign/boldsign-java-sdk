/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.PhoneNumber;
import com.boldsign.model.RecipientNotificationSettings;
import com.boldsign.model.TemplateFormFields;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * Roles
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class Roles {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_DEFAULT_SIGNER_NAME = "defaultSignerName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SIGNER_NAME)
  private String defaultSignerName;

  public static final String SERIALIZED_NAME_DEFAULT_SIGNER_EMAIL = "defaultSignerEmail";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SIGNER_EMAIL)
  private String defaultSignerEmail;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_SIGNER_ORDER = "signerOrder";
  @SerializedName(SERIALIZED_NAME_SIGNER_ORDER)
  private Integer signerOrder;

  /**
   * Gets or Sets signerType
   */
  @JsonAdapter(SignerTypeEnum.Adapter.class)
  public enum SignerTypeEnum {
    SIGNER("Signer"),
    
    REVIEWER("Reviewer"),
    
    IN_PERSON_SIGNER("InPersonSigner");

    private String value;

    SignerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignerTypeEnum fromValue(String value) {
      for (SignerTypeEnum b : SignerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNER_TYPE = "signerType";
  @SerializedName(SERIALIZED_NAME_SIGNER_TYPE)
  private SignerTypeEnum signerType;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15);

    private Integer value;

    LanguageEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(Integer value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  /**
   * Gets or Sets locale
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("EN"),
    
    NO("NO"),
    
    FR("FR"),
    
    DE("DE"),
    
    ES("ES"),
    
    BG("BG"),
    
    CS("CS"),
    
    DA("DA"),
    
    IT("IT"),
    
    NL("NL"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    RU("RU"),
    
    SV("SV"),
    
    DEFAULT("Default");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_ALLOW_ROLE_EDIT = "allowRoleEdit";
  @SerializedName(SERIALIZED_NAME_ALLOW_ROLE_EDIT)
  private Boolean allowRoleEdit;

  public static final String SERIALIZED_NAME_ALLOW_ROLE_DELETE = "allowRoleDelete";
  @SerializedName(SERIALIZED_NAME_ALLOW_ROLE_DELETE)
  private Boolean allowRoleDelete;

  public static final String SERIALIZED_NAME_ENABLE_ACCESS_CODE = "enableAccessCode";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCESS_CODE)
  private Boolean enableAccessCode;

  public static final String SERIALIZED_NAME_ENABLE_EMAIL_O_T_P = "enableEmailOTP";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMAIL_O_T_P)
  private Boolean enableEmailOTP;

  /**
   * Gets or Sets imposeAuthentication
   */
  @JsonAdapter(ImposeAuthenticationEnum.Adapter.class)
  public enum ImposeAuthenticationEnum {
    NONE("None"),
    
    EMAIL_OTP("EmailOTP"),
    
    ACCESS_CODE("AccessCode"),
    
    SMSOTP("SMSOTP"),
    
    ID_VERIFICATION("IdVerification");

    private String value;

    ImposeAuthenticationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImposeAuthenticationEnum fromValue(String value) {
      for (ImposeAuthenticationEnum b : ImposeAuthenticationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImposeAuthenticationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImposeAuthenticationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImposeAuthenticationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImposeAuthenticationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImposeAuthenticationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPOSE_AUTHENTICATION = "imposeAuthentication";
  @SerializedName(SERIALIZED_NAME_IMPOSE_AUTHENTICATION)
  private ImposeAuthenticationEnum imposeAuthentication;

  /**
   * Gets or Sets deliveryMode
   */
  @JsonAdapter(DeliveryModeEnum.Adapter.class)
  public enum DeliveryModeEnum {
    EMAIL("Email"),
    
    SMS("SMS"),
    
    EMAIL_AND_SMS("EmailAndSMS"),
    
    WHATS_APP("WhatsApp");

    private String value;

    DeliveryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryModeEnum fromValue(String value) {
      for (DeliveryModeEnum b : DeliveryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_MODE = "deliveryMode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_MODE)
  private DeliveryModeEnum deliveryMode;

  public static final String SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION = "allowFieldConfiguration";
  @SerializedName(SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION)
  private Boolean allowFieldConfiguration;

  public static final String SERIALIZED_NAME_FORM_FIELDS = "formFields";
  @SerializedName(SERIALIZED_NAME_FORM_FIELDS)
  private List<TemplateFormFields> formFields;

  public static final String SERIALIZED_NAME_ENABLE_EDIT_RECIPIENTS = "enableEditRecipients";
  @SerializedName(SERIALIZED_NAME_ENABLE_EDIT_RECIPIENTS)
  private Boolean enableEditRecipients;

  public static final String SERIALIZED_NAME_ENABLE_DELETE_RECIPIENTS = "enableDeleteRecipients";
  @SerializedName(SERIALIZED_NAME_ENABLE_DELETE_RECIPIENTS)
  private Boolean enableDeleteRecipients;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_ENABLE_QES = "enableQes";
  @SerializedName(SERIALIZED_NAME_ENABLE_QES)
  private Boolean enableQes;

  public Roles() {
  }

  public Roles name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Roles index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public Roles defaultSignerName(String defaultSignerName) {
    this.defaultSignerName = defaultSignerName;
    return this;
  }

  /**
   * Get defaultSignerName
   * @return defaultSignerName
   */
  @javax.annotation.Nullable
  public String getDefaultSignerName() {
    return defaultSignerName;
  }

  public void setDefaultSignerName(String defaultSignerName) {
    this.defaultSignerName = defaultSignerName;
  }


  public Roles defaultSignerEmail(String defaultSignerEmail) {
    this.defaultSignerEmail = defaultSignerEmail;
    return this;
  }

  /**
   * Get defaultSignerEmail
   * @return defaultSignerEmail
   */
  @javax.annotation.Nullable
  public String getDefaultSignerEmail() {
    return defaultSignerEmail;
  }

  public void setDefaultSignerEmail(String defaultSignerEmail) {
    this.defaultSignerEmail = defaultSignerEmail;
  }


  public Roles phoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Roles signerOrder(Integer signerOrder) {
    this.signerOrder = signerOrder;
    return this;
  }

  /**
   * Get signerOrder
   * @return signerOrder
   */
  @javax.annotation.Nullable
  public Integer getSignerOrder() {
    return signerOrder;
  }

  public void setSignerOrder(Integer signerOrder) {
    this.signerOrder = signerOrder;
  }


  public Roles signerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
    return this;
  }

  /**
   * Get signerType
   * @return signerType
   */
  @javax.annotation.Nullable
  public SignerTypeEnum getSignerType() {
    return signerType;
  }

  public void setSignerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
  }


  public Roles hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Get hostEmail
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public Roles hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public Roles language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public Roles locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public Roles allowRoleEdit(Boolean allowRoleEdit) {
    this.allowRoleEdit = allowRoleEdit;
    return this;
  }

  /**
   * Get allowRoleEdit
   * @return allowRoleEdit
   */
  @javax.annotation.Nullable
  public Boolean getAllowRoleEdit() {
    return allowRoleEdit;
  }

  public void setAllowRoleEdit(Boolean allowRoleEdit) {
    this.allowRoleEdit = allowRoleEdit;
  }


  public Roles allowRoleDelete(Boolean allowRoleDelete) {
    this.allowRoleDelete = allowRoleDelete;
    return this;
  }

  /**
   * Get allowRoleDelete
   * @return allowRoleDelete
   */
  @javax.annotation.Nullable
  public Boolean getAllowRoleDelete() {
    return allowRoleDelete;
  }

  public void setAllowRoleDelete(Boolean allowRoleDelete) {
    this.allowRoleDelete = allowRoleDelete;
  }


  public Roles enableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
    return this;
  }

  /**
   * Get enableAccessCode
   * @return enableAccessCode
   */
  @javax.annotation.Nullable
  public Boolean getEnableAccessCode() {
    return enableAccessCode;
  }

  public void setEnableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
  }


  public Roles enableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
    return this;
  }

  /**
   * Get enableEmailOTP
   * @return enableEmailOTP
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmailOTP() {
    return enableEmailOTP;
  }

  public void setEnableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
  }


  public Roles imposeAuthentication(ImposeAuthenticationEnum imposeAuthentication) {
    this.imposeAuthentication = imposeAuthentication;
    return this;
  }

  /**
   * Get imposeAuthentication
   * @return imposeAuthentication
   */
  @javax.annotation.Nullable
  public ImposeAuthenticationEnum getImposeAuthentication() {
    return imposeAuthentication;
  }

  public void setImposeAuthentication(ImposeAuthenticationEnum imposeAuthentication) {
    this.imposeAuthentication = imposeAuthentication;
  }


  public Roles deliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  /**
   * Get deliveryMode
   * @return deliveryMode
   */
  @javax.annotation.Nullable
  public DeliveryModeEnum getDeliveryMode() {
    return deliveryMode;
  }

  public void setDeliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
  }


  public Roles allowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
    return this;
  }

  /**
   * Get allowFieldConfiguration
   * @return allowFieldConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getAllowFieldConfiguration() {
    return allowFieldConfiguration;
  }

  public void setAllowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
  }


  public Roles formFields(List<TemplateFormFields> formFields) {
    this.formFields = formFields;
    return this;
  }

  public Roles addFormFieldsItem(TemplateFormFields formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

  /**
   * Get formFields
   * @return formFields
   */
  @javax.annotation.Nullable
  public List<TemplateFormFields> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<TemplateFormFields> formFields) {
    this.formFields = formFields;
  }


  public Roles enableEditRecipients(Boolean enableEditRecipients) {
    this.enableEditRecipients = enableEditRecipients;
    return this;
  }

  /**
   * Get enableEditRecipients
   * @return enableEditRecipients
   */
  @javax.annotation.Nullable
  public Boolean getEnableEditRecipients() {
    return enableEditRecipients;
  }

  public void setEnableEditRecipients(Boolean enableEditRecipients) {
    this.enableEditRecipients = enableEditRecipients;
  }


  public Roles enableDeleteRecipients(Boolean enableDeleteRecipients) {
    this.enableDeleteRecipients = enableDeleteRecipients;
    return this;
  }

  /**
   * Get enableDeleteRecipients
   * @return enableDeleteRecipients
   */
  @javax.annotation.Nullable
  public Boolean getEnableDeleteRecipients() {
    return enableDeleteRecipients;
  }

  public void setEnableDeleteRecipients(Boolean enableDeleteRecipients) {
    this.enableDeleteRecipients = enableDeleteRecipients;
  }


  public Roles recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public Roles enableQes(Boolean enableQes) {
    this.enableQes = enableQes;
    return this;
  }

  /**
   * Get enableQes
   * @return enableQes
   */
  @javax.annotation.Nullable
  public Boolean getEnableQes() {
    return enableQes;
  }

  public void setEnableQes(Boolean enableQes) {
    this.enableQes = enableQes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Roles roles = (Roles) o;
    return Objects.equals(this.name, roles.name) &&
        Objects.equals(this.index, roles.index) &&
        Objects.equals(this.defaultSignerName, roles.defaultSignerName) &&
        Objects.equals(this.defaultSignerEmail, roles.defaultSignerEmail) &&
        Objects.equals(this.phoneNumber, roles.phoneNumber) &&
        Objects.equals(this.signerOrder, roles.signerOrder) &&
        Objects.equals(this.signerType, roles.signerType) &&
        Objects.equals(this.hostEmail, roles.hostEmail) &&
        Objects.equals(this.hostName, roles.hostName) &&
        Objects.equals(this.language, roles.language) &&
        Objects.equals(this.locale, roles.locale) &&
        Objects.equals(this.allowRoleEdit, roles.allowRoleEdit) &&
        Objects.equals(this.allowRoleDelete, roles.allowRoleDelete) &&
        Objects.equals(this.enableAccessCode, roles.enableAccessCode) &&
        Objects.equals(this.enableEmailOTP, roles.enableEmailOTP) &&
        Objects.equals(this.imposeAuthentication, roles.imposeAuthentication) &&
        Objects.equals(this.deliveryMode, roles.deliveryMode) &&
        Objects.equals(this.allowFieldConfiguration, roles.allowFieldConfiguration) &&
        Objects.equals(this.formFields, roles.formFields) &&
        Objects.equals(this.enableEditRecipients, roles.enableEditRecipients) &&
        Objects.equals(this.enableDeleteRecipients, roles.enableDeleteRecipients) &&
        Objects.equals(this.recipientNotificationSettings, roles.recipientNotificationSettings) &&
        Objects.equals(this.enableQes, roles.enableQes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, index, defaultSignerName, defaultSignerEmail, phoneNumber, signerOrder, signerType, hostEmail, hostName, language, locale, allowRoleEdit, allowRoleDelete, enableAccessCode, enableEmailOTP, imposeAuthentication, deliveryMode, allowFieldConfiguration, formFields, enableEditRecipients, enableDeleteRecipients, recipientNotificationSettings, enableQes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Roles {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    defaultSignerName: ").append(toIndentedString(defaultSignerName)).append("\n");
    sb.append("    defaultSignerEmail: ").append(toIndentedString(defaultSignerEmail)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    signerOrder: ").append(toIndentedString(signerOrder)).append("\n");
    sb.append("    signerType: ").append(toIndentedString(signerType)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    allowRoleEdit: ").append(toIndentedString(allowRoleEdit)).append("\n");
    sb.append("    allowRoleDelete: ").append(toIndentedString(allowRoleDelete)).append("\n");
    sb.append("    enableAccessCode: ").append(toIndentedString(enableAccessCode)).append("\n");
    sb.append("    enableEmailOTP: ").append(toIndentedString(enableEmailOTP)).append("\n");
    sb.append("    imposeAuthentication: ").append(toIndentedString(imposeAuthentication)).append("\n");
    sb.append("    deliveryMode: ").append(toIndentedString(deliveryMode)).append("\n");
    sb.append("    allowFieldConfiguration: ").append(toIndentedString(allowFieldConfiguration)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    enableEditRecipients: ").append(toIndentedString(enableEditRecipients)).append("\n");
    sb.append("    enableDeleteRecipients: ").append(toIndentedString(enableDeleteRecipients)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    enableQes: ").append(toIndentedString(enableQes)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (name != null) {
        if (isFileTypeOrListOfFiles(name)) {
            fileTypeFound = true;
        }

        if (name.getClass().equals(java.io.File.class) ||
            name.getClass().equals(Integer.class) ||
            name.getClass().equals(String.class) ||
            name.getClass().equals(java.net.URI.class)||
            name.getClass().isEnum()) {
            map.put("name", name);
        } else if (isListOfFile(name)) {
            for(int i = 0; i< getListSize(name); i++) {
                map.put("name", name);
            }
        }
        else {
          map.put("name", JSON.serialize(name));
        }
    }
    if (index != null) {
        if (isFileTypeOrListOfFiles(index)) {
            fileTypeFound = true;
        }

        if (index.getClass().equals(java.io.File.class) ||
            index.getClass().equals(Integer.class) ||
            index.getClass().equals(String.class) ||
            index.getClass().equals(java.net.URI.class)||
            index.getClass().isEnum()) {
            map.put("index", index);
        } else if (isListOfFile(index)) {
            for(int i = 0; i< getListSize(index); i++) {
                map.put("index", index);
            }
        }
        else {
          map.put("index", JSON.serialize(index));
        }
    }
    if (defaultSignerName != null) {
        if (isFileTypeOrListOfFiles(defaultSignerName)) {
            fileTypeFound = true;
        }

        if (defaultSignerName.getClass().equals(java.io.File.class) ||
            defaultSignerName.getClass().equals(Integer.class) ||
            defaultSignerName.getClass().equals(String.class) ||
            defaultSignerName.getClass().equals(java.net.URI.class)||
            defaultSignerName.getClass().isEnum()) {
            map.put("defaultSignerName", defaultSignerName);
        } else if (isListOfFile(defaultSignerName)) {
            for(int i = 0; i< getListSize(defaultSignerName); i++) {
                map.put("defaultSignerName", defaultSignerName);
            }
        }
        else {
          map.put("defaultSignerName", JSON.serialize(defaultSignerName));
        }
    }
    if (defaultSignerEmail != null) {
        if (isFileTypeOrListOfFiles(defaultSignerEmail)) {
            fileTypeFound = true;
        }

        if (defaultSignerEmail.getClass().equals(java.io.File.class) ||
            defaultSignerEmail.getClass().equals(Integer.class) ||
            defaultSignerEmail.getClass().equals(String.class) ||
            defaultSignerEmail.getClass().equals(java.net.URI.class)||
            defaultSignerEmail.getClass().isEnum()) {
            map.put("defaultSignerEmail", defaultSignerEmail);
        } else if (isListOfFile(defaultSignerEmail)) {
            for(int i = 0; i< getListSize(defaultSignerEmail); i++) {
                map.put("defaultSignerEmail", defaultSignerEmail);
            }
        }
        else {
          map.put("defaultSignerEmail", JSON.serialize(defaultSignerEmail));
        }
    }
    if (phoneNumber != null) {
        if (isFileTypeOrListOfFiles(phoneNumber)) {
            fileTypeFound = true;
        }

        if (phoneNumber.getClass().equals(java.io.File.class) ||
            phoneNumber.getClass().equals(Integer.class) ||
            phoneNumber.getClass().equals(String.class) ||
            phoneNumber.getClass().equals(java.net.URI.class)||
            phoneNumber.getClass().isEnum()) {
            map.put("phoneNumber", phoneNumber);
        } else if (isListOfFile(phoneNumber)) {
            for(int i = 0; i< getListSize(phoneNumber); i++) {
                map.put("phoneNumber", phoneNumber);
            }
        }
        else {
          map.put("phoneNumber", JSON.serialize(phoneNumber));
        }
    }
    if (signerOrder != null) {
        if (isFileTypeOrListOfFiles(signerOrder)) {
            fileTypeFound = true;
        }

        if (signerOrder.getClass().equals(java.io.File.class) ||
            signerOrder.getClass().equals(Integer.class) ||
            signerOrder.getClass().equals(String.class) ||
            signerOrder.getClass().equals(java.net.URI.class)||
            signerOrder.getClass().isEnum()) {
            map.put("signerOrder", signerOrder);
        } else if (isListOfFile(signerOrder)) {
            for(int i = 0; i< getListSize(signerOrder); i++) {
                map.put("signerOrder", signerOrder);
            }
        }
        else {
          map.put("signerOrder", JSON.serialize(signerOrder));
        }
    }
    if (signerType != null) {
        if (isFileTypeOrListOfFiles(signerType)) {
            fileTypeFound = true;
        }

        if (signerType.getClass().equals(java.io.File.class) ||
            signerType.getClass().equals(Integer.class) ||
            signerType.getClass().equals(String.class) ||
            signerType.getClass().equals(java.net.URI.class)||
            signerType.getClass().isEnum()) {
            map.put("signerType", signerType);
        } else if (isListOfFile(signerType)) {
            for(int i = 0; i< getListSize(signerType); i++) {
                map.put("signerType", signerType);
            }
        }
        else {
          map.put("signerType", JSON.serialize(signerType));
        }
    }
    if (hostEmail != null) {
        if (isFileTypeOrListOfFiles(hostEmail)) {
            fileTypeFound = true;
        }

        if (hostEmail.getClass().equals(java.io.File.class) ||
            hostEmail.getClass().equals(Integer.class) ||
            hostEmail.getClass().equals(String.class) ||
            hostEmail.getClass().equals(java.net.URI.class)||
            hostEmail.getClass().isEnum()) {
            map.put("hostEmail", hostEmail);
        } else if (isListOfFile(hostEmail)) {
            for(int i = 0; i< getListSize(hostEmail); i++) {
                map.put("hostEmail", hostEmail);
            }
        }
        else {
          map.put("hostEmail", JSON.serialize(hostEmail));
        }
    }
    if (hostName != null) {
        if (isFileTypeOrListOfFiles(hostName)) {
            fileTypeFound = true;
        }

        if (hostName.getClass().equals(java.io.File.class) ||
            hostName.getClass().equals(Integer.class) ||
            hostName.getClass().equals(String.class) ||
            hostName.getClass().equals(java.net.URI.class)||
            hostName.getClass().isEnum()) {
            map.put("hostName", hostName);
        } else if (isListOfFile(hostName)) {
            for(int i = 0; i< getListSize(hostName); i++) {
                map.put("hostName", hostName);
            }
        }
        else {
          map.put("hostName", JSON.serialize(hostName));
        }
    }
    if (language != null) {
        if (isFileTypeOrListOfFiles(language)) {
            fileTypeFound = true;
        }

        if (language.getClass().equals(java.io.File.class) ||
            language.getClass().equals(Integer.class) ||
            language.getClass().equals(String.class) ||
            language.getClass().equals(java.net.URI.class)||
            language.getClass().isEnum()) {
            map.put("language", language);
        } else if (isListOfFile(language)) {
            for(int i = 0; i< getListSize(language); i++) {
                map.put("language", language);
            }
        }
        else {
          map.put("language", JSON.serialize(language));
        }
    }
    if (locale != null) {
        if (isFileTypeOrListOfFiles(locale)) {
            fileTypeFound = true;
        }

        if (locale.getClass().equals(java.io.File.class) ||
            locale.getClass().equals(Integer.class) ||
            locale.getClass().equals(String.class) ||
            locale.getClass().equals(java.net.URI.class)||
            locale.getClass().isEnum()) {
            map.put("locale", locale);
        } else if (isListOfFile(locale)) {
            for(int i = 0; i< getListSize(locale); i++) {
                map.put("locale", locale);
            }
        }
        else {
          map.put("locale", JSON.serialize(locale));
        }
    }
    if (allowRoleEdit != null) {
        if (isFileTypeOrListOfFiles(allowRoleEdit)) {
            fileTypeFound = true;
        }

        if (allowRoleEdit.getClass().equals(java.io.File.class) ||
            allowRoleEdit.getClass().equals(Integer.class) ||
            allowRoleEdit.getClass().equals(String.class) ||
            allowRoleEdit.getClass().equals(java.net.URI.class)||
            allowRoleEdit.getClass().isEnum()) {
            map.put("allowRoleEdit", allowRoleEdit);
        } else if (isListOfFile(allowRoleEdit)) {
            for(int i = 0; i< getListSize(allowRoleEdit); i++) {
                map.put("allowRoleEdit", allowRoleEdit);
            }
        }
        else {
          map.put("allowRoleEdit", JSON.serialize(allowRoleEdit));
        }
    }
    if (allowRoleDelete != null) {
        if (isFileTypeOrListOfFiles(allowRoleDelete)) {
            fileTypeFound = true;
        }

        if (allowRoleDelete.getClass().equals(java.io.File.class) ||
            allowRoleDelete.getClass().equals(Integer.class) ||
            allowRoleDelete.getClass().equals(String.class) ||
            allowRoleDelete.getClass().equals(java.net.URI.class)||
            allowRoleDelete.getClass().isEnum()) {
            map.put("allowRoleDelete", allowRoleDelete);
        } else if (isListOfFile(allowRoleDelete)) {
            for(int i = 0; i< getListSize(allowRoleDelete); i++) {
                map.put("allowRoleDelete", allowRoleDelete);
            }
        }
        else {
          map.put("allowRoleDelete", JSON.serialize(allowRoleDelete));
        }
    }
    if (enableAccessCode != null) {
        if (isFileTypeOrListOfFiles(enableAccessCode)) {
            fileTypeFound = true;
        }

        if (enableAccessCode.getClass().equals(java.io.File.class) ||
            enableAccessCode.getClass().equals(Integer.class) ||
            enableAccessCode.getClass().equals(String.class) ||
            enableAccessCode.getClass().equals(java.net.URI.class)||
            enableAccessCode.getClass().isEnum()) {
            map.put("enableAccessCode", enableAccessCode);
        } else if (isListOfFile(enableAccessCode)) {
            for(int i = 0; i< getListSize(enableAccessCode); i++) {
                map.put("enableAccessCode", enableAccessCode);
            }
        }
        else {
          map.put("enableAccessCode", JSON.serialize(enableAccessCode));
        }
    }
    if (enableEmailOTP != null) {
        if (isFileTypeOrListOfFiles(enableEmailOTP)) {
            fileTypeFound = true;
        }

        if (enableEmailOTP.getClass().equals(java.io.File.class) ||
            enableEmailOTP.getClass().equals(Integer.class) ||
            enableEmailOTP.getClass().equals(String.class) ||
            enableEmailOTP.getClass().equals(java.net.URI.class)||
            enableEmailOTP.getClass().isEnum()) {
            map.put("enableEmailOTP", enableEmailOTP);
        } else if (isListOfFile(enableEmailOTP)) {
            for(int i = 0; i< getListSize(enableEmailOTP); i++) {
                map.put("enableEmailOTP", enableEmailOTP);
            }
        }
        else {
          map.put("enableEmailOTP", JSON.serialize(enableEmailOTP));
        }
    }
    if (imposeAuthentication != null) {
        if (isFileTypeOrListOfFiles(imposeAuthentication)) {
            fileTypeFound = true;
        }

        if (imposeAuthentication.getClass().equals(java.io.File.class) ||
            imposeAuthentication.getClass().equals(Integer.class) ||
            imposeAuthentication.getClass().equals(String.class) ||
            imposeAuthentication.getClass().equals(java.net.URI.class)||
            imposeAuthentication.getClass().isEnum()) {
            map.put("imposeAuthentication", imposeAuthentication);
        } else if (isListOfFile(imposeAuthentication)) {
            for(int i = 0; i< getListSize(imposeAuthentication); i++) {
                map.put("imposeAuthentication", imposeAuthentication);
            }
        }
        else {
          map.put("imposeAuthentication", JSON.serialize(imposeAuthentication));
        }
    }
    if (deliveryMode != null) {
        if (isFileTypeOrListOfFiles(deliveryMode)) {
            fileTypeFound = true;
        }

        if (deliveryMode.getClass().equals(java.io.File.class) ||
            deliveryMode.getClass().equals(Integer.class) ||
            deliveryMode.getClass().equals(String.class) ||
            deliveryMode.getClass().equals(java.net.URI.class)||
            deliveryMode.getClass().isEnum()) {
            map.put("deliveryMode", deliveryMode);
        } else if (isListOfFile(deliveryMode)) {
            for(int i = 0; i< getListSize(deliveryMode); i++) {
                map.put("deliveryMode", deliveryMode);
            }
        }
        else {
          map.put("deliveryMode", JSON.serialize(deliveryMode));
        }
    }
    if (allowFieldConfiguration != null) {
        if (isFileTypeOrListOfFiles(allowFieldConfiguration)) {
            fileTypeFound = true;
        }

        if (allowFieldConfiguration.getClass().equals(java.io.File.class) ||
            allowFieldConfiguration.getClass().equals(Integer.class) ||
            allowFieldConfiguration.getClass().equals(String.class) ||
            allowFieldConfiguration.getClass().equals(java.net.URI.class)||
            allowFieldConfiguration.getClass().isEnum()) {
            map.put("allowFieldConfiguration", allowFieldConfiguration);
        } else if (isListOfFile(allowFieldConfiguration)) {
            for(int i = 0; i< getListSize(allowFieldConfiguration); i++) {
                map.put("allowFieldConfiguration", allowFieldConfiguration);
            }
        }
        else {
          map.put("allowFieldConfiguration", JSON.serialize(allowFieldConfiguration));
        }
    }
    if (formFields != null) {
        if (isFileTypeOrListOfFiles(formFields)) {
            fileTypeFound = true;
        }

        if (formFields.getClass().equals(java.io.File.class) ||
            formFields.getClass().equals(Integer.class) ||
            formFields.getClass().equals(String.class) ||
            formFields.getClass().equals(java.net.URI.class)||
            formFields.getClass().isEnum()) {
            map.put("formFields", formFields);
        } else if (isListOfFile(formFields)) {
            for(int i = 0; i< getListSize(formFields); i++) {
                map.put("formFields", formFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formFields) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formFields", objectList);
        }
    }
    if (enableEditRecipients != null) {
        if (isFileTypeOrListOfFiles(enableEditRecipients)) {
            fileTypeFound = true;
        }

        if (enableEditRecipients.getClass().equals(java.io.File.class) ||
            enableEditRecipients.getClass().equals(Integer.class) ||
            enableEditRecipients.getClass().equals(String.class) ||
            enableEditRecipients.getClass().equals(java.net.URI.class)||
            enableEditRecipients.getClass().isEnum()) {
            map.put("enableEditRecipients", enableEditRecipients);
        } else if (isListOfFile(enableEditRecipients)) {
            for(int i = 0; i< getListSize(enableEditRecipients); i++) {
                map.put("enableEditRecipients", enableEditRecipients);
            }
        }
        else {
          map.put("enableEditRecipients", JSON.serialize(enableEditRecipients));
        }
    }
    if (enableDeleteRecipients != null) {
        if (isFileTypeOrListOfFiles(enableDeleteRecipients)) {
            fileTypeFound = true;
        }

        if (enableDeleteRecipients.getClass().equals(java.io.File.class) ||
            enableDeleteRecipients.getClass().equals(Integer.class) ||
            enableDeleteRecipients.getClass().equals(String.class) ||
            enableDeleteRecipients.getClass().equals(java.net.URI.class)||
            enableDeleteRecipients.getClass().isEnum()) {
            map.put("enableDeleteRecipients", enableDeleteRecipients);
        } else if (isListOfFile(enableDeleteRecipients)) {
            for(int i = 0; i< getListSize(enableDeleteRecipients); i++) {
                map.put("enableDeleteRecipients", enableDeleteRecipients);
            }
        }
        else {
          map.put("enableDeleteRecipients", JSON.serialize(enableDeleteRecipients));
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().equals(java.net.URI.class)||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", JSON.serialize(recipientNotificationSettings));
        }
    }
    if (enableQes != null) {
        if (isFileTypeOrListOfFiles(enableQes)) {
            fileTypeFound = true;
        }

        if (enableQes.getClass().equals(java.io.File.class) ||
            enableQes.getClass().equals(Integer.class) ||
            enableQes.getClass().equals(String.class) ||
            enableQes.getClass().equals(java.net.URI.class)||
            enableQes.getClass().isEnum()) {
            map.put("enableQes", enableQes);
        } else if (isListOfFile(enableQes)) {
            for(int i = 0; i< getListSize(enableQes); i++) {
                map.put("enableQes", enableQes);
            }
        }
        else {
          map.put("enableQes", JSON.serialize(enableQes));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("index");
    openapiFields.add("defaultSignerName");
    openapiFields.add("defaultSignerEmail");
    openapiFields.add("phoneNumber");
    openapiFields.add("signerOrder");
    openapiFields.add("signerType");
    openapiFields.add("hostEmail");
    openapiFields.add("hostName");
    openapiFields.add("language");
    openapiFields.add("locale");
    openapiFields.add("allowRoleEdit");
    openapiFields.add("allowRoleDelete");
    openapiFields.add("enableAccessCode");
    openapiFields.add("enableEmailOTP");
    openapiFields.add("imposeAuthentication");
    openapiFields.add("deliveryMode");
    openapiFields.add("allowFieldConfiguration");
    openapiFields.add("formFields");
    openapiFields.add("enableEditRecipients");
    openapiFields.add("enableDeleteRecipients");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("enableQes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Roles
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Roles.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Roles is not found in the empty JSON string", Roles.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("defaultSignerName") != null && !jsonObj.get("defaultSignerName").isJsonNull()) && !jsonObj.get("defaultSignerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSignerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSignerName").toString()));
      }
      if ((jsonObj.get("defaultSignerEmail") != null && !jsonObj.get("defaultSignerEmail").isJsonNull()) && !jsonObj.get("defaultSignerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSignerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSignerEmail").toString()));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) && !jsonObj.get("signerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerType").toString()));
      }
      // validate the optional field `signerType`
      if (jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) {
        SignerTypeEnum.validateJsonElement(jsonObj.get("signerType"));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      if ((jsonObj.get("imposeAuthentication") != null && !jsonObj.get("imposeAuthentication").isJsonNull()) && !jsonObj.get("imposeAuthentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imposeAuthentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imposeAuthentication").toString()));
      }
      // validate the optional field `imposeAuthentication`
      if (jsonObj.get("imposeAuthentication") != null && !jsonObj.get("imposeAuthentication").isJsonNull()) {
        ImposeAuthenticationEnum.validateJsonElement(jsonObj.get("imposeAuthentication"));
      }
      if ((jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) && !jsonObj.get("deliveryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryMode").toString()));
      }
      // validate the optional field `deliveryMode`
      if (jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) {
        DeliveryModeEnum.validateJsonElement(jsonObj.get("deliveryMode"));
      }
      if (jsonObj.get("formFields") != null && !jsonObj.get("formFields").isJsonNull()) {
        JsonArray jsonArrayformFields = jsonObj.getAsJsonArray("formFields");
        if (jsonArrayformFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formFields` to be an array in the JSON string but got `%s`", jsonObj.get("formFields").toString()));
          }

          // validate the optional field `formFields` (array)
          for (int i = 0; i < jsonArrayformFields.size(); i++) {
            TemplateFormFields.validateJsonElement(jsonArrayformFields.get(i));
          };
        }
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Roles.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Roles' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Roles> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Roles.class));

       return (TypeAdapter<T>) new TypeAdapter<Roles>() {
           @Override
           public void write(JsonWriter out, Roles value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Roles read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Roles given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Roles
   * @throws IOException if the JSON string is invalid with respect to Roles
   */
  public static Roles fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Roles.class);
  }

  /**
   * Convert an instance of Roles to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

