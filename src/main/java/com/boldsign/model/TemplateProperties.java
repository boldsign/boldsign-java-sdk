/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.BehalfOf;
import com.boldsign.model.DocumentFiles;
import com.boldsign.model.DocumentInfo;
import com.boldsign.model.FormGroup;
import com.boldsign.model.RecipientNotificationSettings;
import com.boldsign.model.Roles;
import com.boldsign.model.TemplateFormFields;
import com.boldsign.model.TemplateSenderDetail;
import com.boldsign.model.TemplateSharedTemplateDetail;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * TemplateProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TemplateProperties {
  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE = "documentTitle";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE)
  private String documentTitle;

  public static final String SERIALIZED_NAME_DOCUMENT_MESSAGE = "documentMessage";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_MESSAGE)
  private String documentMessage;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<DocumentFiles> files;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Roles> roles;

  public static final String SERIALIZED_NAME_FORM_GROUPS = "formGroups";
  @SerializedName(SERIALIZED_NAME_FORM_GROUPS)
  private List<FormGroup> formGroups;

  public static final String SERIALIZED_NAME_COMMON_FIELDS = "commonFields";
  @SerializedName(SERIALIZED_NAME_COMMON_FIELDS)
  private List<TemplateFormFields> commonFields;

  public static final String SERIALIZED_NAME_C_C_DETAILS = "cCDetails";
  @SerializedName(SERIALIZED_NAME_C_C_DETAILS)
  private List<String> cCDetails;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_ALLOW_MESSAGE_EDITING = "allowMessageEditing";
  @SerializedName(SERIALIZED_NAME_ALLOW_MESSAGE_EDITING)
  private Boolean allowMessageEditing;

  public static final String SERIALIZED_NAME_ALLOW_NEW_ROLES = "allowNewRoles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_ROLES)
  private Boolean allowNewRoles;

  public static final String SERIALIZED_NAME_ALLOW_NEW_FILES = "allowNewFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_FILES)
  private Boolean allowNewFiles;

  public static final String SERIALIZED_NAME_ALLOW_MODIFY_FILES = "allowModifyFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_MODIFY_FILES)
  private Boolean allowModifyFiles;

  public static final String SERIALIZED_NAME_ENABLE_REASSIGN = "enableReassign";
  @SerializedName(SERIALIZED_NAME_ENABLE_REASSIGN)
  private Boolean enableReassign;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN = "EnablePrintAndSign";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN)
  private Boolean enablePrintAndSign;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private TemplateSenderDetail createdBy;

  public static final String SERIALIZED_NAME_SHARED_TEMPLATE_DETAIL = "sharedTemplateDetail";
  @SerializedName(SERIALIZED_NAME_SHARED_TEMPLATE_DETAIL)
  private List<TemplateSharedTemplateDetail> sharedTemplateDetail;

  public static final String SERIALIZED_NAME_DOCUMENT_INFO = "documentInfo";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INFO)
  private List<DocumentInfo> documentInfo;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_TEMPLATE_LABELS = "templateLabels";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LABELS)
  private List<String> templateLabels;

  public static final String SERIALIZED_NAME_BEHALF_OF = "behalfOf";
  @SerializedName(SERIALIZED_NAME_BEHALF_OF)
  private BehalfOf behalfOf;

  /**
   * Gets or Sets documentDownloadOption
   */
  @JsonAdapter(DocumentDownloadOptionEnum.Adapter.class)
  public enum DocumentDownloadOptionEnum {
    COMBINED("Combined"),
    
    INDIVIDUALLY("Individually");

    private String value;

    DocumentDownloadOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentDownloadOptionEnum fromValue(String value) {
      for (DocumentDownloadOptionEnum b : DocumentDownloadOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentDownloadOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentDownloadOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentDownloadOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentDownloadOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentDownloadOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION = "documentDownloadOption";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION)
  private DocumentDownloadOptionEnum documentDownloadOption;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public TemplateProperties() {
  }

  public TemplateProperties templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public TemplateProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TemplateProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TemplateProperties documentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  /**
   * Get documentTitle
   * @return documentTitle
   */
  @javax.annotation.Nullable
  public String getDocumentTitle() {
    return documentTitle;
  }

  public void setDocumentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
  }


  public TemplateProperties documentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
    return this;
  }

  /**
   * Get documentMessage
   * @return documentMessage
   */
  @javax.annotation.Nullable
  public String getDocumentMessage() {
    return documentMessage;
  }

  public void setDocumentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
  }


  public TemplateProperties files(List<DocumentFiles> files) {
    this.files = files;
    return this;
  }

  public TemplateProperties addFilesItem(DocumentFiles filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<DocumentFiles> getFiles() {
    return files;
  }

  public void setFiles(List<DocumentFiles> files) {
    this.files = files;
  }


  public TemplateProperties roles(List<Roles> roles) {
    this.roles = roles;
    return this;
  }

  public TemplateProperties addRolesItem(Roles rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Roles> getRoles() {
    return roles;
  }

  public void setRoles(List<Roles> roles) {
    this.roles = roles;
  }


  public TemplateProperties formGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
    return this;
  }

  public TemplateProperties addFormGroupsItem(FormGroup formGroupsItem) {
    if (this.formGroups == null) {
      this.formGroups = new ArrayList<>();
    }
    this.formGroups.add(formGroupsItem);
    return this;
  }

  /**
   * Get formGroups
   * @return formGroups
   */
  @javax.annotation.Nullable
  public List<FormGroup> getFormGroups() {
    return formGroups;
  }

  public void setFormGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
  }


  public TemplateProperties commonFields(List<TemplateFormFields> commonFields) {
    this.commonFields = commonFields;
    return this;
  }

  public TemplateProperties addCommonFieldsItem(TemplateFormFields commonFieldsItem) {
    if (this.commonFields == null) {
      this.commonFields = new ArrayList<>();
    }
    this.commonFields.add(commonFieldsItem);
    return this;
  }

  /**
   * Get commonFields
   * @return commonFields
   */
  @javax.annotation.Nullable
  public List<TemplateFormFields> getCommonFields() {
    return commonFields;
  }

  public void setCommonFields(List<TemplateFormFields> commonFields) {
    this.commonFields = commonFields;
  }


  public TemplateProperties cCDetails(List<String> cCDetails) {
    this.cCDetails = cCDetails;
    return this;
  }

  public TemplateProperties addCCDetailsItem(String cCDetailsItem) {
    if (this.cCDetails == null) {
      this.cCDetails = new ArrayList<>();
    }
    this.cCDetails.add(cCDetailsItem);
    return this;
  }

  /**
   * Get cCDetails
   * @return cCDetails
   */
  @javax.annotation.Nullable
  public List<String> getcCDetails() {
    return cCDetails;
  }

  public void setcCDetails(List<String> cCDetails) {
    this.cCDetails = cCDetails;
  }


  public TemplateProperties brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public TemplateProperties allowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
    return this;
  }

  /**
   * Get allowMessageEditing
   * @return allowMessageEditing
   */
  @javax.annotation.Nullable
  public Boolean getAllowMessageEditing() {
    return allowMessageEditing;
  }

  public void setAllowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
  }


  public TemplateProperties allowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
    return this;
  }

  /**
   * Get allowNewRoles
   * @return allowNewRoles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewRoles() {
    return allowNewRoles;
  }

  public void setAllowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
  }


  public TemplateProperties allowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
    return this;
  }

  /**
   * Get allowNewFiles
   * @return allowNewFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewFiles() {
    return allowNewFiles;
  }

  public void setAllowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
  }


  public TemplateProperties allowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
    return this;
  }

  /**
   * Get allowModifyFiles
   * @return allowModifyFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowModifyFiles() {
    return allowModifyFiles;
  }

  public void setAllowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
  }


  public TemplateProperties enableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
    return this;
  }

  /**
   * Get enableReassign
   * @return enableReassign
   */
  @javax.annotation.Nullable
  public Boolean getEnableReassign() {
    return enableReassign;
  }

  public void setEnableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
  }


  public TemplateProperties enablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
    return this;
  }

  /**
   * Get enablePrintAndSign
   * @return enablePrintAndSign
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrintAndSign() {
    return enablePrintAndSign;
  }

  public void setEnablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
  }


  public TemplateProperties enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public TemplateProperties createdDate(Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public TemplateProperties createdBy(TemplateSenderDetail createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public TemplateSenderDetail getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(TemplateSenderDetail createdBy) {
    this.createdBy = createdBy;
  }


  public TemplateProperties sharedTemplateDetail(List<TemplateSharedTemplateDetail> sharedTemplateDetail) {
    this.sharedTemplateDetail = sharedTemplateDetail;
    return this;
  }

  public TemplateProperties addSharedTemplateDetailItem(TemplateSharedTemplateDetail sharedTemplateDetailItem) {
    if (this.sharedTemplateDetail == null) {
      this.sharedTemplateDetail = new ArrayList<>();
    }
    this.sharedTemplateDetail.add(sharedTemplateDetailItem);
    return this;
  }

  /**
   * Get sharedTemplateDetail
   * @return sharedTemplateDetail
   */
  @javax.annotation.Nullable
  public List<TemplateSharedTemplateDetail> getSharedTemplateDetail() {
    return sharedTemplateDetail;
  }

  public void setSharedTemplateDetail(List<TemplateSharedTemplateDetail> sharedTemplateDetail) {
    this.sharedTemplateDetail = sharedTemplateDetail;
  }


  public TemplateProperties documentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
    return this;
  }

  public TemplateProperties addDocumentInfoItem(DocumentInfo documentInfoItem) {
    if (this.documentInfo == null) {
      this.documentInfo = new ArrayList<>();
    }
    this.documentInfo.add(documentInfoItem);
    return this;
  }

  /**
   * Get documentInfo
   * @return documentInfo
   */
  @javax.annotation.Nullable
  public List<DocumentInfo> getDocumentInfo() {
    return documentInfo;
  }

  public void setDocumentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
  }


  public TemplateProperties labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public TemplateProperties addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public TemplateProperties templateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
    return this;
  }

  public TemplateProperties addTemplateLabelsItem(String templateLabelsItem) {
    if (this.templateLabels == null) {
      this.templateLabels = new ArrayList<>();
    }
    this.templateLabels.add(templateLabelsItem);
    return this;
  }

  /**
   * Get templateLabels
   * @return templateLabels
   */
  @javax.annotation.Nullable
  public List<String> getTemplateLabels() {
    return templateLabels;
  }

  public void setTemplateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
  }


  public TemplateProperties behalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
    return this;
  }

  /**
   * Get behalfOf
   * @return behalfOf
   */
  @javax.annotation.Nullable
  public BehalfOf getBehalfOf() {
    return behalfOf;
  }

  public void setBehalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
  }


  public TemplateProperties documentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
    return this;
  }

  /**
   * Get documentDownloadOption
   * @return documentDownloadOption
   */
  @javax.annotation.Nullable
  public DocumentDownloadOptionEnum getDocumentDownloadOption() {
    return documentDownloadOption;
  }

  public void setDocumentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
  }


  public TemplateProperties recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateProperties templateProperties = (TemplateProperties) o;
    return Objects.equals(this.templateId, templateProperties.templateId) &&
        Objects.equals(this.title, templateProperties.title) &&
        Objects.equals(this.description, templateProperties.description) &&
        Objects.equals(this.documentTitle, templateProperties.documentTitle) &&
        Objects.equals(this.documentMessage, templateProperties.documentMessage) &&
        Objects.equals(this.files, templateProperties.files) &&
        Objects.equals(this.roles, templateProperties.roles) &&
        Objects.equals(this.formGroups, templateProperties.formGroups) &&
        Objects.equals(this.commonFields, templateProperties.commonFields) &&
        Objects.equals(this.cCDetails, templateProperties.cCDetails) &&
        Objects.equals(this.brandId, templateProperties.brandId) &&
        Objects.equals(this.allowMessageEditing, templateProperties.allowMessageEditing) &&
        Objects.equals(this.allowNewRoles, templateProperties.allowNewRoles) &&
        Objects.equals(this.allowNewFiles, templateProperties.allowNewFiles) &&
        Objects.equals(this.allowModifyFiles, templateProperties.allowModifyFiles) &&
        Objects.equals(this.enableReassign, templateProperties.enableReassign) &&
        Objects.equals(this.enablePrintAndSign, templateProperties.enablePrintAndSign) &&
        Objects.equals(this.enableSigningOrder, templateProperties.enableSigningOrder) &&
        Objects.equals(this.createdDate, templateProperties.createdDate) &&
        Objects.equals(this.createdBy, templateProperties.createdBy) &&
        Objects.equals(this.sharedTemplateDetail, templateProperties.sharedTemplateDetail) &&
        Objects.equals(this.documentInfo, templateProperties.documentInfo) &&
        Objects.equals(this.labels, templateProperties.labels) &&
        Objects.equals(this.templateLabels, templateProperties.templateLabels) &&
        Objects.equals(this.behalfOf, templateProperties.behalfOf) &&
        Objects.equals(this.documentDownloadOption, templateProperties.documentDownloadOption) &&
        Objects.equals(this.recipientNotificationSettings, templateProperties.recipientNotificationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, title, description, documentTitle, documentMessage, files, roles, formGroups, commonFields, cCDetails, brandId, allowMessageEditing, allowNewRoles, allowNewFiles, allowModifyFiles, enableReassign, enablePrintAndSign, enableSigningOrder, createdDate, createdBy, sharedTemplateDetail, documentInfo, labels, templateLabels, behalfOf, documentDownloadOption, recipientNotificationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateProperties {\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentTitle: ").append(toIndentedString(documentTitle)).append("\n");
    sb.append("    documentMessage: ").append(toIndentedString(documentMessage)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    formGroups: ").append(toIndentedString(formGroups)).append("\n");
    sb.append("    commonFields: ").append(toIndentedString(commonFields)).append("\n");
    sb.append("    cCDetails: ").append(toIndentedString(cCDetails)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    allowMessageEditing: ").append(toIndentedString(allowMessageEditing)).append("\n");
    sb.append("    allowNewRoles: ").append(toIndentedString(allowNewRoles)).append("\n");
    sb.append("    allowNewFiles: ").append(toIndentedString(allowNewFiles)).append("\n");
    sb.append("    allowModifyFiles: ").append(toIndentedString(allowModifyFiles)).append("\n");
    sb.append("    enableReassign: ").append(toIndentedString(enableReassign)).append("\n");
    sb.append("    enablePrintAndSign: ").append(toIndentedString(enablePrintAndSign)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    sharedTemplateDetail: ").append(toIndentedString(sharedTemplateDetail)).append("\n");
    sb.append("    documentInfo: ").append(toIndentedString(documentInfo)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    templateLabels: ").append(toIndentedString(templateLabels)).append("\n");
    sb.append("    behalfOf: ").append(toIndentedString(behalfOf)).append("\n");
    sb.append("    documentDownloadOption: ").append(toIndentedString(documentDownloadOption)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (templateId != null) {
        if (isFileTypeOrListOfFiles(templateId)) {
            fileTypeFound = true;
        }

        if (templateId.getClass().equals(java.io.File.class) ||
            templateId.getClass().equals(Integer.class) ||
            templateId.getClass().equals(String.class) ||
            templateId.getClass().equals(java.net.URI.class)||
            templateId.getClass().isEnum()) {
            map.put("templateId", templateId);
        } else if (isListOfFile(templateId)) {
            for(int i = 0; i< getListSize(templateId); i++) {
                map.put("templateId", templateId);
            }
        }
        else {
          map.put("templateId", JSON.serialize(templateId));
        }
    }
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().equals(java.net.URI.class)||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title", title);
            }
        }
        else {
          map.put("title", JSON.serialize(title));
        }
    }
    if (description != null) {
        if (isFileTypeOrListOfFiles(description)) {
            fileTypeFound = true;
        }

        if (description.getClass().equals(java.io.File.class) ||
            description.getClass().equals(Integer.class) ||
            description.getClass().equals(String.class) ||
            description.getClass().equals(java.net.URI.class)||
            description.getClass().isEnum()) {
            map.put("description", description);
        } else if (isListOfFile(description)) {
            for(int i = 0; i< getListSize(description); i++) {
                map.put("description", description);
            }
        }
        else {
          map.put("description", JSON.serialize(description));
        }
    }
    if (documentTitle != null) {
        if (isFileTypeOrListOfFiles(documentTitle)) {
            fileTypeFound = true;
        }

        if (documentTitle.getClass().equals(java.io.File.class) ||
            documentTitle.getClass().equals(Integer.class) ||
            documentTitle.getClass().equals(String.class) ||
            documentTitle.getClass().equals(java.net.URI.class)||
            documentTitle.getClass().isEnum()) {
            map.put("documentTitle", documentTitle);
        } else if (isListOfFile(documentTitle)) {
            for(int i = 0; i< getListSize(documentTitle); i++) {
                map.put("documentTitle", documentTitle);
            }
        }
        else {
          map.put("documentTitle", JSON.serialize(documentTitle));
        }
    }
    if (documentMessage != null) {
        if (isFileTypeOrListOfFiles(documentMessage)) {
            fileTypeFound = true;
        }

        if (documentMessage.getClass().equals(java.io.File.class) ||
            documentMessage.getClass().equals(Integer.class) ||
            documentMessage.getClass().equals(String.class) ||
            documentMessage.getClass().equals(java.net.URI.class)||
            documentMessage.getClass().isEnum()) {
            map.put("documentMessage", documentMessage);
        } else if (isListOfFile(documentMessage)) {
            for(int i = 0; i< getListSize(documentMessage); i++) {
                map.put("documentMessage", documentMessage);
            }
        }
        else {
          map.put("documentMessage", JSON.serialize(documentMessage));
        }
    }
    if (files != null) {
        if (isFileTypeOrListOfFiles(files)) {
            fileTypeFound = true;
        }

        if (files.getClass().equals(java.io.File.class) ||
            files.getClass().equals(Integer.class) ||
            files.getClass().equals(String.class) ||
            files.getClass().equals(java.net.URI.class)||
            files.getClass().isEnum()) {
            map.put("files", files);
        } else if (isListOfFile(files)) {
            for(int i = 0; i< getListSize(files); i++) {
                map.put("files", files);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : files) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("files", objectList);
        }
    }
    if (roles != null) {
        if (isFileTypeOrListOfFiles(roles)) {
            fileTypeFound = true;
        }

        if (roles.getClass().equals(java.io.File.class) ||
            roles.getClass().equals(Integer.class) ||
            roles.getClass().equals(String.class) ||
            roles.getClass().equals(java.net.URI.class)||
            roles.getClass().isEnum()) {
            map.put("roles", roles);
        } else if (isListOfFile(roles)) {
            for(int i = 0; i< getListSize(roles); i++) {
                map.put("roles", roles);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : roles) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("roles", objectList);
        }
    }
    if (formGroups != null) {
        if (isFileTypeOrListOfFiles(formGroups)) {
            fileTypeFound = true;
        }

        if (formGroups.getClass().equals(java.io.File.class) ||
            formGroups.getClass().equals(Integer.class) ||
            formGroups.getClass().equals(String.class) ||
            formGroups.getClass().equals(java.net.URI.class)||
            formGroups.getClass().isEnum()) {
            map.put("formGroups", formGroups);
        } else if (isListOfFile(formGroups)) {
            for(int i = 0; i< getListSize(formGroups); i++) {
                map.put("formGroups", formGroups);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formGroups) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formGroups", objectList);
        }
    }
    if (commonFields != null) {
        if (isFileTypeOrListOfFiles(commonFields)) {
            fileTypeFound = true;
        }

        if (commonFields.getClass().equals(java.io.File.class) ||
            commonFields.getClass().equals(Integer.class) ||
            commonFields.getClass().equals(String.class) ||
            commonFields.getClass().equals(java.net.URI.class)||
            commonFields.getClass().isEnum()) {
            map.put("commonFields", commonFields);
        } else if (isListOfFile(commonFields)) {
            for(int i = 0; i< getListSize(commonFields); i++) {
                map.put("commonFields", commonFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : commonFields) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("commonFields", objectList);
        }
    }
    if (cCDetails != null) {
        if (isFileTypeOrListOfFiles(cCDetails)) {
            fileTypeFound = true;
        }

        if (cCDetails.getClass().equals(java.io.File.class) ||
            cCDetails.getClass().equals(Integer.class) ||
            cCDetails.getClass().equals(String.class) ||
            cCDetails.getClass().equals(java.net.URI.class)||
            cCDetails.getClass().isEnum()) {
            map.put("cCDetails", cCDetails);
        } else if (isListOfFile(cCDetails)) {
            for(int i = 0; i< getListSize(cCDetails); i++) {
                map.put("cCDetails", cCDetails);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : cCDetails) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("cCDetails", objectList);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().equals(java.net.URI.class)||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", JSON.serialize(brandId));
        }
    }
    if (allowMessageEditing != null) {
        if (isFileTypeOrListOfFiles(allowMessageEditing)) {
            fileTypeFound = true;
        }

        if (allowMessageEditing.getClass().equals(java.io.File.class) ||
            allowMessageEditing.getClass().equals(Integer.class) ||
            allowMessageEditing.getClass().equals(String.class) ||
            allowMessageEditing.getClass().equals(java.net.URI.class)||
            allowMessageEditing.getClass().isEnum()) {
            map.put("allowMessageEditing", allowMessageEditing);
        } else if (isListOfFile(allowMessageEditing)) {
            for(int i = 0; i< getListSize(allowMessageEditing); i++) {
                map.put("allowMessageEditing", allowMessageEditing);
            }
        }
        else {
          map.put("allowMessageEditing", JSON.serialize(allowMessageEditing));
        }
    }
    if (allowNewRoles != null) {
        if (isFileTypeOrListOfFiles(allowNewRoles)) {
            fileTypeFound = true;
        }

        if (allowNewRoles.getClass().equals(java.io.File.class) ||
            allowNewRoles.getClass().equals(Integer.class) ||
            allowNewRoles.getClass().equals(String.class) ||
            allowNewRoles.getClass().equals(java.net.URI.class)||
            allowNewRoles.getClass().isEnum()) {
            map.put("allowNewRoles", allowNewRoles);
        } else if (isListOfFile(allowNewRoles)) {
            for(int i = 0; i< getListSize(allowNewRoles); i++) {
                map.put("allowNewRoles", allowNewRoles);
            }
        }
        else {
          map.put("allowNewRoles", JSON.serialize(allowNewRoles));
        }
    }
    if (allowNewFiles != null) {
        if (isFileTypeOrListOfFiles(allowNewFiles)) {
            fileTypeFound = true;
        }

        if (allowNewFiles.getClass().equals(java.io.File.class) ||
            allowNewFiles.getClass().equals(Integer.class) ||
            allowNewFiles.getClass().equals(String.class) ||
            allowNewFiles.getClass().equals(java.net.URI.class)||
            allowNewFiles.getClass().isEnum()) {
            map.put("allowNewFiles", allowNewFiles);
        } else if (isListOfFile(allowNewFiles)) {
            for(int i = 0; i< getListSize(allowNewFiles); i++) {
                map.put("allowNewFiles", allowNewFiles);
            }
        }
        else {
          map.put("allowNewFiles", JSON.serialize(allowNewFiles));
        }
    }
    if (allowModifyFiles != null) {
        if (isFileTypeOrListOfFiles(allowModifyFiles)) {
            fileTypeFound = true;
        }

        if (allowModifyFiles.getClass().equals(java.io.File.class) ||
            allowModifyFiles.getClass().equals(Integer.class) ||
            allowModifyFiles.getClass().equals(String.class) ||
            allowModifyFiles.getClass().equals(java.net.URI.class)||
            allowModifyFiles.getClass().isEnum()) {
            map.put("allowModifyFiles", allowModifyFiles);
        } else if (isListOfFile(allowModifyFiles)) {
            for(int i = 0; i< getListSize(allowModifyFiles); i++) {
                map.put("allowModifyFiles", allowModifyFiles);
            }
        }
        else {
          map.put("allowModifyFiles", JSON.serialize(allowModifyFiles));
        }
    }
    if (enableReassign != null) {
        if (isFileTypeOrListOfFiles(enableReassign)) {
            fileTypeFound = true;
        }

        if (enableReassign.getClass().equals(java.io.File.class) ||
            enableReassign.getClass().equals(Integer.class) ||
            enableReassign.getClass().equals(String.class) ||
            enableReassign.getClass().equals(java.net.URI.class)||
            enableReassign.getClass().isEnum()) {
            map.put("enableReassign", enableReassign);
        } else if (isListOfFile(enableReassign)) {
            for(int i = 0; i< getListSize(enableReassign); i++) {
                map.put("enableReassign", enableReassign);
            }
        }
        else {
          map.put("enableReassign", JSON.serialize(enableReassign));
        }
    }
    if (enablePrintAndSign != null) {
        if (isFileTypeOrListOfFiles(enablePrintAndSign)) {
            fileTypeFound = true;
        }

        if (enablePrintAndSign.getClass().equals(java.io.File.class) ||
            enablePrintAndSign.getClass().equals(Integer.class) ||
            enablePrintAndSign.getClass().equals(String.class) ||
            enablePrintAndSign.getClass().equals(java.net.URI.class)||
            enablePrintAndSign.getClass().isEnum()) {
            map.put("EnablePrintAndSign", enablePrintAndSign);
        } else if (isListOfFile(enablePrintAndSign)) {
            for(int i = 0; i< getListSize(enablePrintAndSign); i++) {
                map.put("EnablePrintAndSign", enablePrintAndSign);
            }
        }
        else {
          map.put("EnablePrintAndSign", JSON.serialize(enablePrintAndSign));
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().equals(java.net.URI.class)||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", JSON.serialize(enableSigningOrder));
        }
    }
    if (createdDate != null) {
        if (isFileTypeOrListOfFiles(createdDate)) {
            fileTypeFound = true;
        }

        if (createdDate.getClass().equals(java.io.File.class) ||
            createdDate.getClass().equals(Integer.class) ||
            createdDate.getClass().equals(String.class) ||
            createdDate.getClass().equals(java.net.URI.class)||
            createdDate.getClass().isEnum()) {
            map.put("createdDate", createdDate);
        } else if (isListOfFile(createdDate)) {
            for(int i = 0; i< getListSize(createdDate); i++) {
                map.put("createdDate", createdDate);
            }
        }
        else {
          map.put("createdDate", JSON.serialize(createdDate));
        }
    }
    if (createdBy != null) {
        if (isFileTypeOrListOfFiles(createdBy)) {
            fileTypeFound = true;
        }

        if (createdBy.getClass().equals(java.io.File.class) ||
            createdBy.getClass().equals(Integer.class) ||
            createdBy.getClass().equals(String.class) ||
            createdBy.getClass().equals(java.net.URI.class)||
            createdBy.getClass().isEnum()) {
            map.put("createdBy", createdBy);
        } else if (isListOfFile(createdBy)) {
            for(int i = 0; i< getListSize(createdBy); i++) {
                map.put("createdBy", createdBy);
            }
        }
        else {
          map.put("createdBy", JSON.serialize(createdBy));
        }
    }
    if (sharedTemplateDetail != null) {
        if (isFileTypeOrListOfFiles(sharedTemplateDetail)) {
            fileTypeFound = true;
        }

        if (sharedTemplateDetail.getClass().equals(java.io.File.class) ||
            sharedTemplateDetail.getClass().equals(Integer.class) ||
            sharedTemplateDetail.getClass().equals(String.class) ||
            sharedTemplateDetail.getClass().equals(java.net.URI.class)||
            sharedTemplateDetail.getClass().isEnum()) {
            map.put("sharedTemplateDetail", sharedTemplateDetail);
        } else if (isListOfFile(sharedTemplateDetail)) {
            for(int i = 0; i< getListSize(sharedTemplateDetail); i++) {
                map.put("sharedTemplateDetail", sharedTemplateDetail);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : sharedTemplateDetail) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("sharedTemplateDetail", objectList);
        }
    }
    if (documentInfo != null) {
        if (isFileTypeOrListOfFiles(documentInfo)) {
            fileTypeFound = true;
        }

        if (documentInfo.getClass().equals(java.io.File.class) ||
            documentInfo.getClass().equals(Integer.class) ||
            documentInfo.getClass().equals(String.class) ||
            documentInfo.getClass().equals(java.net.URI.class)||
            documentInfo.getClass().isEnum()) {
            map.put("documentInfo", documentInfo);
        } else if (isListOfFile(documentInfo)) {
            for(int i = 0; i< getListSize(documentInfo); i++) {
                map.put("documentInfo", documentInfo);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentInfo) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentInfo", objectList);
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().equals(java.net.URI.class)||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (templateLabels != null) {
        if (isFileTypeOrListOfFiles(templateLabels)) {
            fileTypeFound = true;
        }

        if (templateLabels.getClass().equals(java.io.File.class) ||
            templateLabels.getClass().equals(Integer.class) ||
            templateLabels.getClass().equals(String.class) ||
            templateLabels.getClass().equals(java.net.URI.class)||
            templateLabels.getClass().isEnum()) {
            map.put("templateLabels", templateLabels);
        } else if (isListOfFile(templateLabels)) {
            for(int i = 0; i< getListSize(templateLabels); i++) {
                map.put("templateLabels", templateLabels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : templateLabels) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("templateLabels", objectList);
        }
    }
    if (behalfOf != null) {
        if (isFileTypeOrListOfFiles(behalfOf)) {
            fileTypeFound = true;
        }

        if (behalfOf.getClass().equals(java.io.File.class) ||
            behalfOf.getClass().equals(Integer.class) ||
            behalfOf.getClass().equals(String.class) ||
            behalfOf.getClass().equals(java.net.URI.class)||
            behalfOf.getClass().isEnum()) {
            map.put("behalfOf", behalfOf);
        } else if (isListOfFile(behalfOf)) {
            for(int i = 0; i< getListSize(behalfOf); i++) {
                map.put("behalfOf", behalfOf);
            }
        }
        else {
          map.put("behalfOf", JSON.serialize(behalfOf));
        }
    }
    if (documentDownloadOption != null) {
        if (isFileTypeOrListOfFiles(documentDownloadOption)) {
            fileTypeFound = true;
        }

        if (documentDownloadOption.getClass().equals(java.io.File.class) ||
            documentDownloadOption.getClass().equals(Integer.class) ||
            documentDownloadOption.getClass().equals(String.class) ||
            documentDownloadOption.getClass().equals(java.net.URI.class)||
            documentDownloadOption.getClass().isEnum()) {
            map.put("documentDownloadOption", documentDownloadOption);
        } else if (isListOfFile(documentDownloadOption)) {
            for(int i = 0; i< getListSize(documentDownloadOption); i++) {
                map.put("documentDownloadOption", documentDownloadOption);
            }
        }
        else {
          map.put("documentDownloadOption", JSON.serialize(documentDownloadOption));
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().equals(java.net.URI.class)||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", JSON.serialize(recipientNotificationSettings));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("templateId");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("documentTitle");
    openapiFields.add("documentMessage");
    openapiFields.add("files");
    openapiFields.add("roles");
    openapiFields.add("formGroups");
    openapiFields.add("commonFields");
    openapiFields.add("cCDetails");
    openapiFields.add("brandId");
    openapiFields.add("allowMessageEditing");
    openapiFields.add("allowNewRoles");
    openapiFields.add("allowNewFiles");
    openapiFields.add("allowModifyFiles");
    openapiFields.add("enableReassign");
    openapiFields.add("EnablePrintAndSign");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("createdDate");
    openapiFields.add("createdBy");
    openapiFields.add("sharedTemplateDetail");
    openapiFields.add("documentInfo");
    openapiFields.add("labels");
    openapiFields.add("templateLabels");
    openapiFields.add("behalfOf");
    openapiFields.add("documentDownloadOption");
    openapiFields.add("recipientNotificationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateProperties is not found in the empty JSON string", TemplateProperties.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("documentTitle") != null && !jsonObj.get("documentTitle").isJsonNull()) && !jsonObj.get("documentTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTitle").toString()));
      }
      if ((jsonObj.get("documentMessage") != null && !jsonObj.get("documentMessage").isJsonNull()) && !jsonObj.get("documentMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentMessage").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            DocumentFiles.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            Roles.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if (jsonObj.get("formGroups") != null && !jsonObj.get("formGroups").isJsonNull()) {
        JsonArray jsonArrayformGroups = jsonObj.getAsJsonArray("formGroups");
        if (jsonArrayformGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formGroups` to be an array in the JSON string but got `%s`", jsonObj.get("formGroups").toString()));
          }

          // validate the optional field `formGroups` (array)
          for (int i = 0; i < jsonArrayformGroups.size(); i++) {
            FormGroup.validateJsonElement(jsonArrayformGroups.get(i));
          };
        }
      }
      if (jsonObj.get("commonFields") != null && !jsonObj.get("commonFields").isJsonNull()) {
        JsonArray jsonArraycommonFields = jsonObj.getAsJsonArray("commonFields");
        if (jsonArraycommonFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonFields` to be an array in the JSON string but got `%s`", jsonObj.get("commonFields").toString()));
          }

          // validate the optional field `commonFields` (array)
          for (int i = 0; i < jsonArraycommonFields.size(); i++) {
            TemplateFormFields.validateJsonElement(jsonArraycommonFields.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cCDetails") != null && !jsonObj.get("cCDetails").isJsonNull() && !jsonObj.get("cCDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cCDetails` to be an array in the JSON string but got `%s`", jsonObj.get("cCDetails").toString()));
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        TemplateSenderDetail.validateJsonElement(jsonObj.get("createdBy"));
      }
      if (jsonObj.get("sharedTemplateDetail") != null && !jsonObj.get("sharedTemplateDetail").isJsonNull()) {
        JsonArray jsonArraysharedTemplateDetail = jsonObj.getAsJsonArray("sharedTemplateDetail");
        if (jsonArraysharedTemplateDetail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedTemplateDetail").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedTemplateDetail` to be an array in the JSON string but got `%s`", jsonObj.get("sharedTemplateDetail").toString()));
          }

          // validate the optional field `sharedTemplateDetail` (array)
          for (int i = 0; i < jsonArraysharedTemplateDetail.size(); i++) {
            TemplateSharedTemplateDetail.validateJsonElement(jsonArraysharedTemplateDetail.get(i));
          };
        }
      }
      if (jsonObj.get("documentInfo") != null && !jsonObj.get("documentInfo").isJsonNull()) {
        JsonArray jsonArraydocumentInfo = jsonObj.getAsJsonArray("documentInfo");
        if (jsonArraydocumentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("documentInfo").toString()));
          }

          // validate the optional field `documentInfo` (array)
          for (int i = 0; i < jsonArraydocumentInfo.size(); i++) {
            DocumentInfo.validateJsonElement(jsonArraydocumentInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("templateLabels") != null && !jsonObj.get("templateLabels").isJsonNull() && !jsonObj.get("templateLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateLabels` to be an array in the JSON string but got `%s`", jsonObj.get("templateLabels").toString()));
      }
      // validate the optional field `behalfOf`
      if (jsonObj.get("behalfOf") != null && !jsonObj.get("behalfOf").isJsonNull()) {
        BehalfOf.validateJsonElement(jsonObj.get("behalfOf"));
      }
      if ((jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) && !jsonObj.get("documentDownloadOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDownloadOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentDownloadOption").toString()));
      }
      // validate the optional field `documentDownloadOption`
      if (jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) {
        DocumentDownloadOptionEnum.validateJsonElement(jsonObj.get("documentDownloadOption"));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateProperties>() {
           @Override
           public void write(JsonWriter out, TemplateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateProperties
   * @throws IOException if the JSON string is invalid with respect to TemplateProperties
   */
  public static TemplateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateProperties.class);
  }

  /**
   * Convert an instance of TemplateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

