/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.AuthenticationSettings;
import com.boldsign.model.FormField;
import com.boldsign.model.IdentityVerificationSettings;
import com.boldsign.model.PhoneNumber;
import com.boldsign.model.RecipientNotificationSettings;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * DocumentSigner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class DocumentSigner {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_PRIVATE_MESSAGE = "privateMessage";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MESSAGE)
  private String privateMessage;

  /**
   * Gets or Sets authenticationType
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    NONE("None"),
    
    EMAIL_OTP("EmailOTP"),
    
    ACCESS_CODE("AccessCode"),
    
    SMSOTP("SMSOTP"),
    
    ID_VERIFICATION("IdVerification");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumber phoneNumber;

  /**
   * Gets or Sets deliveryMode
   */
  @JsonAdapter(DeliveryModeEnum.Adapter.class)
  public enum DeliveryModeEnum {
    EMAIL("Email"),
    
    SMS("SMS"),
    
    EMAIL_AND_SMS("EmailAndSMS"),
    
    WHATS_APP("WhatsApp");

    private String value;

    DeliveryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryModeEnum fromValue(String value) {
      for (DeliveryModeEnum b : DeliveryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_MODE = "deliveryMode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_MODE)
  private DeliveryModeEnum deliveryMode;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CODE = "authenticationCode";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CODE)
  private String authenticationCode;

  public static final String SERIALIZED_NAME_IDENTITY_VERIFICATION_SETTINGS = "identityVerificationSettings";
  @SerializedName(SERIALIZED_NAME_IDENTITY_VERIFICATION_SETTINGS)
  private IdentityVerificationSettings identityVerificationSettings;

  public static final String SERIALIZED_NAME_SIGNER_ORDER = "signerOrder";
  @SerializedName(SERIALIZED_NAME_SIGNER_ORDER)
  private Integer signerOrder;

  public static final String SERIALIZED_NAME_ENABLE_EMAIL_O_T_P = "enableEmailOTP";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMAIL_O_T_P)
  private Boolean enableEmailOTP;

  /**
   * Gets or Sets signerType
   */
  @JsonAdapter(SignerTypeEnum.Adapter.class)
  public enum SignerTypeEnum {
    SIGNER("Signer"),
    
    REVIEWER("Reviewer"),
    
    IN_PERSON_SIGNER("InPersonSigner");

    private String value;

    SignerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignerTypeEnum fromValue(String value) {
      for (SignerTypeEnum b : SignerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNER_TYPE = "signerType";
  @SerializedName(SERIALIZED_NAME_SIGNER_TYPE)
  private SignerTypeEnum signerType;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_SIGNER_ROLE = "signerRole";
  @SerializedName(SERIALIZED_NAME_SIGNER_ROLE)
  private String signerRole;

  public static final String SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION = "allowFieldConfiguration";
  @SerializedName(SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION)
  private Boolean allowFieldConfiguration;

  public static final String SERIALIZED_NAME_FORM_FIELDS = "formFields";
  @SerializedName(SERIALIZED_NAME_FORM_FIELDS)
  private List<FormField> formFields;

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15);

    private Integer value;

    LanguageEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(Integer value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  /**
   * Gets or Sets locale
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("EN"),
    
    NO("NO"),
    
    FR("FR"),
    
    DE("DE"),
    
    ES("ES"),
    
    BG("BG"),
    
    CS("CS"),
    
    DA("DA"),
    
    IT("IT"),
    
    NL("NL"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    RU("RU"),
    
    SV("SV"),
    
    DEFAULT("Default");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_AUTHENTICATION_RETRY_COUNT = "authenticationRetryCount";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_RETRY_COUNT)
  private Integer authenticationRetryCount;

  public static final String SERIALIZED_NAME_ENABLE_QES = "enableQes";
  @SerializedName(SERIALIZED_NAME_ENABLE_QES)
  private Boolean enableQes;

  public static final String SERIALIZED_NAME_AUTHENTICATION_SETTINGS = "authenticationSettings";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SETTINGS)
  private AuthenticationSettings authenticationSettings;

  public DocumentSigner() {
  }

  public DocumentSigner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DocumentSigner emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public DocumentSigner privateMessage(String privateMessage) {
    this.privateMessage = privateMessage;
    return this;
  }

  /**
   * Get privateMessage
   * @return privateMessage
   */
  @javax.annotation.Nullable
  public String getPrivateMessage() {
    return privateMessage;
  }

  public void setPrivateMessage(String privateMessage) {
    this.privateMessage = privateMessage;
  }


  public DocumentSigner authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public DocumentSigner phoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public DocumentSigner deliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  /**
   * Get deliveryMode
   * @return deliveryMode
   */
  @javax.annotation.Nullable
  public DeliveryModeEnum getDeliveryMode() {
    return deliveryMode;
  }

  public void setDeliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
  }


  public DocumentSigner authenticationCode(String authenticationCode) {
    this.authenticationCode = authenticationCode;
    return this;
  }

  /**
   * Get authenticationCode
   * @return authenticationCode
   */
  @javax.annotation.Nullable
  public String getAuthenticationCode() {
    return authenticationCode;
  }

  public void setAuthenticationCode(String authenticationCode) {
    this.authenticationCode = authenticationCode;
  }


  public DocumentSigner identityVerificationSettings(IdentityVerificationSettings identityVerificationSettings) {
    this.identityVerificationSettings = identityVerificationSettings;
    return this;
  }

  /**
   * Get identityVerificationSettings
   * @return identityVerificationSettings
   */
  @javax.annotation.Nullable
  public IdentityVerificationSettings getIdentityVerificationSettings() {
    return identityVerificationSettings;
  }

  public void setIdentityVerificationSettings(IdentityVerificationSettings identityVerificationSettings) {
    this.identityVerificationSettings = identityVerificationSettings;
  }


  public DocumentSigner signerOrder(Integer signerOrder) {
    this.signerOrder = signerOrder;
    return this;
  }

  /**
   * Get signerOrder
   * @return signerOrder
   */
  @javax.annotation.Nullable
  public Integer getSignerOrder() {
    return signerOrder;
  }

  public void setSignerOrder(Integer signerOrder) {
    this.signerOrder = signerOrder;
  }


  public DocumentSigner enableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
    return this;
  }

  /**
   * Get enableEmailOTP
   * @return enableEmailOTP
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmailOTP() {
    return enableEmailOTP;
  }

  public void setEnableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
  }


  public DocumentSigner signerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
    return this;
  }

  /**
   * Get signerType
   * @return signerType
   */
  @javax.annotation.Nullable
  public SignerTypeEnum getSignerType() {
    return signerType;
  }

  public void setSignerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
  }


  public DocumentSigner hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Get hostEmail
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public DocumentSigner signerRole(String signerRole) {
    this.signerRole = signerRole;
    return this;
  }

  /**
   * Get signerRole
   * @return signerRole
   */
  @javax.annotation.Nullable
  public String getSignerRole() {
    return signerRole;
  }

  public void setSignerRole(String signerRole) {
    this.signerRole = signerRole;
  }


  public DocumentSigner allowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
    return this;
  }

  /**
   * Get allowFieldConfiguration
   * @return allowFieldConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getAllowFieldConfiguration() {
    return allowFieldConfiguration;
  }

  public void setAllowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
  }


  public DocumentSigner formFields(List<FormField> formFields) {
    this.formFields = formFields;
    return this;
  }

  public DocumentSigner addFormFieldsItem(FormField formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

  /**
   * Get formFields
   * @return formFields
   */
  @javax.annotation.Nullable
  public List<FormField> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<FormField> formFields) {
    this.formFields = formFields;
  }


  public DocumentSigner language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public DocumentSigner locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public DocumentSigner recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public DocumentSigner authenticationRetryCount(Integer authenticationRetryCount) {
    this.authenticationRetryCount = authenticationRetryCount;
    return this;
  }

  /**
   * Get authenticationRetryCount
   * minimum: 1
   * maximum: 10
   * @return authenticationRetryCount
   */
  @javax.annotation.Nullable
  public Integer getAuthenticationRetryCount() {
    return authenticationRetryCount;
  }

  public void setAuthenticationRetryCount(Integer authenticationRetryCount) {
    this.authenticationRetryCount = authenticationRetryCount;
  }


  public DocumentSigner enableQes(Boolean enableQes) {
    this.enableQes = enableQes;
    return this;
  }

  /**
   * Get enableQes
   * @return enableQes
   */
  @javax.annotation.Nullable
  public Boolean getEnableQes() {
    return enableQes;
  }

  public void setEnableQes(Boolean enableQes) {
    this.enableQes = enableQes;
  }


  public DocumentSigner authenticationSettings(AuthenticationSettings authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
    return this;
  }

  /**
   * Get authenticationSettings
   * @return authenticationSettings
   */
  @javax.annotation.Nullable
  public AuthenticationSettings getAuthenticationSettings() {
    return authenticationSettings;
  }

  public void setAuthenticationSettings(AuthenticationSettings authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSigner documentSigner = (DocumentSigner) o;
    return Objects.equals(this.name, documentSigner.name) &&
        Objects.equals(this.emailAddress, documentSigner.emailAddress) &&
        Objects.equals(this.privateMessage, documentSigner.privateMessage) &&
        Objects.equals(this.authenticationType, documentSigner.authenticationType) &&
        Objects.equals(this.phoneNumber, documentSigner.phoneNumber) &&
        Objects.equals(this.deliveryMode, documentSigner.deliveryMode) &&
        Objects.equals(this.authenticationCode, documentSigner.authenticationCode) &&
        Objects.equals(this.identityVerificationSettings, documentSigner.identityVerificationSettings) &&
        Objects.equals(this.signerOrder, documentSigner.signerOrder) &&
        Objects.equals(this.enableEmailOTP, documentSigner.enableEmailOTP) &&
        Objects.equals(this.signerType, documentSigner.signerType) &&
        Objects.equals(this.hostEmail, documentSigner.hostEmail) &&
        Objects.equals(this.signerRole, documentSigner.signerRole) &&
        Objects.equals(this.allowFieldConfiguration, documentSigner.allowFieldConfiguration) &&
        Objects.equals(this.formFields, documentSigner.formFields) &&
        Objects.equals(this.language, documentSigner.language) &&
        Objects.equals(this.locale, documentSigner.locale) &&
        Objects.equals(this.recipientNotificationSettings, documentSigner.recipientNotificationSettings) &&
        Objects.equals(this.authenticationRetryCount, documentSigner.authenticationRetryCount) &&
        Objects.equals(this.enableQes, documentSigner.enableQes) &&
        Objects.equals(this.authenticationSettings, documentSigner.authenticationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, emailAddress, privateMessage, authenticationType, phoneNumber, deliveryMode, authenticationCode, identityVerificationSettings, signerOrder, enableEmailOTP, signerType, hostEmail, signerRole, allowFieldConfiguration, formFields, language, locale, recipientNotificationSettings, authenticationRetryCount, enableQes, authenticationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSigner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    privateMessage: ").append(toIndentedString(privateMessage)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    deliveryMode: ").append(toIndentedString(deliveryMode)).append("\n");
    sb.append("    authenticationCode: ").append(toIndentedString(authenticationCode)).append("\n");
    sb.append("    identityVerificationSettings: ").append(toIndentedString(identityVerificationSettings)).append("\n");
    sb.append("    signerOrder: ").append(toIndentedString(signerOrder)).append("\n");
    sb.append("    enableEmailOTP: ").append(toIndentedString(enableEmailOTP)).append("\n");
    sb.append("    signerType: ").append(toIndentedString(signerType)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    signerRole: ").append(toIndentedString(signerRole)).append("\n");
    sb.append("    allowFieldConfiguration: ").append(toIndentedString(allowFieldConfiguration)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    authenticationRetryCount: ").append(toIndentedString(authenticationRetryCount)).append("\n");
    sb.append("    enableQes: ").append(toIndentedString(enableQes)).append("\n");
    sb.append("    authenticationSettings: ").append(toIndentedString(authenticationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (name != null) {
        if (isFileTypeOrListOfFiles(name)) {
            fileTypeFound = true;
        }

        if (name.getClass().equals(java.io.File.class) ||
            name.getClass().equals(Integer.class) ||
            name.getClass().equals(String.class) ||
            name.getClass().equals(java.net.URI.class)||
            name.getClass().isEnum()) {
            map.put("name", name);
        } else if (isListOfFile(name)) {
            for(int i = 0; i< getListSize(name); i++) {
                map.put("name", name);
            }
        }
        else {
          map.put("name", JSON.serialize(name));
        }
    }
    if (emailAddress != null) {
        if (isFileTypeOrListOfFiles(emailAddress)) {
            fileTypeFound = true;
        }

        if (emailAddress.getClass().equals(java.io.File.class) ||
            emailAddress.getClass().equals(Integer.class) ||
            emailAddress.getClass().equals(String.class) ||
            emailAddress.getClass().equals(java.net.URI.class)||
            emailAddress.getClass().isEnum()) {
            map.put("emailAddress", emailAddress);
        } else if (isListOfFile(emailAddress)) {
            for(int i = 0; i< getListSize(emailAddress); i++) {
                map.put("emailAddress", emailAddress);
            }
        }
        else {
          map.put("emailAddress", JSON.serialize(emailAddress));
        }
    }
    if (privateMessage != null) {
        if (isFileTypeOrListOfFiles(privateMessage)) {
            fileTypeFound = true;
        }

        if (privateMessage.getClass().equals(java.io.File.class) ||
            privateMessage.getClass().equals(Integer.class) ||
            privateMessage.getClass().equals(String.class) ||
            privateMessage.getClass().equals(java.net.URI.class)||
            privateMessage.getClass().isEnum()) {
            map.put("privateMessage", privateMessage);
        } else if (isListOfFile(privateMessage)) {
            for(int i = 0; i< getListSize(privateMessage); i++) {
                map.put("privateMessage", privateMessage);
            }
        }
        else {
          map.put("privateMessage", JSON.serialize(privateMessage));
        }
    }
    if (authenticationType != null) {
        if (isFileTypeOrListOfFiles(authenticationType)) {
            fileTypeFound = true;
        }

        if (authenticationType.getClass().equals(java.io.File.class) ||
            authenticationType.getClass().equals(Integer.class) ||
            authenticationType.getClass().equals(String.class) ||
            authenticationType.getClass().equals(java.net.URI.class)||
            authenticationType.getClass().isEnum()) {
            map.put("authenticationType", authenticationType);
        } else if (isListOfFile(authenticationType)) {
            for(int i = 0; i< getListSize(authenticationType); i++) {
                map.put("authenticationType", authenticationType);
            }
        }
        else {
          map.put("authenticationType", JSON.serialize(authenticationType));
        }
    }
    if (phoneNumber != null) {
        if (isFileTypeOrListOfFiles(phoneNumber)) {
            fileTypeFound = true;
        }

        if (phoneNumber.getClass().equals(java.io.File.class) ||
            phoneNumber.getClass().equals(Integer.class) ||
            phoneNumber.getClass().equals(String.class) ||
            phoneNumber.getClass().equals(java.net.URI.class)||
            phoneNumber.getClass().isEnum()) {
            map.put("phoneNumber", phoneNumber);
        } else if (isListOfFile(phoneNumber)) {
            for(int i = 0; i< getListSize(phoneNumber); i++) {
                map.put("phoneNumber", phoneNumber);
            }
        }
        else {
          map.put("phoneNumber", JSON.serialize(phoneNumber));
        }
    }
    if (deliveryMode != null) {
        if (isFileTypeOrListOfFiles(deliveryMode)) {
            fileTypeFound = true;
        }

        if (deliveryMode.getClass().equals(java.io.File.class) ||
            deliveryMode.getClass().equals(Integer.class) ||
            deliveryMode.getClass().equals(String.class) ||
            deliveryMode.getClass().equals(java.net.URI.class)||
            deliveryMode.getClass().isEnum()) {
            map.put("deliveryMode", deliveryMode);
        } else if (isListOfFile(deliveryMode)) {
            for(int i = 0; i< getListSize(deliveryMode); i++) {
                map.put("deliveryMode", deliveryMode);
            }
        }
        else {
          map.put("deliveryMode", JSON.serialize(deliveryMode));
        }
    }
    if (authenticationCode != null) {
        if (isFileTypeOrListOfFiles(authenticationCode)) {
            fileTypeFound = true;
        }

        if (authenticationCode.getClass().equals(java.io.File.class) ||
            authenticationCode.getClass().equals(Integer.class) ||
            authenticationCode.getClass().equals(String.class) ||
            authenticationCode.getClass().equals(java.net.URI.class)||
            authenticationCode.getClass().isEnum()) {
            map.put("authenticationCode", authenticationCode);
        } else if (isListOfFile(authenticationCode)) {
            for(int i = 0; i< getListSize(authenticationCode); i++) {
                map.put("authenticationCode", authenticationCode);
            }
        }
        else {
          map.put("authenticationCode", JSON.serialize(authenticationCode));
        }
    }
    if (identityVerificationSettings != null) {
        if (isFileTypeOrListOfFiles(identityVerificationSettings)) {
            fileTypeFound = true;
        }

        if (identityVerificationSettings.getClass().equals(java.io.File.class) ||
            identityVerificationSettings.getClass().equals(Integer.class) ||
            identityVerificationSettings.getClass().equals(String.class) ||
            identityVerificationSettings.getClass().equals(java.net.URI.class)||
            identityVerificationSettings.getClass().isEnum()) {
            map.put("identityVerificationSettings", identityVerificationSettings);
        } else if (isListOfFile(identityVerificationSettings)) {
            for(int i = 0; i< getListSize(identityVerificationSettings); i++) {
                map.put("identityVerificationSettings", identityVerificationSettings);
            }
        }
        else {
          map.put("identityVerificationSettings", JSON.serialize(identityVerificationSettings));
        }
    }
    if (signerOrder != null) {
        if (isFileTypeOrListOfFiles(signerOrder)) {
            fileTypeFound = true;
        }

        if (signerOrder.getClass().equals(java.io.File.class) ||
            signerOrder.getClass().equals(Integer.class) ||
            signerOrder.getClass().equals(String.class) ||
            signerOrder.getClass().equals(java.net.URI.class)||
            signerOrder.getClass().isEnum()) {
            map.put("signerOrder", signerOrder);
        } else if (isListOfFile(signerOrder)) {
            for(int i = 0; i< getListSize(signerOrder); i++) {
                map.put("signerOrder", signerOrder);
            }
        }
        else {
          map.put("signerOrder", JSON.serialize(signerOrder));
        }
    }
    if (enableEmailOTP != null) {
        if (isFileTypeOrListOfFiles(enableEmailOTP)) {
            fileTypeFound = true;
        }

        if (enableEmailOTP.getClass().equals(java.io.File.class) ||
            enableEmailOTP.getClass().equals(Integer.class) ||
            enableEmailOTP.getClass().equals(String.class) ||
            enableEmailOTP.getClass().equals(java.net.URI.class)||
            enableEmailOTP.getClass().isEnum()) {
            map.put("enableEmailOTP", enableEmailOTP);
        } else if (isListOfFile(enableEmailOTP)) {
            for(int i = 0; i< getListSize(enableEmailOTP); i++) {
                map.put("enableEmailOTP", enableEmailOTP);
            }
        }
        else {
          map.put("enableEmailOTP", JSON.serialize(enableEmailOTP));
        }
    }
    if (signerType != null) {
        if (isFileTypeOrListOfFiles(signerType)) {
            fileTypeFound = true;
        }

        if (signerType.getClass().equals(java.io.File.class) ||
            signerType.getClass().equals(Integer.class) ||
            signerType.getClass().equals(String.class) ||
            signerType.getClass().equals(java.net.URI.class)||
            signerType.getClass().isEnum()) {
            map.put("signerType", signerType);
        } else if (isListOfFile(signerType)) {
            for(int i = 0; i< getListSize(signerType); i++) {
                map.put("signerType", signerType);
            }
        }
        else {
          map.put("signerType", JSON.serialize(signerType));
        }
    }
    if (hostEmail != null) {
        if (isFileTypeOrListOfFiles(hostEmail)) {
            fileTypeFound = true;
        }

        if (hostEmail.getClass().equals(java.io.File.class) ||
            hostEmail.getClass().equals(Integer.class) ||
            hostEmail.getClass().equals(String.class) ||
            hostEmail.getClass().equals(java.net.URI.class)||
            hostEmail.getClass().isEnum()) {
            map.put("hostEmail", hostEmail);
        } else if (isListOfFile(hostEmail)) {
            for(int i = 0; i< getListSize(hostEmail); i++) {
                map.put("hostEmail", hostEmail);
            }
        }
        else {
          map.put("hostEmail", JSON.serialize(hostEmail));
        }
    }
    if (signerRole != null) {
        if (isFileTypeOrListOfFiles(signerRole)) {
            fileTypeFound = true;
        }

        if (signerRole.getClass().equals(java.io.File.class) ||
            signerRole.getClass().equals(Integer.class) ||
            signerRole.getClass().equals(String.class) ||
            signerRole.getClass().equals(java.net.URI.class)||
            signerRole.getClass().isEnum()) {
            map.put("signerRole", signerRole);
        } else if (isListOfFile(signerRole)) {
            for(int i = 0; i< getListSize(signerRole); i++) {
                map.put("signerRole", signerRole);
            }
        }
        else {
          map.put("signerRole", JSON.serialize(signerRole));
        }
    }
    if (allowFieldConfiguration != null) {
        if (isFileTypeOrListOfFiles(allowFieldConfiguration)) {
            fileTypeFound = true;
        }

        if (allowFieldConfiguration.getClass().equals(java.io.File.class) ||
            allowFieldConfiguration.getClass().equals(Integer.class) ||
            allowFieldConfiguration.getClass().equals(String.class) ||
            allowFieldConfiguration.getClass().equals(java.net.URI.class)||
            allowFieldConfiguration.getClass().isEnum()) {
            map.put("allowFieldConfiguration", allowFieldConfiguration);
        } else if (isListOfFile(allowFieldConfiguration)) {
            for(int i = 0; i< getListSize(allowFieldConfiguration); i++) {
                map.put("allowFieldConfiguration", allowFieldConfiguration);
            }
        }
        else {
          map.put("allowFieldConfiguration", JSON.serialize(allowFieldConfiguration));
        }
    }
    if (formFields != null) {
        if (isFileTypeOrListOfFiles(formFields)) {
            fileTypeFound = true;
        }

        if (formFields.getClass().equals(java.io.File.class) ||
            formFields.getClass().equals(Integer.class) ||
            formFields.getClass().equals(String.class) ||
            formFields.getClass().equals(java.net.URI.class)||
            formFields.getClass().isEnum()) {
            map.put("formFields", formFields);
        } else if (isListOfFile(formFields)) {
            for(int i = 0; i< getListSize(formFields); i++) {
                map.put("formFields", formFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formFields) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formFields", objectList);
        }
    }
    if (language != null) {
        if (isFileTypeOrListOfFiles(language)) {
            fileTypeFound = true;
        }

        if (language.getClass().equals(java.io.File.class) ||
            language.getClass().equals(Integer.class) ||
            language.getClass().equals(String.class) ||
            language.getClass().equals(java.net.URI.class)||
            language.getClass().isEnum()) {
            map.put("language", language);
        } else if (isListOfFile(language)) {
            for(int i = 0; i< getListSize(language); i++) {
                map.put("language", language);
            }
        }
        else {
          map.put("language", JSON.serialize(language));
        }
    }
    if (locale != null) {
        if (isFileTypeOrListOfFiles(locale)) {
            fileTypeFound = true;
        }

        if (locale.getClass().equals(java.io.File.class) ||
            locale.getClass().equals(Integer.class) ||
            locale.getClass().equals(String.class) ||
            locale.getClass().equals(java.net.URI.class)||
            locale.getClass().isEnum()) {
            map.put("locale", locale);
        } else if (isListOfFile(locale)) {
            for(int i = 0; i< getListSize(locale); i++) {
                map.put("locale", locale);
            }
        }
        else {
          map.put("locale", JSON.serialize(locale));
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().equals(java.net.URI.class)||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", JSON.serialize(recipientNotificationSettings));
        }
    }
    if (authenticationRetryCount != null) {
        if (isFileTypeOrListOfFiles(authenticationRetryCount)) {
            fileTypeFound = true;
        }

        if (authenticationRetryCount.getClass().equals(java.io.File.class) ||
            authenticationRetryCount.getClass().equals(Integer.class) ||
            authenticationRetryCount.getClass().equals(String.class) ||
            authenticationRetryCount.getClass().equals(java.net.URI.class)||
            authenticationRetryCount.getClass().isEnum()) {
            map.put("authenticationRetryCount", authenticationRetryCount);
        } else if (isListOfFile(authenticationRetryCount)) {
            for(int i = 0; i< getListSize(authenticationRetryCount); i++) {
                map.put("authenticationRetryCount", authenticationRetryCount);
            }
        }
        else {
          map.put("authenticationRetryCount", JSON.serialize(authenticationRetryCount));
        }
    }
    if (enableQes != null) {
        if (isFileTypeOrListOfFiles(enableQes)) {
            fileTypeFound = true;
        }

        if (enableQes.getClass().equals(java.io.File.class) ||
            enableQes.getClass().equals(Integer.class) ||
            enableQes.getClass().equals(String.class) ||
            enableQes.getClass().equals(java.net.URI.class)||
            enableQes.getClass().isEnum()) {
            map.put("enableQes", enableQes);
        } else if (isListOfFile(enableQes)) {
            for(int i = 0; i< getListSize(enableQes); i++) {
                map.put("enableQes", enableQes);
            }
        }
        else {
          map.put("enableQes", JSON.serialize(enableQes));
        }
    }
    if (authenticationSettings != null) {
        if (isFileTypeOrListOfFiles(authenticationSettings)) {
            fileTypeFound = true;
        }

        if (authenticationSettings.getClass().equals(java.io.File.class) ||
            authenticationSettings.getClass().equals(Integer.class) ||
            authenticationSettings.getClass().equals(String.class) ||
            authenticationSettings.getClass().equals(java.net.URI.class)||
            authenticationSettings.getClass().isEnum()) {
            map.put("authenticationSettings", authenticationSettings);
        } else if (isListOfFile(authenticationSettings)) {
            for(int i = 0; i< getListSize(authenticationSettings); i++) {
                map.put("authenticationSettings", authenticationSettings);
            }
        }
        else {
          map.put("authenticationSettings", JSON.serialize(authenticationSettings));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("emailAddress");
    openapiFields.add("privateMessage");
    openapiFields.add("authenticationType");
    openapiFields.add("phoneNumber");
    openapiFields.add("deliveryMode");
    openapiFields.add("authenticationCode");
    openapiFields.add("identityVerificationSettings");
    openapiFields.add("signerOrder");
    openapiFields.add("enableEmailOTP");
    openapiFields.add("signerType");
    openapiFields.add("hostEmail");
    openapiFields.add("signerRole");
    openapiFields.add("allowFieldConfiguration");
    openapiFields.add("formFields");
    openapiFields.add("language");
    openapiFields.add("locale");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("authenticationRetryCount");
    openapiFields.add("enableQes");
    openapiFields.add("authenticationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSigner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSigner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSigner is not found in the empty JSON string", DocumentSigner.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentSigner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("privateMessage") != null && !jsonObj.get("privateMessage").isJsonNull()) && !jsonObj.get("privateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateMessage").toString()));
      }
      if ((jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) && !jsonObj.get("authenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationType").toString()));
      }
      // validate the optional field `authenticationType`
      if (jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) {
        AuthenticationTypeEnum.validateJsonElement(jsonObj.get("authenticationType"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) && !jsonObj.get("deliveryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryMode").toString()));
      }
      // validate the optional field `deliveryMode`
      if (jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) {
        DeliveryModeEnum.validateJsonElement(jsonObj.get("deliveryMode"));
      }
      if ((jsonObj.get("authenticationCode") != null && !jsonObj.get("authenticationCode").isJsonNull()) && !jsonObj.get("authenticationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationCode").toString()));
      }
      // validate the optional field `identityVerificationSettings`
      if (jsonObj.get("identityVerificationSettings") != null && !jsonObj.get("identityVerificationSettings").isJsonNull()) {
        IdentityVerificationSettings.validateJsonElement(jsonObj.get("identityVerificationSettings"));
      }
      if ((jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) && !jsonObj.get("signerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerType").toString()));
      }
      // validate the optional field `signerType`
      if (jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) {
        SignerTypeEnum.validateJsonElement(jsonObj.get("signerType"));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
      if ((jsonObj.get("signerRole") != null && !jsonObj.get("signerRole").isJsonNull()) && !jsonObj.get("signerRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerRole").toString()));
      }
      if (jsonObj.get("formFields") != null && !jsonObj.get("formFields").isJsonNull()) {
        JsonArray jsonArrayformFields = jsonObj.getAsJsonArray("formFields");
        if (jsonArrayformFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formFields` to be an array in the JSON string but got `%s`", jsonObj.get("formFields").toString()));
          }

          // validate the optional field `formFields` (array)
          for (int i = 0; i < jsonArrayformFields.size(); i++) {
            FormField.validateJsonElement(jsonArrayformFields.get(i));
          };
        }
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
      // validate the optional field `authenticationSettings`
      if (jsonObj.get("authenticationSettings") != null && !jsonObj.get("authenticationSettings").isJsonNull()) {
        AuthenticationSettings.validateJsonElement(jsonObj.get("authenticationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSigner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSigner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSigner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSigner.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSigner>() {
           @Override
           public void write(JsonWriter out, DocumentSigner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSigner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSigner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSigner
   * @throws IOException if the JSON string is invalid with respect to DocumentSigner
   */
  public static DocumentSigner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSigner.class);
  }

  /**
   * Convert an instance of DocumentSigner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

