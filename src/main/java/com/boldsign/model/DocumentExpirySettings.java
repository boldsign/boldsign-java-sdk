/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * DocumentExpirySettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class DocumentExpirySettings {
  /**
   * Gets or Sets expiryDateType
   */
  @JsonAdapter(ExpiryDateTypeEnum.Adapter.class)
  public enum ExpiryDateTypeEnum {
    DAYS("Days"),
    
    HOURS("Hours"),
    
    SPECIFIC_DATE_TIME("SpecificDateTime");

    private String value;

    ExpiryDateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpiryDateTypeEnum fromValue(String value) {
      for (ExpiryDateTypeEnum b : ExpiryDateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ExpiryDateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpiryDateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpiryDateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpiryDateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpiryDateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRY_DATE_TYPE = "expiryDateType";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_TYPE)
  private ExpiryDateTypeEnum expiryDateType;

  public static final String SERIALIZED_NAME_EXPIRY_VALUE = "expiryValue";
  @SerializedName(SERIALIZED_NAME_EXPIRY_VALUE)
  private Integer expiryValue;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_EXPIRY_ALERT = "enableDefaultExpiryAlert";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_EXPIRY_ALERT)
  private Boolean enableDefaultExpiryAlert;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_REMINDER = "enableAutoReminder";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_REMINDER)
  private Boolean enableAutoReminder;

  public static final String SERIALIZED_NAME_REMINDER_DAYS = "reminderDays";
  @SerializedName(SERIALIZED_NAME_REMINDER_DAYS)
  private Integer reminderDays;

  public static final String SERIALIZED_NAME_REMINDER_COUNT = "reminderCount";
  @SerializedName(SERIALIZED_NAME_REMINDER_COUNT)
  private Integer reminderCount;

  public DocumentExpirySettings() {
  }

  public DocumentExpirySettings expiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
    return this;
  }

  /**
   * Get expiryDateType
   * @return expiryDateType
   */
  @javax.annotation.Nullable
  public ExpiryDateTypeEnum getExpiryDateType() {
    return expiryDateType;
  }

  public void setExpiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
  }


  public DocumentExpirySettings expiryValue(Integer expiryValue) {
    this.expiryValue = expiryValue;
    return this;
  }

  /**
   * Get expiryValue
   * @return expiryValue
   */
  @javax.annotation.Nullable
  public Integer getExpiryValue() {
    return expiryValue;
  }

  public void setExpiryValue(Integer expiryValue) {
    this.expiryValue = expiryValue;
  }


  public DocumentExpirySettings enableDefaultExpiryAlert(Boolean enableDefaultExpiryAlert) {
    this.enableDefaultExpiryAlert = enableDefaultExpiryAlert;
    return this;
  }

  /**
   * Get enableDefaultExpiryAlert
   * @return enableDefaultExpiryAlert
   */
  @javax.annotation.Nullable
  public Boolean getEnableDefaultExpiryAlert() {
    return enableDefaultExpiryAlert;
  }

  public void setEnableDefaultExpiryAlert(Boolean enableDefaultExpiryAlert) {
    this.enableDefaultExpiryAlert = enableDefaultExpiryAlert;
  }


  public DocumentExpirySettings enableAutoReminder(Boolean enableAutoReminder) {
    this.enableAutoReminder = enableAutoReminder;
    return this;
  }

  /**
   * Get enableAutoReminder
   * @return enableAutoReminder
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoReminder() {
    return enableAutoReminder;
  }

  public void setEnableAutoReminder(Boolean enableAutoReminder) {
    this.enableAutoReminder = enableAutoReminder;
  }


  public DocumentExpirySettings reminderDays(Integer reminderDays) {
    this.reminderDays = reminderDays;
    return this;
  }

  /**
   * Get reminderDays
   * minimum: 1
   * maximum: 180
   * @return reminderDays
   */
  @javax.annotation.Nullable
  public Integer getReminderDays() {
    return reminderDays;
  }

  public void setReminderDays(Integer reminderDays) {
    this.reminderDays = reminderDays;
  }


  public DocumentExpirySettings reminderCount(Integer reminderCount) {
    this.reminderCount = reminderCount;
    return this;
  }

  /**
   * Get reminderCount
   * @return reminderCount
   */
  @javax.annotation.Nullable
  public Integer getReminderCount() {
    return reminderCount;
  }

  public void setReminderCount(Integer reminderCount) {
    this.reminderCount = reminderCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentExpirySettings documentExpirySettings = (DocumentExpirySettings) o;
    return Objects.equals(this.expiryDateType, documentExpirySettings.expiryDateType) &&
        Objects.equals(this.expiryValue, documentExpirySettings.expiryValue) &&
        Objects.equals(this.enableDefaultExpiryAlert, documentExpirySettings.enableDefaultExpiryAlert) &&
        Objects.equals(this.enableAutoReminder, documentExpirySettings.enableAutoReminder) &&
        Objects.equals(this.reminderDays, documentExpirySettings.reminderDays) &&
        Objects.equals(this.reminderCount, documentExpirySettings.reminderCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiryDateType, expiryValue, enableDefaultExpiryAlert, enableAutoReminder, reminderDays, reminderCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentExpirySettings {\n");
    sb.append("    expiryDateType: ").append(toIndentedString(expiryDateType)).append("\n");
    sb.append("    expiryValue: ").append(toIndentedString(expiryValue)).append("\n");
    sb.append("    enableDefaultExpiryAlert: ").append(toIndentedString(enableDefaultExpiryAlert)).append("\n");
    sb.append("    enableAutoReminder: ").append(toIndentedString(enableAutoReminder)).append("\n");
    sb.append("    reminderDays: ").append(toIndentedString(reminderDays)).append("\n");
    sb.append("    reminderCount: ").append(toIndentedString(reminderCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (expiryDateType != null) {
        if (isFileTypeOrListOfFiles(expiryDateType)) {
            fileTypeFound = true;
        }

        if (expiryDateType.getClass().equals(java.io.File.class) ||
            expiryDateType.getClass().equals(Integer.class) ||
            expiryDateType.getClass().equals(String.class) ||
            expiryDateType.getClass().equals(java.net.URI.class)||
            expiryDateType.getClass().isEnum()) {
            map.put("expiryDateType", expiryDateType);
        } else if (isListOfFile(expiryDateType)) {
            for(int i = 0; i< getListSize(expiryDateType); i++) {
                map.put("expiryDateType", expiryDateType);
            }
        }
        else {
          map.put("expiryDateType", JSON.serialize(expiryDateType));
        }
    }
    if (expiryValue != null) {
        if (isFileTypeOrListOfFiles(expiryValue)) {
            fileTypeFound = true;
        }

        if (expiryValue.getClass().equals(java.io.File.class) ||
            expiryValue.getClass().equals(Integer.class) ||
            expiryValue.getClass().equals(String.class) ||
            expiryValue.getClass().equals(java.net.URI.class)||
            expiryValue.getClass().isEnum()) {
            map.put("expiryValue", expiryValue);
        } else if (isListOfFile(expiryValue)) {
            for(int i = 0; i< getListSize(expiryValue); i++) {
                map.put("expiryValue", expiryValue);
            }
        }
        else {
          map.put("expiryValue", JSON.serialize(expiryValue));
        }
    }
    if (enableDefaultExpiryAlert != null) {
        if (isFileTypeOrListOfFiles(enableDefaultExpiryAlert)) {
            fileTypeFound = true;
        }

        if (enableDefaultExpiryAlert.getClass().equals(java.io.File.class) ||
            enableDefaultExpiryAlert.getClass().equals(Integer.class) ||
            enableDefaultExpiryAlert.getClass().equals(String.class) ||
            enableDefaultExpiryAlert.getClass().equals(java.net.URI.class)||
            enableDefaultExpiryAlert.getClass().isEnum()) {
            map.put("enableDefaultExpiryAlert", enableDefaultExpiryAlert);
        } else if (isListOfFile(enableDefaultExpiryAlert)) {
            for(int i = 0; i< getListSize(enableDefaultExpiryAlert); i++) {
                map.put("enableDefaultExpiryAlert", enableDefaultExpiryAlert);
            }
        }
        else {
          map.put("enableDefaultExpiryAlert", JSON.serialize(enableDefaultExpiryAlert));
        }
    }
    if (enableAutoReminder != null) {
        if (isFileTypeOrListOfFiles(enableAutoReminder)) {
            fileTypeFound = true;
        }

        if (enableAutoReminder.getClass().equals(java.io.File.class) ||
            enableAutoReminder.getClass().equals(Integer.class) ||
            enableAutoReminder.getClass().equals(String.class) ||
            enableAutoReminder.getClass().equals(java.net.URI.class)||
            enableAutoReminder.getClass().isEnum()) {
            map.put("enableAutoReminder", enableAutoReminder);
        } else if (isListOfFile(enableAutoReminder)) {
            for(int i = 0; i< getListSize(enableAutoReminder); i++) {
                map.put("enableAutoReminder", enableAutoReminder);
            }
        }
        else {
          map.put("enableAutoReminder", JSON.serialize(enableAutoReminder));
        }
    }
    if (reminderDays != null) {
        if (isFileTypeOrListOfFiles(reminderDays)) {
            fileTypeFound = true;
        }

        if (reminderDays.getClass().equals(java.io.File.class) ||
            reminderDays.getClass().equals(Integer.class) ||
            reminderDays.getClass().equals(String.class) ||
            reminderDays.getClass().equals(java.net.URI.class)||
            reminderDays.getClass().isEnum()) {
            map.put("reminderDays", reminderDays);
        } else if (isListOfFile(reminderDays)) {
            for(int i = 0; i< getListSize(reminderDays); i++) {
                map.put("reminderDays", reminderDays);
            }
        }
        else {
          map.put("reminderDays", JSON.serialize(reminderDays));
        }
    }
    if (reminderCount != null) {
        if (isFileTypeOrListOfFiles(reminderCount)) {
            fileTypeFound = true;
        }

        if (reminderCount.getClass().equals(java.io.File.class) ||
            reminderCount.getClass().equals(Integer.class) ||
            reminderCount.getClass().equals(String.class) ||
            reminderCount.getClass().equals(java.net.URI.class)||
            reminderCount.getClass().isEnum()) {
            map.put("reminderCount", reminderCount);
        } else if (isListOfFile(reminderCount)) {
            for(int i = 0; i< getListSize(reminderCount); i++) {
                map.put("reminderCount", reminderCount);
            }
        }
        else {
          map.put("reminderCount", JSON.serialize(reminderCount));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiryDateType");
    openapiFields.add("expiryValue");
    openapiFields.add("enableDefaultExpiryAlert");
    openapiFields.add("enableAutoReminder");
    openapiFields.add("reminderDays");
    openapiFields.add("reminderCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentExpirySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentExpirySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentExpirySettings is not found in the empty JSON string", DocumentExpirySettings.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) && !jsonObj.get("expiryDateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDateType").toString()));
      }
      // validate the optional field `expiryDateType`
      if (jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) {
        ExpiryDateTypeEnum.validateJsonElement(jsonObj.get("expiryDateType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentExpirySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentExpirySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentExpirySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentExpirySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentExpirySettings>() {
           @Override
           public void write(JsonWriter out, DocumentExpirySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentExpirySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentExpirySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentExpirySettings
   * @throws IOException if the JSON string is invalid with respect to DocumentExpirySettings
   */
  public static DocumentExpirySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentExpirySettings.class);
  }

  /**
   * Convert an instance of DocumentExpirySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

