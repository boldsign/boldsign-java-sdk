/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * PageDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class PageDetails {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS_COUNT = "totalRecordsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS_COUNT)
  private Integer totalRecordsCount;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public static final String SERIALIZED_NAME_SORTED_COLUMN = "sortedColumn";
  @SerializedName(SERIALIZED_NAME_SORTED_COLUMN)
  private String sortedColumn;

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  private String sortDirection;

  public PageDetails() {
  }

  public PageDetails pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PageDetails page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public PageDetails totalRecordsCount(Integer totalRecordsCount) {
    this.totalRecordsCount = totalRecordsCount;
    return this;
  }

  /**
   * Get totalRecordsCount
   * @return totalRecordsCount
   */
  @javax.annotation.Nullable
  public Integer getTotalRecordsCount() {
    return totalRecordsCount;
  }

  public void setTotalRecordsCount(Integer totalRecordsCount) {
    this.totalRecordsCount = totalRecordsCount;
  }


  public PageDetails totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * Get totalPages
   * @return totalPages
   */
  @javax.annotation.Nullable
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }


  public PageDetails sortedColumn(String sortedColumn) {
    this.sortedColumn = sortedColumn;
    return this;
  }

  /**
   * Get sortedColumn
   * @return sortedColumn
   */
  @javax.annotation.Nullable
  public String getSortedColumn() {
    return sortedColumn;
  }

  public void setSortedColumn(String sortedColumn) {
    this.sortedColumn = sortedColumn;
  }


  public PageDetails sortDirection(String sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Get sortDirection
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public String getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(String sortDirection) {
    this.sortDirection = sortDirection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageDetails pageDetails = (PageDetails) o;
    return Objects.equals(this.pageSize, pageDetails.pageSize) &&
        Objects.equals(this.page, pageDetails.page) &&
        Objects.equals(this.totalRecordsCount, pageDetails.totalRecordsCount) &&
        Objects.equals(this.totalPages, pageDetails.totalPages) &&
        Objects.equals(this.sortedColumn, pageDetails.sortedColumn) &&
        Objects.equals(this.sortDirection, pageDetails.sortDirection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, page, totalRecordsCount, totalPages, sortedColumn, sortDirection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageDetails {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalRecordsCount: ").append(toIndentedString(totalRecordsCount)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    sortedColumn: ").append(toIndentedString(sortedColumn)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (pageSize != null) {
        if (isFileTypeOrListOfFiles(pageSize)) {
            fileTypeFound = true;
        }

        if (pageSize.getClass().equals(java.io.File.class) ||
            pageSize.getClass().equals(Integer.class) ||
            pageSize.getClass().equals(String.class) ||
            pageSize.getClass().equals(java.net.URI.class)||
            pageSize.getClass().isEnum()) {
            map.put("pageSize", pageSize);
        } else if (isListOfFile(pageSize)) {
            for(int i = 0; i< getListSize(pageSize); i++) {
                map.put("pageSize", pageSize);
            }
        }
        else {
          map.put("pageSize", JSON.serialize(pageSize));
        }
    }
    if (page != null) {
        if (isFileTypeOrListOfFiles(page)) {
            fileTypeFound = true;
        }

        if (page.getClass().equals(java.io.File.class) ||
            page.getClass().equals(Integer.class) ||
            page.getClass().equals(String.class) ||
            page.getClass().equals(java.net.URI.class)||
            page.getClass().isEnum()) {
            map.put("page", page);
        } else if (isListOfFile(page)) {
            for(int i = 0; i< getListSize(page); i++) {
                map.put("page", page);
            }
        }
        else {
          map.put("page", JSON.serialize(page));
        }
    }
    if (totalRecordsCount != null) {
        if (isFileTypeOrListOfFiles(totalRecordsCount)) {
            fileTypeFound = true;
        }

        if (totalRecordsCount.getClass().equals(java.io.File.class) ||
            totalRecordsCount.getClass().equals(Integer.class) ||
            totalRecordsCount.getClass().equals(String.class) ||
            totalRecordsCount.getClass().equals(java.net.URI.class)||
            totalRecordsCount.getClass().isEnum()) {
            map.put("totalRecordsCount", totalRecordsCount);
        } else if (isListOfFile(totalRecordsCount)) {
            for(int i = 0; i< getListSize(totalRecordsCount); i++) {
                map.put("totalRecordsCount", totalRecordsCount);
            }
        }
        else {
          map.put("totalRecordsCount", JSON.serialize(totalRecordsCount));
        }
    }
    if (totalPages != null) {
        if (isFileTypeOrListOfFiles(totalPages)) {
            fileTypeFound = true;
        }

        if (totalPages.getClass().equals(java.io.File.class) ||
            totalPages.getClass().equals(Integer.class) ||
            totalPages.getClass().equals(String.class) ||
            totalPages.getClass().equals(java.net.URI.class)||
            totalPages.getClass().isEnum()) {
            map.put("totalPages", totalPages);
        } else if (isListOfFile(totalPages)) {
            for(int i = 0; i< getListSize(totalPages); i++) {
                map.put("totalPages", totalPages);
            }
        }
        else {
          map.put("totalPages", JSON.serialize(totalPages));
        }
    }
    if (sortedColumn != null) {
        if (isFileTypeOrListOfFiles(sortedColumn)) {
            fileTypeFound = true;
        }

        if (sortedColumn.getClass().equals(java.io.File.class) ||
            sortedColumn.getClass().equals(Integer.class) ||
            sortedColumn.getClass().equals(String.class) ||
            sortedColumn.getClass().equals(java.net.URI.class)||
            sortedColumn.getClass().isEnum()) {
            map.put("sortedColumn", sortedColumn);
        } else if (isListOfFile(sortedColumn)) {
            for(int i = 0; i< getListSize(sortedColumn); i++) {
                map.put("sortedColumn", sortedColumn);
            }
        }
        else {
          map.put("sortedColumn", JSON.serialize(sortedColumn));
        }
    }
    if (sortDirection != null) {
        if (isFileTypeOrListOfFiles(sortDirection)) {
            fileTypeFound = true;
        }

        if (sortDirection.getClass().equals(java.io.File.class) ||
            sortDirection.getClass().equals(Integer.class) ||
            sortDirection.getClass().equals(String.class) ||
            sortDirection.getClass().equals(java.net.URI.class)||
            sortDirection.getClass().isEnum()) {
            map.put("sortDirection", sortDirection);
        } else if (isListOfFile(sortDirection)) {
            for(int i = 0; i< getListSize(sortDirection); i++) {
                map.put("sortDirection", sortDirection);
            }
        }
        else {
          map.put("sortDirection", JSON.serialize(sortDirection));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageSize");
    openapiFields.add("page");
    openapiFields.add("totalRecordsCount");
    openapiFields.add("totalPages");
    openapiFields.add("sortedColumn");
    openapiFields.add("sortDirection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageDetails is not found in the empty JSON string", PageDetails.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sortedColumn") != null && !jsonObj.get("sortedColumn").isJsonNull()) && !jsonObj.get("sortedColumn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortedColumn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortedColumn").toString()));
      }
      if ((jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) && !jsonObj.get("sortDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDirection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PageDetails>() {
           @Override
           public void write(JsonWriter out, PageDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageDetails
   * @throws IOException if the JSON string is invalid with respect to PageDetails
   */
  public static PageDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageDetails.class);
  }

  /**
   * Convert an instance of PageDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

