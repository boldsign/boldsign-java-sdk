/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * EmbeddedTemplateEditRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class EmbeddedTemplateEditRequest {
  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private URI redirectUrl;

  public static final String SERIALIZED_NAME_SHOW_TOOLBAR = "showToolbar";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOLBAR)
  private Boolean showToolbar = false;

  /**
   * Gets or Sets viewOption
   */
  @JsonAdapter(ViewOptionEnum.Adapter.class)
  public enum ViewOptionEnum {
    PREPARE_PAGE("PreparePage"),
    
    FILLING_PAGE("FillingPage");

    private String value;

    ViewOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewOptionEnum fromValue(String value) {
      for (ViewOptionEnum b : ViewOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_OPTION = "viewOption";
  @SerializedName(SERIALIZED_NAME_VIEW_OPTION)
  private ViewOptionEnum viewOption = ViewOptionEnum.PREPARE_PAGE;

  public static final String SERIALIZED_NAME_SHOW_SAVE_BUTTON = "showSaveButton";
  @SerializedName(SERIALIZED_NAME_SHOW_SAVE_BUTTON)
  private Boolean showSaveButton = true;

  /**
   * Gets or Sets locale
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("EN"),
    
    NO("NO"),
    
    FR("FR"),
    
    DE("DE"),
    
    ES("ES"),
    
    BG("BG"),
    
    CS("CS"),
    
    DA("DA"),
    
    IT("IT"),
    
    NL("NL"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    RU("RU"),
    
    SV("SV"),
    
    DEFAULT("Default");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale = LocaleEnum.EN;

  public static final String SERIALIZED_NAME_SHOW_CREATE_BUTTON = "showCreateButton";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATE_BUTTON)
  private Boolean showCreateButton = true;

  public static final String SERIALIZED_NAME_SHOW_PREVIEW_BUTTON = "showPreviewButton";
  @SerializedName(SERIALIZED_NAME_SHOW_PREVIEW_BUTTON)
  private Boolean showPreviewButton = true;

  public static final String SERIALIZED_NAME_SHOW_NAVIGATION_BUTTONS = "showNavigationButtons";
  @SerializedName(SERIALIZED_NAME_SHOW_NAVIGATION_BUTTONS)
  private Boolean showNavigationButtons = true;

  public static final String SERIALIZED_NAME_LINK_VALID_TILL = "linkValidTill";
  @SerializedName(SERIALIZED_NAME_LINK_VALID_TILL)
  private OffsetDateTime linkValidTill;

  public static final String SERIALIZED_NAME_SHOW_TOOLTIP = "showTooltip";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOLTIP)
  private Boolean showTooltip = false;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private String onBehalfOf;

  public EmbeddedTemplateEditRequest() {
  }

  public EmbeddedTemplateEditRequest redirectUrl(URI redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public URI getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(URI redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public EmbeddedTemplateEditRequest showToolbar(Boolean showToolbar) {
    this.showToolbar = showToolbar;
    return this;
  }

  /**
   * Get showToolbar
   * @return showToolbar
   */
  @javax.annotation.Nullable
  public Boolean getShowToolbar() {
    return showToolbar;
  }

  public void setShowToolbar(Boolean showToolbar) {
    this.showToolbar = showToolbar;
  }


  public EmbeddedTemplateEditRequest viewOption(ViewOptionEnum viewOption) {
    this.viewOption = viewOption;
    return this;
  }

  /**
   * Get viewOption
   * @return viewOption
   */
  @javax.annotation.Nullable
  public ViewOptionEnum getViewOption() {
    return viewOption;
  }

  public void setViewOption(ViewOptionEnum viewOption) {
    this.viewOption = viewOption;
  }


  public EmbeddedTemplateEditRequest showSaveButton(Boolean showSaveButton) {
    this.showSaveButton = showSaveButton;
    return this;
  }

  /**
   * Get showSaveButton
   * @return showSaveButton
   */
  @javax.annotation.Nullable
  public Boolean getShowSaveButton() {
    return showSaveButton;
  }

  public void setShowSaveButton(Boolean showSaveButton) {
    this.showSaveButton = showSaveButton;
  }


  public EmbeddedTemplateEditRequest locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public EmbeddedTemplateEditRequest showCreateButton(Boolean showCreateButton) {
    this.showCreateButton = showCreateButton;
    return this;
  }

  /**
   * Get showCreateButton
   * @return showCreateButton
   */
  @javax.annotation.Nullable
  public Boolean getShowCreateButton() {
    return showCreateButton;
  }

  public void setShowCreateButton(Boolean showCreateButton) {
    this.showCreateButton = showCreateButton;
  }


  public EmbeddedTemplateEditRequest showPreviewButton(Boolean showPreviewButton) {
    this.showPreviewButton = showPreviewButton;
    return this;
  }

  /**
   * Get showPreviewButton
   * @return showPreviewButton
   */
  @javax.annotation.Nullable
  public Boolean getShowPreviewButton() {
    return showPreviewButton;
  }

  public void setShowPreviewButton(Boolean showPreviewButton) {
    this.showPreviewButton = showPreviewButton;
  }


  public EmbeddedTemplateEditRequest showNavigationButtons(Boolean showNavigationButtons) {
    this.showNavigationButtons = showNavigationButtons;
    return this;
  }

  /**
   * Get showNavigationButtons
   * @return showNavigationButtons
   */
  @javax.annotation.Nullable
  public Boolean getShowNavigationButtons() {
    return showNavigationButtons;
  }

  public void setShowNavigationButtons(Boolean showNavigationButtons) {
    this.showNavigationButtons = showNavigationButtons;
  }


  public EmbeddedTemplateEditRequest linkValidTill(OffsetDateTime linkValidTill) {
    this.linkValidTill = linkValidTill;
    return this;
  }

  /**
   * Get linkValidTill
   * @return linkValidTill
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLinkValidTill() {
    return linkValidTill;
  }

  public void setLinkValidTill(OffsetDateTime linkValidTill) {
    this.linkValidTill = linkValidTill;
  }


  public EmbeddedTemplateEditRequest showTooltip(Boolean showTooltip) {
    this.showTooltip = showTooltip;
    return this;
  }

  /**
   * Get showTooltip
   * @return showTooltip
   */
  @javax.annotation.Nullable
  public Boolean getShowTooltip() {
    return showTooltip;
  }

  public void setShowTooltip(Boolean showTooltip) {
    this.showTooltip = showTooltip;
  }


  public EmbeddedTemplateEditRequest onBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public String getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedTemplateEditRequest embeddedTemplateEditRequest = (EmbeddedTemplateEditRequest) o;
    return Objects.equals(this.redirectUrl, embeddedTemplateEditRequest.redirectUrl) &&
        Objects.equals(this.showToolbar, embeddedTemplateEditRequest.showToolbar) &&
        Objects.equals(this.viewOption, embeddedTemplateEditRequest.viewOption) &&
        Objects.equals(this.showSaveButton, embeddedTemplateEditRequest.showSaveButton) &&
        Objects.equals(this.locale, embeddedTemplateEditRequest.locale) &&
        Objects.equals(this.showCreateButton, embeddedTemplateEditRequest.showCreateButton) &&
        Objects.equals(this.showPreviewButton, embeddedTemplateEditRequest.showPreviewButton) &&
        Objects.equals(this.showNavigationButtons, embeddedTemplateEditRequest.showNavigationButtons) &&
        Objects.equals(this.linkValidTill, embeddedTemplateEditRequest.linkValidTill) &&
        Objects.equals(this.showTooltip, embeddedTemplateEditRequest.showTooltip) &&
        Objects.equals(this.onBehalfOf, embeddedTemplateEditRequest.onBehalfOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(redirectUrl, showToolbar, viewOption, showSaveButton, locale, showCreateButton, showPreviewButton, showNavigationButtons, linkValidTill, showTooltip, onBehalfOf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedTemplateEditRequest {\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    showToolbar: ").append(toIndentedString(showToolbar)).append("\n");
    sb.append("    viewOption: ").append(toIndentedString(viewOption)).append("\n");
    sb.append("    showSaveButton: ").append(toIndentedString(showSaveButton)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    showCreateButton: ").append(toIndentedString(showCreateButton)).append("\n");
    sb.append("    showPreviewButton: ").append(toIndentedString(showPreviewButton)).append("\n");
    sb.append("    showNavigationButtons: ").append(toIndentedString(showNavigationButtons)).append("\n");
    sb.append("    linkValidTill: ").append(toIndentedString(linkValidTill)).append("\n");
    sb.append("    showTooltip: ").append(toIndentedString(showTooltip)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (redirectUrl != null) {
        if (isFileTypeOrListOfFiles(redirectUrl)) {
            fileTypeFound = true;
        }

        if (redirectUrl.getClass().equals(java.io.File.class) ||
            redirectUrl.getClass().equals(Integer.class) ||
            redirectUrl.getClass().equals(String.class) ||
            redirectUrl.getClass().isEnum()) {
            map.put("redirectUrl", redirectUrl);
        } else if (isListOfFile(redirectUrl)) {
            for(int i = 0; i< getListSize(redirectUrl); i++) {
                map.put("redirectUrl", redirectUrl);
            }
        }
        else {
          map.put("redirectUrl", redirectUrl);
        }
    }
    if (showToolbar != null) {
        if (isFileTypeOrListOfFiles(showToolbar)) {
            fileTypeFound = true;
        }

        if (showToolbar.getClass().equals(java.io.File.class) ||
            showToolbar.getClass().equals(Integer.class) ||
            showToolbar.getClass().equals(String.class) ||
            showToolbar.getClass().isEnum()) {
            map.put("showToolbar", showToolbar);
        } else if (isListOfFile(showToolbar)) {
            for(int i = 0; i< getListSize(showToolbar); i++) {
                map.put("showToolbar", showToolbar);
            }
        }
        else {
          map.put("showToolbar", showToolbar);
        }
    }
    if (viewOption != null) {
        if (isFileTypeOrListOfFiles(viewOption)) {
            fileTypeFound = true;
        }

        if (viewOption.getClass().equals(java.io.File.class) ||
            viewOption.getClass().equals(Integer.class) ||
            viewOption.getClass().equals(String.class) ||
            viewOption.getClass().isEnum()) {
            map.put("viewOption", viewOption);
        } else if (isListOfFile(viewOption)) {
            for(int i = 0; i< getListSize(viewOption); i++) {
                map.put("viewOption", viewOption);
            }
        }
        else {
          map.put("viewOption", viewOption);
        }
    }
    if (showSaveButton != null) {
        if (isFileTypeOrListOfFiles(showSaveButton)) {
            fileTypeFound = true;
        }

        if (showSaveButton.getClass().equals(java.io.File.class) ||
            showSaveButton.getClass().equals(Integer.class) ||
            showSaveButton.getClass().equals(String.class) ||
            showSaveButton.getClass().isEnum()) {
            map.put("showSaveButton", showSaveButton);
        } else if (isListOfFile(showSaveButton)) {
            for(int i = 0; i< getListSize(showSaveButton); i++) {
                map.put("showSaveButton", showSaveButton);
            }
        }
        else {
          map.put("showSaveButton", showSaveButton);
        }
    }
    if (locale != null) {
        if (isFileTypeOrListOfFiles(locale)) {
            fileTypeFound = true;
        }

        if (locale.getClass().equals(java.io.File.class) ||
            locale.getClass().equals(Integer.class) ||
            locale.getClass().equals(String.class) ||
            locale.getClass().isEnum()) {
            map.put("locale", locale);
        } else if (isListOfFile(locale)) {
            for(int i = 0; i< getListSize(locale); i++) {
                map.put("locale", locale);
            }
        }
        else {
          map.put("locale", locale);
        }
    }
    if (showCreateButton != null) {
        if (isFileTypeOrListOfFiles(showCreateButton)) {
            fileTypeFound = true;
        }

        if (showCreateButton.getClass().equals(java.io.File.class) ||
            showCreateButton.getClass().equals(Integer.class) ||
            showCreateButton.getClass().equals(String.class) ||
            showCreateButton.getClass().isEnum()) {
            map.put("showCreateButton", showCreateButton);
        } else if (isListOfFile(showCreateButton)) {
            for(int i = 0; i< getListSize(showCreateButton); i++) {
                map.put("showCreateButton", showCreateButton);
            }
        }
        else {
          map.put("showCreateButton", showCreateButton);
        }
    }
    if (showPreviewButton != null) {
        if (isFileTypeOrListOfFiles(showPreviewButton)) {
            fileTypeFound = true;
        }

        if (showPreviewButton.getClass().equals(java.io.File.class) ||
            showPreviewButton.getClass().equals(Integer.class) ||
            showPreviewButton.getClass().equals(String.class) ||
            showPreviewButton.getClass().isEnum()) {
            map.put("showPreviewButton", showPreviewButton);
        } else if (isListOfFile(showPreviewButton)) {
            for(int i = 0; i< getListSize(showPreviewButton); i++) {
                map.put("showPreviewButton", showPreviewButton);
            }
        }
        else {
          map.put("showPreviewButton", showPreviewButton);
        }
    }
    if (showNavigationButtons != null) {
        if (isFileTypeOrListOfFiles(showNavigationButtons)) {
            fileTypeFound = true;
        }

        if (showNavigationButtons.getClass().equals(java.io.File.class) ||
            showNavigationButtons.getClass().equals(Integer.class) ||
            showNavigationButtons.getClass().equals(String.class) ||
            showNavigationButtons.getClass().isEnum()) {
            map.put("showNavigationButtons", showNavigationButtons);
        } else if (isListOfFile(showNavigationButtons)) {
            for(int i = 0; i< getListSize(showNavigationButtons); i++) {
                map.put("showNavigationButtons", showNavigationButtons);
            }
        }
        else {
          map.put("showNavigationButtons", showNavigationButtons);
        }
    }
    if (linkValidTill != null) {
        if (isFileTypeOrListOfFiles(linkValidTill)) {
            fileTypeFound = true;
        }

        if (linkValidTill.getClass().equals(java.io.File.class) ||
            linkValidTill.getClass().equals(Integer.class) ||
            linkValidTill.getClass().equals(String.class) ||
            linkValidTill.getClass().isEnum()) {
            map.put("linkValidTill", linkValidTill);
        } else if (isListOfFile(linkValidTill)) {
            for(int i = 0; i< getListSize(linkValidTill); i++) {
                map.put("linkValidTill", linkValidTill);
            }
        }
        else {
          map.put("linkValidTill", linkValidTill);
        }
    }
    if (showTooltip != null) {
        if (isFileTypeOrListOfFiles(showTooltip)) {
            fileTypeFound = true;
        }

        if (showTooltip.getClass().equals(java.io.File.class) ||
            showTooltip.getClass().equals(Integer.class) ||
            showTooltip.getClass().equals(String.class) ||
            showTooltip.getClass().isEnum()) {
            map.put("showTooltip", showTooltip);
        } else if (isListOfFile(showTooltip)) {
            for(int i = 0; i< getListSize(showTooltip); i++) {
                map.put("showTooltip", showTooltip);
            }
        }
        else {
          map.put("showTooltip", showTooltip);
        }
    }
    if (onBehalfOf != null) {
        if (isFileTypeOrListOfFiles(onBehalfOf)) {
            fileTypeFound = true;
        }

        if (onBehalfOf.getClass().equals(java.io.File.class) ||
            onBehalfOf.getClass().equals(Integer.class) ||
            onBehalfOf.getClass().equals(String.class) ||
            onBehalfOf.getClass().isEnum()) {
            map.put("onBehalfOf", onBehalfOf);
        } else if (isListOfFile(onBehalfOf)) {
            for(int i = 0; i< getListSize(onBehalfOf); i++) {
                map.put("onBehalfOf", onBehalfOf);
            }
        }
        else {
          map.put("onBehalfOf", onBehalfOf);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("redirectUrl");
    openapiFields.add("showToolbar");
    openapiFields.add("viewOption");
    openapiFields.add("showSaveButton");
    openapiFields.add("locale");
    openapiFields.add("showCreateButton");
    openapiFields.add("showPreviewButton");
    openapiFields.add("showNavigationButtons");
    openapiFields.add("linkValidTill");
    openapiFields.add("showTooltip");
    openapiFields.add("onBehalfOf");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbeddedTemplateEditRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbeddedTemplateEditRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbeddedTemplateEditRequest is not found in the empty JSON string", EmbeddedTemplateEditRequest.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("viewOption") != null && !jsonObj.get("viewOption").isJsonNull()) && !jsonObj.get("viewOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewOption").toString()));
      }
      // validate the optional field `viewOption`
      if (jsonObj.get("viewOption") != null && !jsonObj.get("viewOption").isJsonNull()) {
        ViewOptionEnum.validateJsonElement(jsonObj.get("viewOption"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      if ((jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) && !jsonObj.get("onBehalfOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onBehalfOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onBehalfOf").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbeddedTemplateEditRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbeddedTemplateEditRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbeddedTemplateEditRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedTemplateEditRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbeddedTemplateEditRequest>() {
           @Override
           public void write(JsonWriter out, EmbeddedTemplateEditRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbeddedTemplateEditRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbeddedTemplateEditRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbeddedTemplateEditRequest
   * @throws IOException if the JSON string is invalid with respect to EmbeddedTemplateEditRequest
   */
  public static EmbeddedTemplateEditRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbeddedTemplateEditRequest.class);
  }

  /**
   * Convert an instance of EmbeddedTemplateEditRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

