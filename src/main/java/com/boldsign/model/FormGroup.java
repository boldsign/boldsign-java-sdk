/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * FormGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class FormGroup {
  public static final String SERIALIZED_NAME_GROUP_NAMES = "groupNames";
  @SerializedName(SERIALIZED_NAME_GROUP_NAMES)
  private List<String> groupNames = new ArrayList<>();

  /**
   * Gets or Sets groupValidation
   */
  @JsonAdapter(GroupValidationEnum.Adapter.class)
  public enum GroupValidationEnum {
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    ABSOLUTE("Absolute"),
    
    RANGE("Range");

    private String value;

    GroupValidationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupValidationEnum fromValue(String value) {
      for (GroupValidationEnum b : GroupValidationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupValidationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupValidationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupValidationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupValidationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupValidationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_VALIDATION = "groupValidation";
  @SerializedName(SERIALIZED_NAME_GROUP_VALIDATION)
  private GroupValidationEnum groupValidation;

  public static final String SERIALIZED_NAME_MINIMUM_COUNT = "minimumCount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_COUNT)
  private Integer minimumCount;

  public static final String SERIALIZED_NAME_MAXIMUM_COUNT = "maximumCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_COUNT)
  private Integer maximumCount;

  public static final String SERIALIZED_NAME_DATA_SYNC_TAG = "dataSyncTag";
  @SerializedName(SERIALIZED_NAME_DATA_SYNC_TAG)
  private String dataSyncTag;

  public FormGroup() {
  }

  public FormGroup groupNames(List<String> groupNames) {
    this.groupNames = groupNames;
    return this;
  }

  public FormGroup addGroupNamesItem(String groupNamesItem) {
    if (this.groupNames == null) {
      this.groupNames = new ArrayList<>();
    }
    this.groupNames.add(groupNamesItem);
    return this;
  }

  /**
   * Get groupNames
   * @return groupNames
   */
  @javax.annotation.Nonnull
  public List<String> getGroupNames() {
    return groupNames;
  }

  public void setGroupNames(List<String> groupNames) {
    this.groupNames = groupNames;
  }


  public FormGroup groupValidation(GroupValidationEnum groupValidation) {
    this.groupValidation = groupValidation;
    return this;
  }

  /**
   * Get groupValidation
   * @return groupValidation
   */
  @javax.annotation.Nonnull
  public GroupValidationEnum getGroupValidation() {
    return groupValidation;
  }

  public void setGroupValidation(GroupValidationEnum groupValidation) {
    this.groupValidation = groupValidation;
  }


  public FormGroup minimumCount(Integer minimumCount) {
    this.minimumCount = minimumCount;
    return this;
  }

  /**
   * Get minimumCount
   * minimum: 0
   * maximum: 2147483647
   * @return minimumCount
   */
  @javax.annotation.Nullable
  public Integer getMinimumCount() {
    return minimumCount;
  }

  public void setMinimumCount(Integer minimumCount) {
    this.minimumCount = minimumCount;
  }


  public FormGroup maximumCount(Integer maximumCount) {
    this.maximumCount = maximumCount;
    return this;
  }

  /**
   * Get maximumCount
   * minimum: 0
   * maximum: 2147483647
   * @return maximumCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumCount() {
    return maximumCount;
  }

  public void setMaximumCount(Integer maximumCount) {
    this.maximumCount = maximumCount;
  }


  public FormGroup dataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
    return this;
  }

  /**
   * Get dataSyncTag
   * @return dataSyncTag
   */
  @javax.annotation.Nullable
  public String getDataSyncTag() {
    return dataSyncTag;
  }

  public void setDataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormGroup formGroup = (FormGroup) o;
    return Objects.equals(this.groupNames, formGroup.groupNames) &&
        Objects.equals(this.groupValidation, formGroup.groupValidation) &&
        Objects.equals(this.minimumCount, formGroup.minimumCount) &&
        Objects.equals(this.maximumCount, formGroup.maximumCount) &&
        Objects.equals(this.dataSyncTag, formGroup.dataSyncTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupNames, groupValidation, minimumCount, maximumCount, dataSyncTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormGroup {\n");
    sb.append("    groupNames: ").append(toIndentedString(groupNames)).append("\n");
    sb.append("    groupValidation: ").append(toIndentedString(groupValidation)).append("\n");
    sb.append("    minimumCount: ").append(toIndentedString(minimumCount)).append("\n");
    sb.append("    maximumCount: ").append(toIndentedString(maximumCount)).append("\n");
    sb.append("    dataSyncTag: ").append(toIndentedString(dataSyncTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (groupNames != null) {
        if (isFileTypeOrListOfFiles(groupNames)) {
            fileTypeFound = true;
        }

        if (groupNames.getClass().equals(java.io.File.class) ||
            groupNames.getClass().equals(Integer.class) ||
            groupNames.getClass().equals(String.class) ||
            groupNames.getClass().isEnum()) {
            map.put("groupNames", groupNames);
        } else if (isListOfFile(groupNames)) {
            for(int i = 0; i< getListSize(groupNames); i++) {
                map.put("groupNames", groupNames);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : groupNames) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("groupNames", objectList);
        }
    }
    if (groupValidation != null) {
        if (isFileTypeOrListOfFiles(groupValidation)) {
            fileTypeFound = true;
        }

        if (groupValidation.getClass().equals(java.io.File.class) ||
            groupValidation.getClass().equals(Integer.class) ||
            groupValidation.getClass().equals(String.class) ||
            groupValidation.getClass().isEnum()) {
            map.put("groupValidation", groupValidation);
        } else if (isListOfFile(groupValidation)) {
            for(int i = 0; i< getListSize(groupValidation); i++) {
                map.put("groupValidation", groupValidation);
            }
        }
        else {
          map.put("groupValidation", groupValidation);
        }
    }
    if (minimumCount != null) {
        if (isFileTypeOrListOfFiles(minimumCount)) {
            fileTypeFound = true;
        }

        if (minimumCount.getClass().equals(java.io.File.class) ||
            minimumCount.getClass().equals(Integer.class) ||
            minimumCount.getClass().equals(String.class) ||
            minimumCount.getClass().isEnum()) {
            map.put("minimumCount", minimumCount);
        } else if (isListOfFile(minimumCount)) {
            for(int i = 0; i< getListSize(minimumCount); i++) {
                map.put("minimumCount", minimumCount);
            }
        }
        else {
          map.put("minimumCount", minimumCount);
        }
    }
    if (maximumCount != null) {
        if (isFileTypeOrListOfFiles(maximumCount)) {
            fileTypeFound = true;
        }

        if (maximumCount.getClass().equals(java.io.File.class) ||
            maximumCount.getClass().equals(Integer.class) ||
            maximumCount.getClass().equals(String.class) ||
            maximumCount.getClass().isEnum()) {
            map.put("maximumCount", maximumCount);
        } else if (isListOfFile(maximumCount)) {
            for(int i = 0; i< getListSize(maximumCount); i++) {
                map.put("maximumCount", maximumCount);
            }
        }
        else {
          map.put("maximumCount", maximumCount);
        }
    }
    if (dataSyncTag != null) {
        if (isFileTypeOrListOfFiles(dataSyncTag)) {
            fileTypeFound = true;
        }

        if (dataSyncTag.getClass().equals(java.io.File.class) ||
            dataSyncTag.getClass().equals(Integer.class) ||
            dataSyncTag.getClass().equals(String.class) ||
            dataSyncTag.getClass().isEnum()) {
            map.put("dataSyncTag", dataSyncTag);
        } else if (isListOfFile(dataSyncTag)) {
            for(int i = 0; i< getListSize(dataSyncTag); i++) {
                map.put("dataSyncTag", dataSyncTag);
            }
        }
        else {
          map.put("dataSyncTag", dataSyncTag);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    if(!fileTypeFound) {
        Field[] fields = FormGroup.class.getDeclaredFields();
        for (Field field : fields) {
            if ("files".equals(field.getName())) {
                fileTypeFound = true;
                break;
            }
        }
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupNames");
    openapiFields.add("groupValidation");
    openapiFields.add("minimumCount");
    openapiFields.add("maximumCount");
    openapiFields.add("dataSyncTag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groupNames");
    openapiRequiredFields.add("groupValidation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormGroup is not found in the empty JSON string", FormGroup.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FormGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("groupNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("groupNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupNames` to be an array in the JSON string but got `%s`", jsonObj.get("groupNames").toString()));
      }
      if (!jsonObj.get("groupValidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupValidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupValidation").toString()));
      }
      // validate the required field `groupValidation`
      GroupValidationEnum.validateJsonElement(jsonObj.get("groupValidation"));
      if ((jsonObj.get("dataSyncTag") != null && !jsonObj.get("dataSyncTag").isJsonNull()) && !jsonObj.get("dataSyncTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSyncTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSyncTag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<FormGroup>() {
           @Override
           public void write(JsonWriter out, FormGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormGroup
   * @throws IOException if the JSON string is invalid with respect to FormGroup
   */
  public static FormGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormGroup.class);
  }

  /**
   * Convert an instance of FormGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

