/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.NotificationSettings;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * SenderIdentityViewModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class SenderIdentityViewModel {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_APPROVED_DATE = "approvedDate";
  @SerializedName(SERIALIZED_NAME_APPROVED_DATE)
  private String approvedDate;

  public static final String SERIALIZED_NAME_NOTIFICATION_SETTINGS = "notificationSettings";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SETTINGS)
  private NotificationSettings notificationSettings;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public SenderIdentityViewModel() {
  }

  public SenderIdentityViewModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SenderIdentityViewModel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SenderIdentityViewModel status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SenderIdentityViewModel createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public SenderIdentityViewModel approvedDate(String approvedDate) {
    this.approvedDate = approvedDate;
    return this;
  }

  /**
   * Get approvedDate
   * @return approvedDate
   */
  @javax.annotation.Nullable
  public String getApprovedDate() {
    return approvedDate;
  }

  public void setApprovedDate(String approvedDate) {
    this.approvedDate = approvedDate;
  }


  public SenderIdentityViewModel notificationSettings(NotificationSettings notificationSettings) {
    this.notificationSettings = notificationSettings;
    return this;
  }

  /**
   * Get notificationSettings
   * @return notificationSettings
   */
  @javax.annotation.Nullable
  public NotificationSettings getNotificationSettings() {
    return notificationSettings;
  }

  public void setNotificationSettings(NotificationSettings notificationSettings) {
    this.notificationSettings = notificationSettings;
  }


  public SenderIdentityViewModel brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public SenderIdentityViewModel redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SenderIdentityViewModel senderIdentityViewModel = (SenderIdentityViewModel) o;
    return Objects.equals(this.name, senderIdentityViewModel.name) &&
        Objects.equals(this.email, senderIdentityViewModel.email) &&
        Objects.equals(this.status, senderIdentityViewModel.status) &&
        Objects.equals(this.createdBy, senderIdentityViewModel.createdBy) &&
        Objects.equals(this.approvedDate, senderIdentityViewModel.approvedDate) &&
        Objects.equals(this.notificationSettings, senderIdentityViewModel.notificationSettings) &&
        Objects.equals(this.brandId, senderIdentityViewModel.brandId) &&
        Objects.equals(this.redirectUrl, senderIdentityViewModel.redirectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, email, status, createdBy, approvedDate, notificationSettings, brandId, redirectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SenderIdentityViewModel {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    approvedDate: ").append(toIndentedString(approvedDate)).append("\n");
    sb.append("    notificationSettings: ").append(toIndentedString(notificationSettings)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (name != null) {
        if (isFileTypeOrListOfFiles(name)) {
            fileTypeFound = true;
        }

        if (name.getClass().equals(java.io.File.class) ||
            name.getClass().equals(Integer.class) ||
            name.getClass().equals(String.class) ||
            name.getClass().isEnum()) {
            map.put("name", name);
        } else if (isListOfFile(name)) {
            for(int i = 0; i< getListSize(name); i++) {
                map.put("name", name);
            }
        }
        else {
          map.put("name", name);
        }
    }
    if (email != null) {
        if (isFileTypeOrListOfFiles(email)) {
            fileTypeFound = true;
        }

        if (email.getClass().equals(java.io.File.class) ||
            email.getClass().equals(Integer.class) ||
            email.getClass().equals(String.class) ||
            email.getClass().isEnum()) {
            map.put("email", email);
        } else if (isListOfFile(email)) {
            for(int i = 0; i< getListSize(email); i++) {
                map.put("email", email);
            }
        }
        else {
          map.put("email", email);
        }
    }
    if (status != null) {
        if (isFileTypeOrListOfFiles(status)) {
            fileTypeFound = true;
        }

        if (status.getClass().equals(java.io.File.class) ||
            status.getClass().equals(Integer.class) ||
            status.getClass().equals(String.class) ||
            status.getClass().isEnum()) {
            map.put("status", status);
        } else if (isListOfFile(status)) {
            for(int i = 0; i< getListSize(status); i++) {
                map.put("status", status);
            }
        }
        else {
          map.put("status", status);
        }
    }
    if (createdBy != null) {
        if (isFileTypeOrListOfFiles(createdBy)) {
            fileTypeFound = true;
        }

        if (createdBy.getClass().equals(java.io.File.class) ||
            createdBy.getClass().equals(Integer.class) ||
            createdBy.getClass().equals(String.class) ||
            createdBy.getClass().isEnum()) {
            map.put("createdBy", createdBy);
        } else if (isListOfFile(createdBy)) {
            for(int i = 0; i< getListSize(createdBy); i++) {
                map.put("createdBy", createdBy);
            }
        }
        else {
          map.put("createdBy", createdBy);
        }
    }
    if (approvedDate != null) {
        if (isFileTypeOrListOfFiles(approvedDate)) {
            fileTypeFound = true;
        }

        if (approvedDate.getClass().equals(java.io.File.class) ||
            approvedDate.getClass().equals(Integer.class) ||
            approvedDate.getClass().equals(String.class) ||
            approvedDate.getClass().isEnum()) {
            map.put("approvedDate", approvedDate);
        } else if (isListOfFile(approvedDate)) {
            for(int i = 0; i< getListSize(approvedDate); i++) {
                map.put("approvedDate", approvedDate);
            }
        }
        else {
          map.put("approvedDate", approvedDate);
        }
    }
    if (notificationSettings != null) {
        if (isFileTypeOrListOfFiles(notificationSettings)) {
            fileTypeFound = true;
        }

        if (notificationSettings.getClass().equals(java.io.File.class) ||
            notificationSettings.getClass().equals(Integer.class) ||
            notificationSettings.getClass().equals(String.class) ||
            notificationSettings.getClass().isEnum()) {
            map.put("notificationSettings", notificationSettings);
        } else if (isListOfFile(notificationSettings)) {
            for(int i = 0; i< getListSize(notificationSettings); i++) {
                map.put("notificationSettings", notificationSettings);
            }
        }
        else {
          map.put("notificationSettings", notificationSettings);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    if (redirectUrl != null) {
        if (isFileTypeOrListOfFiles(redirectUrl)) {
            fileTypeFound = true;
        }

        if (redirectUrl.getClass().equals(java.io.File.class) ||
            redirectUrl.getClass().equals(Integer.class) ||
            redirectUrl.getClass().equals(String.class) ||
            redirectUrl.getClass().isEnum()) {
            map.put("redirectUrl", redirectUrl);
        } else if (isListOfFile(redirectUrl)) {
            for(int i = 0; i< getListSize(redirectUrl); i++) {
                map.put("redirectUrl", redirectUrl);
            }
        }
        else {
          map.put("redirectUrl", redirectUrl);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    if(!fileTypeFound) {
        Field[] fields = SenderIdentityViewModel.class.getDeclaredFields();
        for (Field field : fields) {
            if ("files".equals(field.getName())) {
                fileTypeFound = true;
                break;
            }
        }
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("status");
    openapiFields.add("createdBy");
    openapiFields.add("approvedDate");
    openapiFields.add("notificationSettings");
    openapiFields.add("brandId");
    openapiFields.add("redirectUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SenderIdentityViewModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SenderIdentityViewModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SenderIdentityViewModel is not found in the empty JSON string", SenderIdentityViewModel.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("approvedDate") != null && !jsonObj.get("approvedDate").isJsonNull()) && !jsonObj.get("approvedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvedDate").toString()));
      }
      // validate the optional field `notificationSettings`
      if (jsonObj.get("notificationSettings") != null && !jsonObj.get("notificationSettings").isJsonNull()) {
        NotificationSettings.validateJsonElement(jsonObj.get("notificationSettings"));
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SenderIdentityViewModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SenderIdentityViewModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SenderIdentityViewModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SenderIdentityViewModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SenderIdentityViewModel>() {
           @Override
           public void write(JsonWriter out, SenderIdentityViewModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SenderIdentityViewModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SenderIdentityViewModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SenderIdentityViewModel
   * @throws IOException if the JSON string is invalid with respect to SenderIdentityViewModel
   */
  public static SenderIdentityViewModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SenderIdentityViewModel.class);
  }

  /**
   * Convert an instance of SenderIdentityViewModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

