/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.PhoneNumber;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * TemplateSignerDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TemplateSignerDetails {
  public static final String SERIALIZED_NAME_SIGNER_NAME = "signerName";
  @SerializedName(SERIALIZED_NAME_SIGNER_NAME)
  private String signerName;

  public static final String SERIALIZED_NAME_SIGNER_ROLE = "signerRole";
  @SerializedName(SERIALIZED_NAME_SIGNER_ROLE)
  private String signerRole;

  public static final String SERIALIZED_NAME_SIGNER_EMAIL = "signerEmail";
  @SerializedName(SERIALIZED_NAME_SIGNER_EMAIL)
  private String signerEmail;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumber phoneNumber;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("None"),
    
    NOT_COMPLETED("NotCompleted"),
    
    COMPLETED("Completed"),
    
    DECLINED("Declined"),
    
    REVOKED("Revoked"),
    
    EXPIRED("Expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ENABLE_ACCESS_CODE = "enableAccessCode";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCESS_CODE)
  private Boolean enableAccessCode;

  public static final String SERIALIZED_NAME_ENABLE_EMAIL_O_T_P = "enableEmailOTP";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMAIL_O_T_P)
  private Boolean enableEmailOTP;

  /**
   * Gets or Sets imposeAuthentication
   */
  @JsonAdapter(ImposeAuthenticationEnum.Adapter.class)
  public enum ImposeAuthenticationEnum {
    NONE("None"),
    
    EMAIL_OTP("EmailOTP"),
    
    ACCESS_CODE("AccessCode"),
    
    SMSOTP("SMSOTP"),
    
    ID_VERIFICATION("IdVerification");

    private String value;

    ImposeAuthenticationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImposeAuthenticationEnum fromValue(String value) {
      for (ImposeAuthenticationEnum b : ImposeAuthenticationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImposeAuthenticationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImposeAuthenticationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImposeAuthenticationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImposeAuthenticationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImposeAuthenticationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPOSE_AUTHENTICATION = "imposeAuthentication";
  @SerializedName(SERIALIZED_NAME_IMPOSE_AUTHENTICATION)
  private ImposeAuthenticationEnum imposeAuthentication;

  /**
   * Gets or Sets deliveryMode
   */
  @JsonAdapter(DeliveryModeEnum.Adapter.class)
  public enum DeliveryModeEnum {
    EMAIL("Email"),
    
    SMS("SMS"),
    
    EMAIL_AND_SMS("EmailAndSMS"),
    
    WHATS_APP("WhatsApp");

    private String value;

    DeliveryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryModeEnum fromValue(String value) {
      for (DeliveryModeEnum b : DeliveryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_MODE = "deliveryMode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_MODE)
  private DeliveryModeEnum deliveryMode;

  public static final String SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION = "allowFieldConfiguration";
  @SerializedName(SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION)
  private Boolean allowFieldConfiguration = false;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  /**
   * Gets or Sets signerType
   */
  @JsonAdapter(SignerTypeEnum.Adapter.class)
  public enum SignerTypeEnum {
    SIGNER("Signer"),
    
    REVIEWER("Reviewer"),
    
    IN_PERSON_SIGNER("InPersonSigner");

    private String value;

    SignerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignerTypeEnum fromValue(String value) {
      for (SignerTypeEnum b : SignerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNER_TYPE = "signerType";
  @SerializedName(SERIALIZED_NAME_SIGNER_TYPE)
  private SignerTypeEnum signerType = SignerTypeEnum.SIGNER;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_HOST_USER_ID = "hostUserId";
  @SerializedName(SERIALIZED_NAME_HOST_USER_ID)
  private String hostUserId;

  /**
   * Gets or Sets signType
   */
  @JsonAdapter(SignTypeEnum.Adapter.class)
  public enum SignTypeEnum {
    SINGLE("Single"),
    
    GROUP("Group");

    private String value;

    SignTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignTypeEnum fromValue(String value) {
      for (SignTypeEnum b : SignTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGN_TYPE = "signType";
  @SerializedName(SERIALIZED_NAME_SIGN_TYPE)
  private SignTypeEnum signType;

  public TemplateSignerDetails() {
  }

  public TemplateSignerDetails signerName(String signerName) {
    this.signerName = signerName;
    return this;
  }

  /**
   * Get signerName
   * @return signerName
   */
  @javax.annotation.Nullable
  public String getSignerName() {
    return signerName;
  }

  public void setSignerName(String signerName) {
    this.signerName = signerName;
  }


  public TemplateSignerDetails signerRole(String signerRole) {
    this.signerRole = signerRole;
    return this;
  }

  /**
   * Get signerRole
   * @return signerRole
   */
  @javax.annotation.Nullable
  public String getSignerRole() {
    return signerRole;
  }

  public void setSignerRole(String signerRole) {
    this.signerRole = signerRole;
  }


  public TemplateSignerDetails signerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
    return this;
  }

  /**
   * Get signerEmail
   * @return signerEmail
   */
  @javax.annotation.Nullable
  public String getSignerEmail() {
    return signerEmail;
  }

  public void setSignerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
  }


  public TemplateSignerDetails phoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public TemplateSignerDetails status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TemplateSignerDetails enableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
    return this;
  }

  /**
   * Get enableAccessCode
   * @return enableAccessCode
   */
  @javax.annotation.Nullable
  public Boolean getEnableAccessCode() {
    return enableAccessCode;
  }

  public void setEnableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
  }


  public TemplateSignerDetails enableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
    return this;
  }

  /**
   * Get enableEmailOTP
   * @return enableEmailOTP
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmailOTP() {
    return enableEmailOTP;
  }

  public void setEnableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
  }


  public TemplateSignerDetails imposeAuthentication(ImposeAuthenticationEnum imposeAuthentication) {
    this.imposeAuthentication = imposeAuthentication;
    return this;
  }

  /**
   * Get imposeAuthentication
   * @return imposeAuthentication
   */
  @javax.annotation.Nullable
  public ImposeAuthenticationEnum getImposeAuthentication() {
    return imposeAuthentication;
  }

  public void setImposeAuthentication(ImposeAuthenticationEnum imposeAuthentication) {
    this.imposeAuthentication = imposeAuthentication;
  }


  public TemplateSignerDetails deliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  /**
   * Get deliveryMode
   * @return deliveryMode
   */
  @javax.annotation.Nullable
  public DeliveryModeEnum getDeliveryMode() {
    return deliveryMode;
  }

  public void setDeliveryMode(DeliveryModeEnum deliveryMode) {
    this.deliveryMode = deliveryMode;
  }


  public TemplateSignerDetails allowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
    return this;
  }

  /**
   * Get allowFieldConfiguration
   * @return allowFieldConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getAllowFieldConfiguration() {
    return allowFieldConfiguration;
  }

  public void setAllowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
  }


  public TemplateSignerDetails userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public TemplateSignerDetails order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public TemplateSignerDetails signerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
    return this;
  }

  /**
   * Get signerType
   * @return signerType
   */
  @javax.annotation.Nullable
  public SignerTypeEnum getSignerType() {
    return signerType;
  }

  public void setSignerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
  }


  public TemplateSignerDetails hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Get hostEmail
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public TemplateSignerDetails hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public TemplateSignerDetails hostUserId(String hostUserId) {
    this.hostUserId = hostUserId;
    return this;
  }

  /**
   * Get hostUserId
   * @return hostUserId
   */
  @javax.annotation.Nullable
  public String getHostUserId() {
    return hostUserId;
  }

  public void setHostUserId(String hostUserId) {
    this.hostUserId = hostUserId;
  }


  public TemplateSignerDetails signType(SignTypeEnum signType) {
    this.signType = signType;
    return this;
  }

  /**
   * Get signType
   * @return signType
   */
  @javax.annotation.Nullable
  public SignTypeEnum getSignType() {
    return signType;
  }

  public void setSignType(SignTypeEnum signType) {
    this.signType = signType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSignerDetails templateSignerDetails = (TemplateSignerDetails) o;
    return Objects.equals(this.signerName, templateSignerDetails.signerName) &&
        Objects.equals(this.signerRole, templateSignerDetails.signerRole) &&
        Objects.equals(this.signerEmail, templateSignerDetails.signerEmail) &&
        Objects.equals(this.phoneNumber, templateSignerDetails.phoneNumber) &&
        Objects.equals(this.status, templateSignerDetails.status) &&
        Objects.equals(this.enableAccessCode, templateSignerDetails.enableAccessCode) &&
        Objects.equals(this.enableEmailOTP, templateSignerDetails.enableEmailOTP) &&
        Objects.equals(this.imposeAuthentication, templateSignerDetails.imposeAuthentication) &&
        Objects.equals(this.deliveryMode, templateSignerDetails.deliveryMode) &&
        Objects.equals(this.allowFieldConfiguration, templateSignerDetails.allowFieldConfiguration) &&
        Objects.equals(this.userId, templateSignerDetails.userId) &&
        Objects.equals(this.order, templateSignerDetails.order) &&
        Objects.equals(this.signerType, templateSignerDetails.signerType) &&
        Objects.equals(this.hostEmail, templateSignerDetails.hostEmail) &&
        Objects.equals(this.hostName, templateSignerDetails.hostName) &&
        Objects.equals(this.hostUserId, templateSignerDetails.hostUserId) &&
        Objects.equals(this.signType, templateSignerDetails.signType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerName, signerRole, signerEmail, phoneNumber, status, enableAccessCode, enableEmailOTP, imposeAuthentication, deliveryMode, allowFieldConfiguration, userId, order, signerType, hostEmail, hostName, hostUserId, signType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSignerDetails {\n");
    sb.append("    signerName: ").append(toIndentedString(signerName)).append("\n");
    sb.append("    signerRole: ").append(toIndentedString(signerRole)).append("\n");
    sb.append("    signerEmail: ").append(toIndentedString(signerEmail)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enableAccessCode: ").append(toIndentedString(enableAccessCode)).append("\n");
    sb.append("    enableEmailOTP: ").append(toIndentedString(enableEmailOTP)).append("\n");
    sb.append("    imposeAuthentication: ").append(toIndentedString(imposeAuthentication)).append("\n");
    sb.append("    deliveryMode: ").append(toIndentedString(deliveryMode)).append("\n");
    sb.append("    allowFieldConfiguration: ").append(toIndentedString(allowFieldConfiguration)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    signerType: ").append(toIndentedString(signerType)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    hostUserId: ").append(toIndentedString(hostUserId)).append("\n");
    sb.append("    signType: ").append(toIndentedString(signType)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (signerName != null) {
        if (isFileTypeOrListOfFiles(signerName)) {
            fileTypeFound = true;
        }

        if (signerName.getClass().equals(java.io.File.class) ||
            signerName.getClass().equals(Integer.class) ||
            signerName.getClass().equals(String.class) ||
            signerName.getClass().equals(java.net.URI.class)||
            signerName.getClass().isEnum()) {
            map.put("signerName", signerName);
        } else if (isListOfFile(signerName)) {
            for(int i = 0; i< getListSize(signerName); i++) {
                map.put("signerName", signerName);
            }
        }
        else {
          map.put("signerName", JSON.serialize(signerName));
        }
    }
    if (signerRole != null) {
        if (isFileTypeOrListOfFiles(signerRole)) {
            fileTypeFound = true;
        }

        if (signerRole.getClass().equals(java.io.File.class) ||
            signerRole.getClass().equals(Integer.class) ||
            signerRole.getClass().equals(String.class) ||
            signerRole.getClass().equals(java.net.URI.class)||
            signerRole.getClass().isEnum()) {
            map.put("signerRole", signerRole);
        } else if (isListOfFile(signerRole)) {
            for(int i = 0; i< getListSize(signerRole); i++) {
                map.put("signerRole", signerRole);
            }
        }
        else {
          map.put("signerRole", JSON.serialize(signerRole));
        }
    }
    if (signerEmail != null) {
        if (isFileTypeOrListOfFiles(signerEmail)) {
            fileTypeFound = true;
        }

        if (signerEmail.getClass().equals(java.io.File.class) ||
            signerEmail.getClass().equals(Integer.class) ||
            signerEmail.getClass().equals(String.class) ||
            signerEmail.getClass().equals(java.net.URI.class)||
            signerEmail.getClass().isEnum()) {
            map.put("signerEmail", signerEmail);
        } else if (isListOfFile(signerEmail)) {
            for(int i = 0; i< getListSize(signerEmail); i++) {
                map.put("signerEmail", signerEmail);
            }
        }
        else {
          map.put("signerEmail", JSON.serialize(signerEmail));
        }
    }
    if (phoneNumber != null) {
        if (isFileTypeOrListOfFiles(phoneNumber)) {
            fileTypeFound = true;
        }

        if (phoneNumber.getClass().equals(java.io.File.class) ||
            phoneNumber.getClass().equals(Integer.class) ||
            phoneNumber.getClass().equals(String.class) ||
            phoneNumber.getClass().equals(java.net.URI.class)||
            phoneNumber.getClass().isEnum()) {
            map.put("phoneNumber", phoneNumber);
        } else if (isListOfFile(phoneNumber)) {
            for(int i = 0; i< getListSize(phoneNumber); i++) {
                map.put("phoneNumber", phoneNumber);
            }
        }
        else {
          map.put("phoneNumber", JSON.serialize(phoneNumber));
        }
    }
    if (status != null) {
        if (isFileTypeOrListOfFiles(status)) {
            fileTypeFound = true;
        }

        if (status.getClass().equals(java.io.File.class) ||
            status.getClass().equals(Integer.class) ||
            status.getClass().equals(String.class) ||
            status.getClass().equals(java.net.URI.class)||
            status.getClass().isEnum()) {
            map.put("status", status);
        } else if (isListOfFile(status)) {
            for(int i = 0; i< getListSize(status); i++) {
                map.put("status", status);
            }
        }
        else {
          map.put("status", JSON.serialize(status));
        }
    }
    if (enableAccessCode != null) {
        if (isFileTypeOrListOfFiles(enableAccessCode)) {
            fileTypeFound = true;
        }

        if (enableAccessCode.getClass().equals(java.io.File.class) ||
            enableAccessCode.getClass().equals(Integer.class) ||
            enableAccessCode.getClass().equals(String.class) ||
            enableAccessCode.getClass().equals(java.net.URI.class)||
            enableAccessCode.getClass().isEnum()) {
            map.put("enableAccessCode", enableAccessCode);
        } else if (isListOfFile(enableAccessCode)) {
            for(int i = 0; i< getListSize(enableAccessCode); i++) {
                map.put("enableAccessCode", enableAccessCode);
            }
        }
        else {
          map.put("enableAccessCode", JSON.serialize(enableAccessCode));
        }
    }
    if (enableEmailOTP != null) {
        if (isFileTypeOrListOfFiles(enableEmailOTP)) {
            fileTypeFound = true;
        }

        if (enableEmailOTP.getClass().equals(java.io.File.class) ||
            enableEmailOTP.getClass().equals(Integer.class) ||
            enableEmailOTP.getClass().equals(String.class) ||
            enableEmailOTP.getClass().equals(java.net.URI.class)||
            enableEmailOTP.getClass().isEnum()) {
            map.put("enableEmailOTP", enableEmailOTP);
        } else if (isListOfFile(enableEmailOTP)) {
            for(int i = 0; i< getListSize(enableEmailOTP); i++) {
                map.put("enableEmailOTP", enableEmailOTP);
            }
        }
        else {
          map.put("enableEmailOTP", JSON.serialize(enableEmailOTP));
        }
    }
    if (imposeAuthentication != null) {
        if (isFileTypeOrListOfFiles(imposeAuthentication)) {
            fileTypeFound = true;
        }

        if (imposeAuthentication.getClass().equals(java.io.File.class) ||
            imposeAuthentication.getClass().equals(Integer.class) ||
            imposeAuthentication.getClass().equals(String.class) ||
            imposeAuthentication.getClass().equals(java.net.URI.class)||
            imposeAuthentication.getClass().isEnum()) {
            map.put("imposeAuthentication", imposeAuthentication);
        } else if (isListOfFile(imposeAuthentication)) {
            for(int i = 0; i< getListSize(imposeAuthentication); i++) {
                map.put("imposeAuthentication", imposeAuthentication);
            }
        }
        else {
          map.put("imposeAuthentication", JSON.serialize(imposeAuthentication));
        }
    }
    if (deliveryMode != null) {
        if (isFileTypeOrListOfFiles(deliveryMode)) {
            fileTypeFound = true;
        }

        if (deliveryMode.getClass().equals(java.io.File.class) ||
            deliveryMode.getClass().equals(Integer.class) ||
            deliveryMode.getClass().equals(String.class) ||
            deliveryMode.getClass().equals(java.net.URI.class)||
            deliveryMode.getClass().isEnum()) {
            map.put("deliveryMode", deliveryMode);
        } else if (isListOfFile(deliveryMode)) {
            for(int i = 0; i< getListSize(deliveryMode); i++) {
                map.put("deliveryMode", deliveryMode);
            }
        }
        else {
          map.put("deliveryMode", JSON.serialize(deliveryMode));
        }
    }
    if (allowFieldConfiguration != null) {
        if (isFileTypeOrListOfFiles(allowFieldConfiguration)) {
            fileTypeFound = true;
        }

        if (allowFieldConfiguration.getClass().equals(java.io.File.class) ||
            allowFieldConfiguration.getClass().equals(Integer.class) ||
            allowFieldConfiguration.getClass().equals(String.class) ||
            allowFieldConfiguration.getClass().equals(java.net.URI.class)||
            allowFieldConfiguration.getClass().isEnum()) {
            map.put("allowFieldConfiguration", allowFieldConfiguration);
        } else if (isListOfFile(allowFieldConfiguration)) {
            for(int i = 0; i< getListSize(allowFieldConfiguration); i++) {
                map.put("allowFieldConfiguration", allowFieldConfiguration);
            }
        }
        else {
          map.put("allowFieldConfiguration", JSON.serialize(allowFieldConfiguration));
        }
    }
    if (userId != null) {
        if (isFileTypeOrListOfFiles(userId)) {
            fileTypeFound = true;
        }

        if (userId.getClass().equals(java.io.File.class) ||
            userId.getClass().equals(Integer.class) ||
            userId.getClass().equals(String.class) ||
            userId.getClass().equals(java.net.URI.class)||
            userId.getClass().isEnum()) {
            map.put("userId", userId);
        } else if (isListOfFile(userId)) {
            for(int i = 0; i< getListSize(userId); i++) {
                map.put("userId", userId);
            }
        }
        else {
          map.put("userId", JSON.serialize(userId));
        }
    }
    if (order != null) {
        if (isFileTypeOrListOfFiles(order)) {
            fileTypeFound = true;
        }

        if (order.getClass().equals(java.io.File.class) ||
            order.getClass().equals(Integer.class) ||
            order.getClass().equals(String.class) ||
            order.getClass().equals(java.net.URI.class)||
            order.getClass().isEnum()) {
            map.put("order", order);
        } else if (isListOfFile(order)) {
            for(int i = 0; i< getListSize(order); i++) {
                map.put("order", order);
            }
        }
        else {
          map.put("order", JSON.serialize(order));
        }
    }
    if (signerType != null) {
        if (isFileTypeOrListOfFiles(signerType)) {
            fileTypeFound = true;
        }

        if (signerType.getClass().equals(java.io.File.class) ||
            signerType.getClass().equals(Integer.class) ||
            signerType.getClass().equals(String.class) ||
            signerType.getClass().equals(java.net.URI.class)||
            signerType.getClass().isEnum()) {
            map.put("signerType", signerType);
        } else if (isListOfFile(signerType)) {
            for(int i = 0; i< getListSize(signerType); i++) {
                map.put("signerType", signerType);
            }
        }
        else {
          map.put("signerType", JSON.serialize(signerType));
        }
    }
    if (hostEmail != null) {
        if (isFileTypeOrListOfFiles(hostEmail)) {
            fileTypeFound = true;
        }

        if (hostEmail.getClass().equals(java.io.File.class) ||
            hostEmail.getClass().equals(Integer.class) ||
            hostEmail.getClass().equals(String.class) ||
            hostEmail.getClass().equals(java.net.URI.class)||
            hostEmail.getClass().isEnum()) {
            map.put("hostEmail", hostEmail);
        } else if (isListOfFile(hostEmail)) {
            for(int i = 0; i< getListSize(hostEmail); i++) {
                map.put("hostEmail", hostEmail);
            }
        }
        else {
          map.put("hostEmail", JSON.serialize(hostEmail));
        }
    }
    if (hostName != null) {
        if (isFileTypeOrListOfFiles(hostName)) {
            fileTypeFound = true;
        }

        if (hostName.getClass().equals(java.io.File.class) ||
            hostName.getClass().equals(Integer.class) ||
            hostName.getClass().equals(String.class) ||
            hostName.getClass().equals(java.net.URI.class)||
            hostName.getClass().isEnum()) {
            map.put("hostName", hostName);
        } else if (isListOfFile(hostName)) {
            for(int i = 0; i< getListSize(hostName); i++) {
                map.put("hostName", hostName);
            }
        }
        else {
          map.put("hostName", JSON.serialize(hostName));
        }
    }
    if (hostUserId != null) {
        if (isFileTypeOrListOfFiles(hostUserId)) {
            fileTypeFound = true;
        }

        if (hostUserId.getClass().equals(java.io.File.class) ||
            hostUserId.getClass().equals(Integer.class) ||
            hostUserId.getClass().equals(String.class) ||
            hostUserId.getClass().equals(java.net.URI.class)||
            hostUserId.getClass().isEnum()) {
            map.put("hostUserId", hostUserId);
        } else if (isListOfFile(hostUserId)) {
            for(int i = 0; i< getListSize(hostUserId); i++) {
                map.put("hostUserId", hostUserId);
            }
        }
        else {
          map.put("hostUserId", JSON.serialize(hostUserId));
        }
    }
    if (signType != null) {
        if (isFileTypeOrListOfFiles(signType)) {
            fileTypeFound = true;
        }

        if (signType.getClass().equals(java.io.File.class) ||
            signType.getClass().equals(Integer.class) ||
            signType.getClass().equals(String.class) ||
            signType.getClass().equals(java.net.URI.class)||
            signType.getClass().isEnum()) {
            map.put("signType", signType);
        } else if (isListOfFile(signType)) {
            for(int i = 0; i< getListSize(signType); i++) {
                map.put("signType", signType);
            }
        }
        else {
          map.put("signType", JSON.serialize(signType));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signerName");
    openapiFields.add("signerRole");
    openapiFields.add("signerEmail");
    openapiFields.add("phoneNumber");
    openapiFields.add("status");
    openapiFields.add("enableAccessCode");
    openapiFields.add("enableEmailOTP");
    openapiFields.add("imposeAuthentication");
    openapiFields.add("deliveryMode");
    openapiFields.add("allowFieldConfiguration");
    openapiFields.add("userId");
    openapiFields.add("order");
    openapiFields.add("signerType");
    openapiFields.add("hostEmail");
    openapiFields.add("hostName");
    openapiFields.add("hostUserId");
    openapiFields.add("signType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateSignerDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateSignerDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateSignerDetails is not found in the empty JSON string", TemplateSignerDetails.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("signerName") != null && !jsonObj.get("signerName").isJsonNull()) && !jsonObj.get("signerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerName").toString()));
      }
      if ((jsonObj.get("signerRole") != null && !jsonObj.get("signerRole").isJsonNull()) && !jsonObj.get("signerRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerRole").toString()));
      }
      if ((jsonObj.get("signerEmail") != null && !jsonObj.get("signerEmail").isJsonNull()) && !jsonObj.get("signerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerEmail").toString()));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("imposeAuthentication") != null && !jsonObj.get("imposeAuthentication").isJsonNull()) && !jsonObj.get("imposeAuthentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imposeAuthentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imposeAuthentication").toString()));
      }
      // validate the optional field `imposeAuthentication`
      if (jsonObj.get("imposeAuthentication") != null && !jsonObj.get("imposeAuthentication").isJsonNull()) {
        ImposeAuthenticationEnum.validateJsonElement(jsonObj.get("imposeAuthentication"));
      }
      if ((jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) && !jsonObj.get("deliveryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryMode").toString()));
      }
      // validate the optional field `deliveryMode`
      if (jsonObj.get("deliveryMode") != null && !jsonObj.get("deliveryMode").isJsonNull()) {
        DeliveryModeEnum.validateJsonElement(jsonObj.get("deliveryMode"));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) && !jsonObj.get("signerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerType").toString()));
      }
      // validate the optional field `signerType`
      if (jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) {
        SignerTypeEnum.validateJsonElement(jsonObj.get("signerType"));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("hostUserId") != null && !jsonObj.get("hostUserId").isJsonNull()) && !jsonObj.get("hostUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostUserId").toString()));
      }
      if ((jsonObj.get("signType") != null && !jsonObj.get("signType").isJsonNull()) && !jsonObj.get("signType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signType").toString()));
      }
      // validate the optional field `signType`
      if (jsonObj.get("signType") != null && !jsonObj.get("signType").isJsonNull()) {
        SignTypeEnum.validateJsonElement(jsonObj.get("signType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateSignerDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateSignerDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateSignerDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateSignerDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateSignerDetails>() {
           @Override
           public void write(JsonWriter out, TemplateSignerDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateSignerDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateSignerDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateSignerDetails
   * @throws IOException if the JSON string is invalid with respect to TemplateSignerDetails
   */
  public static TemplateSignerDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateSignerDetails.class);
  }

  /**
   * Convert an instance of TemplateSignerDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

