/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * AttachmentInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class AttachmentInfo {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ALLOWED_FILE_TYPES = "allowedFileTypes";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALLOWED_FILE_TYPES)
  private String allowedFileTypes;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCEPTED_FILE_TYPES = "acceptedFileTypes";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_FILE_TYPES)
  private List<String> acceptedFileTypes;

  public AttachmentInfo() {
  }

  public AttachmentInfo title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  @Deprecated
  public AttachmentInfo allowedFileTypes(String allowedFileTypes) {
    this.allowedFileTypes = allowedFileTypes;
    return this;
  }

  /**
   * Get allowedFileTypes
   * @return allowedFileTypes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getAllowedFileTypes() {
    return allowedFileTypes;
  }

  @Deprecated
  public void setAllowedFileTypes(String allowedFileTypes) {
    this.allowedFileTypes = allowedFileTypes;
  }


  public AttachmentInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AttachmentInfo acceptedFileTypes(List<String> acceptedFileTypes) {
    this.acceptedFileTypes = acceptedFileTypes;
    return this;
  }

  public AttachmentInfo addAcceptedFileTypesItem(String acceptedFileTypesItem) {
    if (this.acceptedFileTypes == null) {
      this.acceptedFileTypes = new ArrayList<>();
    }
    this.acceptedFileTypes.add(acceptedFileTypesItem);
    return this;
  }

  /**
   * Get acceptedFileTypes
   * @return acceptedFileTypes
   */
  @javax.annotation.Nullable
  public List<String> getAcceptedFileTypes() {
    return acceptedFileTypes;
  }

  public void setAcceptedFileTypes(List<String> acceptedFileTypes) {
    this.acceptedFileTypes = acceptedFileTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentInfo attachmentInfo = (AttachmentInfo) o;
    return Objects.equals(this.title, attachmentInfo.title) &&
        Objects.equals(this.allowedFileTypes, attachmentInfo.allowedFileTypes) &&
        Objects.equals(this.description, attachmentInfo.description) &&
        Objects.equals(this.acceptedFileTypes, attachmentInfo.acceptedFileTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, allowedFileTypes, description, acceptedFileTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentInfo {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    allowedFileTypes: ").append(toIndentedString(allowedFileTypes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    acceptedFileTypes: ").append(toIndentedString(acceptedFileTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title", title);
            }
        }
        else {
          map.put("title", title);
        }
    }
    if (allowedFileTypes != null) {
        if (isFileTypeOrListOfFiles(allowedFileTypes)) {
            fileTypeFound = true;
        }

        if (allowedFileTypes.getClass().equals(java.io.File.class) ||
            allowedFileTypes.getClass().equals(Integer.class) ||
            allowedFileTypes.getClass().equals(String.class) ||
            allowedFileTypes.getClass().isEnum()) {
            map.put("allowedFileTypes", allowedFileTypes);
        } else if (isListOfFile(allowedFileTypes)) {
            for(int i = 0; i< getListSize(allowedFileTypes); i++) {
                map.put("allowedFileTypes", allowedFileTypes);
            }
        }
        else {
          map.put("allowedFileTypes", allowedFileTypes);
        }
    }
    if (description != null) {
        if (isFileTypeOrListOfFiles(description)) {
            fileTypeFound = true;
        }

        if (description.getClass().equals(java.io.File.class) ||
            description.getClass().equals(Integer.class) ||
            description.getClass().equals(String.class) ||
            description.getClass().isEnum()) {
            map.put("description", description);
        } else if (isListOfFile(description)) {
            for(int i = 0; i< getListSize(description); i++) {
                map.put("description", description);
            }
        }
        else {
          map.put("description", description);
        }
    }
    if (acceptedFileTypes != null) {
        if (isFileTypeOrListOfFiles(acceptedFileTypes)) {
            fileTypeFound = true;
        }

        if (acceptedFileTypes.getClass().equals(java.io.File.class) ||
            acceptedFileTypes.getClass().equals(Integer.class) ||
            acceptedFileTypes.getClass().equals(String.class) ||
            acceptedFileTypes.getClass().isEnum()) {
            map.put("acceptedFileTypes", acceptedFileTypes);
        } else if (isListOfFile(acceptedFileTypes)) {
            for(int i = 0; i< getListSize(acceptedFileTypes); i++) {
                map.put("acceptedFileTypes", acceptedFileTypes);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : acceptedFileTypes) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("acceptedFileTypes", objectList);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("allowedFileTypes");
    openapiFields.add("description");
    openapiFields.add("acceptedFileTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("allowedFileTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachmentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachmentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachmentInfo is not found in the empty JSON string", AttachmentInfo.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttachmentInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("allowedFileTypes") != null && !jsonObj.get("allowedFileTypes").isJsonNull()) && !jsonObj.get("allowedFileTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedFileTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedFileTypes").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("acceptedFileTypes") != null && !jsonObj.get("acceptedFileTypes").isJsonNull() && !jsonObj.get("acceptedFileTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptedFileTypes` to be an array in the JSON string but got `%s`", jsonObj.get("acceptedFileTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachmentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachmentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachmentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachmentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachmentInfo>() {
           @Override
           public void write(JsonWriter out, AttachmentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachmentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachmentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachmentInfo
   * @throws IOException if the JSON string is invalid with respect to AttachmentInfo
   */
  public static AttachmentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachmentInfo.class);
  }

  /**
   * Convert an instance of AttachmentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

