/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.PhoneNumber;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * ChangeRecipient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class ChangeRecipient {
  public static final String SERIALIZED_NAME_NEW_SIGNER_NAME = "newSignerName";
  @SerializedName(SERIALIZED_NAME_NEW_SIGNER_NAME)
  private String newSignerName;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_NEW_SIGNER_EMAIL = "newSignerEmail";
  @SerializedName(SERIALIZED_NAME_NEW_SIGNER_EMAIL)
  private String newSignerEmail;

  public static final String SERIALIZED_NAME_OLD_SIGNER_EMAIL = "oldSignerEmail";
  @SerializedName(SERIALIZED_NAME_OLD_SIGNER_EMAIL)
  private String oldSignerEmail;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private String onBehalfOf;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_OLD_PHONE_NUMBER = "oldPhoneNumber";
  @SerializedName(SERIALIZED_NAME_OLD_PHONE_NUMBER)
  private PhoneNumber oldPhoneNumber;

  public ChangeRecipient() {
  }

  public ChangeRecipient newSignerName(String newSignerName) {
    this.newSignerName = newSignerName;
    return this;
  }

  /**
   * Get newSignerName
   * @return newSignerName
   */
  @javax.annotation.Nonnull
  public String getNewSignerName() {
    return newSignerName;
  }

  public void setNewSignerName(String newSignerName) {
    this.newSignerName = newSignerName;
  }


  public ChangeRecipient reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ChangeRecipient order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * minimum: 1
   * maximum: 50
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public ChangeRecipient newSignerEmail(String newSignerEmail) {
    this.newSignerEmail = newSignerEmail;
    return this;
  }

  /**
   * Get newSignerEmail
   * @return newSignerEmail
   */
  @javax.annotation.Nullable
  public String getNewSignerEmail() {
    return newSignerEmail;
  }

  public void setNewSignerEmail(String newSignerEmail) {
    this.newSignerEmail = newSignerEmail;
  }


  public ChangeRecipient oldSignerEmail(String oldSignerEmail) {
    this.oldSignerEmail = oldSignerEmail;
    return this;
  }

  /**
   * Get oldSignerEmail
   * @return oldSignerEmail
   */
  @javax.annotation.Nullable
  public String getOldSignerEmail() {
    return oldSignerEmail;
  }

  public void setOldSignerEmail(String oldSignerEmail) {
    this.oldSignerEmail = oldSignerEmail;
  }


  public ChangeRecipient onBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public String getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public ChangeRecipient phoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ChangeRecipient oldPhoneNumber(PhoneNumber oldPhoneNumber) {
    this.oldPhoneNumber = oldPhoneNumber;
    return this;
  }

  /**
   * Get oldPhoneNumber
   * @return oldPhoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getOldPhoneNumber() {
    return oldPhoneNumber;
  }

  public void setOldPhoneNumber(PhoneNumber oldPhoneNumber) {
    this.oldPhoneNumber = oldPhoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeRecipient changeRecipient = (ChangeRecipient) o;
    return Objects.equals(this.newSignerName, changeRecipient.newSignerName) &&
        Objects.equals(this.reason, changeRecipient.reason) &&
        Objects.equals(this.order, changeRecipient.order) &&
        Objects.equals(this.newSignerEmail, changeRecipient.newSignerEmail) &&
        Objects.equals(this.oldSignerEmail, changeRecipient.oldSignerEmail) &&
        Objects.equals(this.onBehalfOf, changeRecipient.onBehalfOf) &&
        Objects.equals(this.phoneNumber, changeRecipient.phoneNumber) &&
        Objects.equals(this.oldPhoneNumber, changeRecipient.oldPhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newSignerName, reason, order, newSignerEmail, oldSignerEmail, onBehalfOf, phoneNumber, oldPhoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeRecipient {\n");
    sb.append("    newSignerName: ").append(toIndentedString(newSignerName)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    newSignerEmail: ").append(toIndentedString(newSignerEmail)).append("\n");
    sb.append("    oldSignerEmail: ").append(toIndentedString(oldSignerEmail)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    oldPhoneNumber: ").append(toIndentedString(oldPhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (newSignerName != null) {
        if (isFileTypeOrListOfFiles(newSignerName)) {
            fileTypeFound = true;
        }

        if (newSignerName.getClass().equals(java.io.File.class) ||
            newSignerName.getClass().equals(Integer.class) ||
            newSignerName.getClass().equals(String.class) ||
            newSignerName.getClass().equals(java.net.URI.class)||
            newSignerName.getClass().isEnum()) {
            map.put("newSignerName", newSignerName);
        } else if (isListOfFile(newSignerName)) {
            for(int i = 0; i< getListSize(newSignerName); i++) {
                map.put("newSignerName", newSignerName);
            }
        }
        else {
          map.put("newSignerName", JSON.serialize(newSignerName));
        }
    }
    if (reason != null) {
        if (isFileTypeOrListOfFiles(reason)) {
            fileTypeFound = true;
        }

        if (reason.getClass().equals(java.io.File.class) ||
            reason.getClass().equals(Integer.class) ||
            reason.getClass().equals(String.class) ||
            reason.getClass().equals(java.net.URI.class)||
            reason.getClass().isEnum()) {
            map.put("reason", reason);
        } else if (isListOfFile(reason)) {
            for(int i = 0; i< getListSize(reason); i++) {
                map.put("reason", reason);
            }
        }
        else {
          map.put("reason", JSON.serialize(reason));
        }
    }
    if (order != null) {
        if (isFileTypeOrListOfFiles(order)) {
            fileTypeFound = true;
        }

        if (order.getClass().equals(java.io.File.class) ||
            order.getClass().equals(Integer.class) ||
            order.getClass().equals(String.class) ||
            order.getClass().equals(java.net.URI.class)||
            order.getClass().isEnum()) {
            map.put("order", order);
        } else if (isListOfFile(order)) {
            for(int i = 0; i< getListSize(order); i++) {
                map.put("order", order);
            }
        }
        else {
          map.put("order", JSON.serialize(order));
        }
    }
    if (newSignerEmail != null) {
        if (isFileTypeOrListOfFiles(newSignerEmail)) {
            fileTypeFound = true;
        }

        if (newSignerEmail.getClass().equals(java.io.File.class) ||
            newSignerEmail.getClass().equals(Integer.class) ||
            newSignerEmail.getClass().equals(String.class) ||
            newSignerEmail.getClass().equals(java.net.URI.class)||
            newSignerEmail.getClass().isEnum()) {
            map.put("newSignerEmail", newSignerEmail);
        } else if (isListOfFile(newSignerEmail)) {
            for(int i = 0; i< getListSize(newSignerEmail); i++) {
                map.put("newSignerEmail", newSignerEmail);
            }
        }
        else {
          map.put("newSignerEmail", JSON.serialize(newSignerEmail));
        }
    }
    if (oldSignerEmail != null) {
        if (isFileTypeOrListOfFiles(oldSignerEmail)) {
            fileTypeFound = true;
        }

        if (oldSignerEmail.getClass().equals(java.io.File.class) ||
            oldSignerEmail.getClass().equals(Integer.class) ||
            oldSignerEmail.getClass().equals(String.class) ||
            oldSignerEmail.getClass().equals(java.net.URI.class)||
            oldSignerEmail.getClass().isEnum()) {
            map.put("oldSignerEmail", oldSignerEmail);
        } else if (isListOfFile(oldSignerEmail)) {
            for(int i = 0; i< getListSize(oldSignerEmail); i++) {
                map.put("oldSignerEmail", oldSignerEmail);
            }
        }
        else {
          map.put("oldSignerEmail", JSON.serialize(oldSignerEmail));
        }
    }
    if (onBehalfOf != null) {
        if (isFileTypeOrListOfFiles(onBehalfOf)) {
            fileTypeFound = true;
        }

        if (onBehalfOf.getClass().equals(java.io.File.class) ||
            onBehalfOf.getClass().equals(Integer.class) ||
            onBehalfOf.getClass().equals(String.class) ||
            onBehalfOf.getClass().equals(java.net.URI.class)||
            onBehalfOf.getClass().isEnum()) {
            map.put("onBehalfOf", onBehalfOf);
        } else if (isListOfFile(onBehalfOf)) {
            for(int i = 0; i< getListSize(onBehalfOf); i++) {
                map.put("onBehalfOf", onBehalfOf);
            }
        }
        else {
          map.put("onBehalfOf", JSON.serialize(onBehalfOf));
        }
    }
    if (phoneNumber != null) {
        if (isFileTypeOrListOfFiles(phoneNumber)) {
            fileTypeFound = true;
        }

        if (phoneNumber.getClass().equals(java.io.File.class) ||
            phoneNumber.getClass().equals(Integer.class) ||
            phoneNumber.getClass().equals(String.class) ||
            phoneNumber.getClass().equals(java.net.URI.class)||
            phoneNumber.getClass().isEnum()) {
            map.put("phoneNumber", phoneNumber);
        } else if (isListOfFile(phoneNumber)) {
            for(int i = 0; i< getListSize(phoneNumber); i++) {
                map.put("phoneNumber", phoneNumber);
            }
        }
        else {
          map.put("phoneNumber", JSON.serialize(phoneNumber));
        }
    }
    if (oldPhoneNumber != null) {
        if (isFileTypeOrListOfFiles(oldPhoneNumber)) {
            fileTypeFound = true;
        }

        if (oldPhoneNumber.getClass().equals(java.io.File.class) ||
            oldPhoneNumber.getClass().equals(Integer.class) ||
            oldPhoneNumber.getClass().equals(String.class) ||
            oldPhoneNumber.getClass().equals(java.net.URI.class)||
            oldPhoneNumber.getClass().isEnum()) {
            map.put("oldPhoneNumber", oldPhoneNumber);
        } else if (isListOfFile(oldPhoneNumber)) {
            for(int i = 0; i< getListSize(oldPhoneNumber); i++) {
                map.put("oldPhoneNumber", oldPhoneNumber);
            }
        }
        else {
          map.put("oldPhoneNumber", JSON.serialize(oldPhoneNumber));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newSignerName");
    openapiFields.add("reason");
    openapiFields.add("order");
    openapiFields.add("newSignerEmail");
    openapiFields.add("oldSignerEmail");
    openapiFields.add("onBehalfOf");
    openapiFields.add("phoneNumber");
    openapiFields.add("oldPhoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("newSignerName");
    openapiRequiredFields.add("reason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeRecipient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeRecipient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeRecipient is not found in the empty JSON string", ChangeRecipient.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChangeRecipient.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("newSignerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newSignerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newSignerName").toString()));
      }
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("newSignerEmail") != null && !jsonObj.get("newSignerEmail").isJsonNull()) && !jsonObj.get("newSignerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newSignerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newSignerEmail").toString()));
      }
      if ((jsonObj.get("oldSignerEmail") != null && !jsonObj.get("oldSignerEmail").isJsonNull()) && !jsonObj.get("oldSignerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldSignerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldSignerEmail").toString()));
      }
      if ((jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) && !jsonObj.get("onBehalfOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onBehalfOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onBehalfOf").toString()));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      // validate the optional field `oldPhoneNumber`
      if (jsonObj.get("oldPhoneNumber") != null && !jsonObj.get("oldPhoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("oldPhoneNumber"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeRecipient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeRecipient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeRecipient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeRecipient.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeRecipient>() {
           @Override
           public void write(JsonWriter out, ChangeRecipient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeRecipient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeRecipient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeRecipient
   * @throws IOException if the JSON string is invalid with respect to ChangeRecipient
   */
  public static ChangeRecipient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeRecipient.class);
  }

  /**
   * Convert an instance of ChangeRecipient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

