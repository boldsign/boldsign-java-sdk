/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.DocumentFormFields;
import com.boldsign.model.IdVerification;
import com.boldsign.model.PhoneNumber;
import com.boldsign.model.RecipientNotificationSettings;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * DocumentSignerDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class DocumentSignerDetails {
  public static final String SERIALIZED_NAME_SIGNER_NAME = "signerName";
  @SerializedName(SERIALIZED_NAME_SIGNER_NAME)
  private String signerName;

  public static final String SERIALIZED_NAME_SIGNER_ROLE = "signerRole";
  @SerializedName(SERIALIZED_NAME_SIGNER_ROLE)
  private String signerRole;

  public static final String SERIALIZED_NAME_SIGNER_EMAIL = "signerEmail";
  @SerializedName(SERIALIZED_NAME_SIGNER_EMAIL)
  private String signerEmail;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("None"),
    
    NOT_COMPLETED("NotCompleted"),
    
    COMPLETED("Completed"),
    
    DECLINED("Declined"),
    
    REVOKED("Revoked"),
    
    EXPIRED("Expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ENABLE_ACCESS_CODE = "enableAccessCode";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCESS_CODE)
  private Boolean enableAccessCode;

  public static final String SERIALIZED_NAME_IS_AUTHENTICATION_FAILED = "isAuthenticationFailed";
  @SerializedName(SERIALIZED_NAME_IS_AUTHENTICATION_FAILED)
  private Boolean isAuthenticationFailed = false;

  public static final String SERIALIZED_NAME_ENABLE_EMAIL_O_T_P = "enableEmailOTP";
  @SerializedName(SERIALIZED_NAME_ENABLE_EMAIL_O_T_P)
  private Boolean enableEmailOTP;

  /**
   * Gets or Sets authenticationType
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    NONE("None"),
    
    EMAIL_OTP("EmailOTP"),
    
    ACCESS_CODE("AccessCode"),
    
    SMSOTP("SMSOTP"),
    
    ID_VERIFICATION("IdVerification");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType;

  public static final String SERIALIZED_NAME_IS_DELIVERY_FAILED = "isDeliveryFailed";
  @SerializedName(SERIALIZED_NAME_IS_DELIVERY_FAILED)
  private Boolean isDeliveryFailed = false;

  public static final String SERIALIZED_NAME_IS_VIEWED = "isViewed";
  @SerializedName(SERIALIZED_NAME_IS_VIEWED)
  private Boolean isViewed = false;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order = 0;

  /**
   * Gets or Sets signerType
   */
  @JsonAdapter(SignerTypeEnum.Adapter.class)
  public enum SignerTypeEnum {
    SIGNER("Signer"),
    
    REVIEWER("Reviewer"),
    
    IN_PERSON_SIGNER("InPersonSigner");

    private String value;

    SignerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignerTypeEnum fromValue(String value) {
      for (SignerTypeEnum b : SignerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNER_TYPE = "signerType";
  @SerializedName(SERIALIZED_NAME_SIGNER_TYPE)
  private SignerTypeEnum signerType = SignerTypeEnum.SIGNER;

  public static final String SERIALIZED_NAME_HOST_EMAIL = "hostEmail";
  @SerializedName(SERIALIZED_NAME_HOST_EMAIL)
  private String hostEmail;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_IS_REASSIGNED = "isReassigned";
  @SerializedName(SERIALIZED_NAME_IS_REASSIGNED)
  private Boolean isReassigned;

  public static final String SERIALIZED_NAME_PRIVATE_MESSAGE = "privateMessage";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MESSAGE)
  private String privateMessage;

  public static final String SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION = "allowFieldConfiguration";
  @SerializedName(SERIALIZED_NAME_ALLOW_FIELD_CONFIGURATION)
  private Boolean allowFieldConfiguration;

  public static final String SERIALIZED_NAME_FORM_FIELDS = "formFields";
  @SerializedName(SERIALIZED_NAME_FORM_FIELDS)
  private List<DocumentFormFields> formFields;

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15);

    private Integer value;

    LanguageEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(Integer value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  /**
   * Gets or Sets locale
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("EN"),
    
    NO("NO"),
    
    FR("FR"),
    
    DE("DE"),
    
    ES("ES"),
    
    BG("BG"),
    
    CS("CS"),
    
    DA("DA"),
    
    IT("IT"),
    
    NL("NL"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    RU("RU"),
    
    SV("SV"),
    
    DEFAULT("Default");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private PhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_ID_VERIFICATION = "idVerification";
  @SerializedName(SERIALIZED_NAME_ID_VERIFICATION)
  private IdVerification idVerification;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_AUTHENTICATION_RETRY_COUNT = "authenticationRetryCount";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_RETRY_COUNT)
  private Integer authenticationRetryCount;

  public DocumentSignerDetails() {
  }

  public DocumentSignerDetails signerName(String signerName) {
    this.signerName = signerName;
    return this;
  }

  /**
   * Get signerName
   * @return signerName
   */
  @javax.annotation.Nullable
  public String getSignerName() {
    return signerName;
  }

  public void setSignerName(String signerName) {
    this.signerName = signerName;
  }


  public DocumentSignerDetails signerRole(String signerRole) {
    this.signerRole = signerRole;
    return this;
  }

  /**
   * Get signerRole
   * @return signerRole
   */
  @javax.annotation.Nullable
  public String getSignerRole() {
    return signerRole;
  }

  public void setSignerRole(String signerRole) {
    this.signerRole = signerRole;
  }


  public DocumentSignerDetails signerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
    return this;
  }

  /**
   * Get signerEmail
   * @return signerEmail
   */
  @javax.annotation.Nullable
  public String getSignerEmail() {
    return signerEmail;
  }

  public void setSignerEmail(String signerEmail) {
    this.signerEmail = signerEmail;
  }


  public DocumentSignerDetails status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DocumentSignerDetails enableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
    return this;
  }

  /**
   * Get enableAccessCode
   * @return enableAccessCode
   */
  @javax.annotation.Nullable
  public Boolean getEnableAccessCode() {
    return enableAccessCode;
  }

  public void setEnableAccessCode(Boolean enableAccessCode) {
    this.enableAccessCode = enableAccessCode;
  }


  public DocumentSignerDetails isAuthenticationFailed(Boolean isAuthenticationFailed) {
    this.isAuthenticationFailed = isAuthenticationFailed;
    return this;
  }

  /**
   * Get isAuthenticationFailed
   * @return isAuthenticationFailed
   */
  @javax.annotation.Nullable
  public Boolean getIsAuthenticationFailed() {
    return isAuthenticationFailed;
  }

  public void setIsAuthenticationFailed(Boolean isAuthenticationFailed) {
    this.isAuthenticationFailed = isAuthenticationFailed;
  }


  public DocumentSignerDetails enableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
    return this;
  }

  /**
   * Get enableEmailOTP
   * @return enableEmailOTP
   */
  @javax.annotation.Nullable
  public Boolean getEnableEmailOTP() {
    return enableEmailOTP;
  }

  public void setEnableEmailOTP(Boolean enableEmailOTP) {
    this.enableEmailOTP = enableEmailOTP;
  }


  public DocumentSignerDetails authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public DocumentSignerDetails isDeliveryFailed(Boolean isDeliveryFailed) {
    this.isDeliveryFailed = isDeliveryFailed;
    return this;
  }

  /**
   * Get isDeliveryFailed
   * @return isDeliveryFailed
   */
  @javax.annotation.Nullable
  public Boolean getIsDeliveryFailed() {
    return isDeliveryFailed;
  }

  public void setIsDeliveryFailed(Boolean isDeliveryFailed) {
    this.isDeliveryFailed = isDeliveryFailed;
  }


  public DocumentSignerDetails isViewed(Boolean isViewed) {
    this.isViewed = isViewed;
    return this;
  }

  /**
   * Get isViewed
   * @return isViewed
   */
  @javax.annotation.Nullable
  public Boolean getIsViewed() {
    return isViewed;
  }

  public void setIsViewed(Boolean isViewed) {
    this.isViewed = isViewed;
  }


  public DocumentSignerDetails order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public DocumentSignerDetails signerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
    return this;
  }

  /**
   * Get signerType
   * @return signerType
   */
  @javax.annotation.Nullable
  public SignerTypeEnum getSignerType() {
    return signerType;
  }

  public void setSignerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
  }


  public DocumentSignerDetails hostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
    return this;
  }

  /**
   * Get hostEmail
   * @return hostEmail
   */
  @javax.annotation.Nullable
  public String getHostEmail() {
    return hostEmail;
  }

  public void setHostEmail(String hostEmail) {
    this.hostEmail = hostEmail;
  }


  public DocumentSignerDetails hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * Get hostName
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public DocumentSignerDetails isReassigned(Boolean isReassigned) {
    this.isReassigned = isReassigned;
    return this;
  }

  /**
   * Get isReassigned
   * @return isReassigned
   */
  @javax.annotation.Nullable
  public Boolean getIsReassigned() {
    return isReassigned;
  }

  public void setIsReassigned(Boolean isReassigned) {
    this.isReassigned = isReassigned;
  }


  public DocumentSignerDetails privateMessage(String privateMessage) {
    this.privateMessage = privateMessage;
    return this;
  }

  /**
   * Get privateMessage
   * @return privateMessage
   */
  @javax.annotation.Nullable
  public String getPrivateMessage() {
    return privateMessage;
  }

  public void setPrivateMessage(String privateMessage) {
    this.privateMessage = privateMessage;
  }


  public DocumentSignerDetails allowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
    return this;
  }

  /**
   * Get allowFieldConfiguration
   * @return allowFieldConfiguration
   */
  @javax.annotation.Nullable
  public Boolean getAllowFieldConfiguration() {
    return allowFieldConfiguration;
  }

  public void setAllowFieldConfiguration(Boolean allowFieldConfiguration) {
    this.allowFieldConfiguration = allowFieldConfiguration;
  }


  public DocumentSignerDetails formFields(List<DocumentFormFields> formFields) {
    this.formFields = formFields;
    return this;
  }

  public DocumentSignerDetails addFormFieldsItem(DocumentFormFields formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

  /**
   * Get formFields
   * @return formFields
   */
  @javax.annotation.Nullable
  public List<DocumentFormFields> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<DocumentFormFields> formFields) {
    this.formFields = formFields;
  }


  public DocumentSignerDetails language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * &lt;p&gt;Description:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - None&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - English&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Spanish&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - German&lt;/li&gt;&lt;li&gt;&lt;i&gt;4&lt;/i&gt; - French&lt;/li&gt;&lt;li&gt;&lt;i&gt;5&lt;/i&gt; - Romanian&lt;/li&gt;&lt;li&gt;&lt;i&gt;6&lt;/i&gt; - Norwegian&lt;/li&gt;&lt;li&gt;&lt;i&gt;7&lt;/i&gt; - Bulgarian&lt;/li&gt;&lt;li&gt;&lt;i&gt;8&lt;/i&gt; - Italian&lt;/li&gt;&lt;li&gt;&lt;i&gt;9&lt;/i&gt; - Danish&lt;/li&gt;&lt;li&gt;&lt;i&gt;10&lt;/i&gt; - Polish&lt;/li&gt;&lt;li&gt;&lt;i&gt;11&lt;/i&gt; - Portuguese&lt;/li&gt;&lt;li&gt;&lt;i&gt;12&lt;/i&gt; - Czech&lt;/li&gt;&lt;li&gt;&lt;i&gt;13&lt;/i&gt; - Dutch&lt;/li&gt;&lt;li&gt;&lt;i&gt;14&lt;/i&gt; - Swedish&lt;/li&gt;&lt;li&gt;&lt;i&gt;15&lt;/i&gt; - Russian&lt;/li&gt;&lt;/ul&gt;
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public DocumentSignerDetails locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  public DocumentSignerDetails phoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public DocumentSignerDetails idVerification(IdVerification idVerification) {
    this.idVerification = idVerification;
    return this;
  }

  /**
   * Get idVerification
   * @return idVerification
   */
  @javax.annotation.Nullable
  public IdVerification getIdVerification() {
    return idVerification;
  }

  public void setIdVerification(IdVerification idVerification) {
    this.idVerification = idVerification;
  }


  public DocumentSignerDetails recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public DocumentSignerDetails authenticationRetryCount(Integer authenticationRetryCount) {
    this.authenticationRetryCount = authenticationRetryCount;
    return this;
  }

  /**
   * Get authenticationRetryCount
   * @return authenticationRetryCount
   */
  @javax.annotation.Nullable
  public Integer getAuthenticationRetryCount() {
    return authenticationRetryCount;
  }

  public void setAuthenticationRetryCount(Integer authenticationRetryCount) {
    this.authenticationRetryCount = authenticationRetryCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSignerDetails documentSignerDetails = (DocumentSignerDetails) o;
    return Objects.equals(this.signerName, documentSignerDetails.signerName) &&
        Objects.equals(this.signerRole, documentSignerDetails.signerRole) &&
        Objects.equals(this.signerEmail, documentSignerDetails.signerEmail) &&
        Objects.equals(this.status, documentSignerDetails.status) &&
        Objects.equals(this.enableAccessCode, documentSignerDetails.enableAccessCode) &&
        Objects.equals(this.isAuthenticationFailed, documentSignerDetails.isAuthenticationFailed) &&
        Objects.equals(this.enableEmailOTP, documentSignerDetails.enableEmailOTP) &&
        Objects.equals(this.authenticationType, documentSignerDetails.authenticationType) &&
        Objects.equals(this.isDeliveryFailed, documentSignerDetails.isDeliveryFailed) &&
        Objects.equals(this.isViewed, documentSignerDetails.isViewed) &&
        Objects.equals(this.order, documentSignerDetails.order) &&
        Objects.equals(this.signerType, documentSignerDetails.signerType) &&
        Objects.equals(this.hostEmail, documentSignerDetails.hostEmail) &&
        Objects.equals(this.hostName, documentSignerDetails.hostName) &&
        Objects.equals(this.isReassigned, documentSignerDetails.isReassigned) &&
        Objects.equals(this.privateMessage, documentSignerDetails.privateMessage) &&
        Objects.equals(this.allowFieldConfiguration, documentSignerDetails.allowFieldConfiguration) &&
        Objects.equals(this.formFields, documentSignerDetails.formFields) &&
        Objects.equals(this.language, documentSignerDetails.language) &&
        Objects.equals(this.locale, documentSignerDetails.locale) &&
        Objects.equals(this.phoneNumber, documentSignerDetails.phoneNumber) &&
        Objects.equals(this.idVerification, documentSignerDetails.idVerification) &&
        Objects.equals(this.recipientNotificationSettings, documentSignerDetails.recipientNotificationSettings) &&
        Objects.equals(this.authenticationRetryCount, documentSignerDetails.authenticationRetryCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerName, signerRole, signerEmail, status, enableAccessCode, isAuthenticationFailed, enableEmailOTP, authenticationType, isDeliveryFailed, isViewed, order, signerType, hostEmail, hostName, isReassigned, privateMessage, allowFieldConfiguration, formFields, language, locale, phoneNumber, idVerification, recipientNotificationSettings, authenticationRetryCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSignerDetails {\n");
    sb.append("    signerName: ").append(toIndentedString(signerName)).append("\n");
    sb.append("    signerRole: ").append(toIndentedString(signerRole)).append("\n");
    sb.append("    signerEmail: ").append(toIndentedString(signerEmail)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enableAccessCode: ").append(toIndentedString(enableAccessCode)).append("\n");
    sb.append("    isAuthenticationFailed: ").append(toIndentedString(isAuthenticationFailed)).append("\n");
    sb.append("    enableEmailOTP: ").append(toIndentedString(enableEmailOTP)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    isDeliveryFailed: ").append(toIndentedString(isDeliveryFailed)).append("\n");
    sb.append("    isViewed: ").append(toIndentedString(isViewed)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    signerType: ").append(toIndentedString(signerType)).append("\n");
    sb.append("    hostEmail: ").append(toIndentedString(hostEmail)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    isReassigned: ").append(toIndentedString(isReassigned)).append("\n");
    sb.append("    privateMessage: ").append(toIndentedString(privateMessage)).append("\n");
    sb.append("    allowFieldConfiguration: ").append(toIndentedString(allowFieldConfiguration)).append("\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    idVerification: ").append(toIndentedString(idVerification)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    authenticationRetryCount: ").append(toIndentedString(authenticationRetryCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (signerName != null) {
        if (isFileTypeOrListOfFiles(signerName)) {
            fileTypeFound = true;
        }

        if (signerName.getClass().equals(java.io.File.class) ||
            signerName.getClass().equals(Integer.class) ||
            signerName.getClass().equals(String.class) ||
            signerName.getClass().isEnum()) {
            map.put("signerName", signerName);
        } else if (isListOfFile(signerName)) {
            for(int i = 0; i< getListSize(signerName); i++) {
                map.put("signerName", signerName);
            }
        }
        else {
          map.put("signerName", signerName);
        }
    }
    if (signerRole != null) {
        if (isFileTypeOrListOfFiles(signerRole)) {
            fileTypeFound = true;
        }

        if (signerRole.getClass().equals(java.io.File.class) ||
            signerRole.getClass().equals(Integer.class) ||
            signerRole.getClass().equals(String.class) ||
            signerRole.getClass().isEnum()) {
            map.put("signerRole", signerRole);
        } else if (isListOfFile(signerRole)) {
            for(int i = 0; i< getListSize(signerRole); i++) {
                map.put("signerRole", signerRole);
            }
        }
        else {
          map.put("signerRole", signerRole);
        }
    }
    if (signerEmail != null) {
        if (isFileTypeOrListOfFiles(signerEmail)) {
            fileTypeFound = true;
        }

        if (signerEmail.getClass().equals(java.io.File.class) ||
            signerEmail.getClass().equals(Integer.class) ||
            signerEmail.getClass().equals(String.class) ||
            signerEmail.getClass().isEnum()) {
            map.put("signerEmail", signerEmail);
        } else if (isListOfFile(signerEmail)) {
            for(int i = 0; i< getListSize(signerEmail); i++) {
                map.put("signerEmail", signerEmail);
            }
        }
        else {
          map.put("signerEmail", signerEmail);
        }
    }
    if (status != null) {
        if (isFileTypeOrListOfFiles(status)) {
            fileTypeFound = true;
        }

        if (status.getClass().equals(java.io.File.class) ||
            status.getClass().equals(Integer.class) ||
            status.getClass().equals(String.class) ||
            status.getClass().isEnum()) {
            map.put("status", status);
        } else if (isListOfFile(status)) {
            for(int i = 0; i< getListSize(status); i++) {
                map.put("status", status);
            }
        }
        else {
          map.put("status", status);
        }
    }
    if (enableAccessCode != null) {
        if (isFileTypeOrListOfFiles(enableAccessCode)) {
            fileTypeFound = true;
        }

        if (enableAccessCode.getClass().equals(java.io.File.class) ||
            enableAccessCode.getClass().equals(Integer.class) ||
            enableAccessCode.getClass().equals(String.class) ||
            enableAccessCode.getClass().isEnum()) {
            map.put("enableAccessCode", enableAccessCode);
        } else if (isListOfFile(enableAccessCode)) {
            for(int i = 0; i< getListSize(enableAccessCode); i++) {
                map.put("enableAccessCode", enableAccessCode);
            }
        }
        else {
          map.put("enableAccessCode", enableAccessCode);
        }
    }
    if (isAuthenticationFailed != null) {
        if (isFileTypeOrListOfFiles(isAuthenticationFailed)) {
            fileTypeFound = true;
        }

        if (isAuthenticationFailed.getClass().equals(java.io.File.class) ||
            isAuthenticationFailed.getClass().equals(Integer.class) ||
            isAuthenticationFailed.getClass().equals(String.class) ||
            isAuthenticationFailed.getClass().isEnum()) {
            map.put("isAuthenticationFailed", isAuthenticationFailed);
        } else if (isListOfFile(isAuthenticationFailed)) {
            for(int i = 0; i< getListSize(isAuthenticationFailed); i++) {
                map.put("isAuthenticationFailed", isAuthenticationFailed);
            }
        }
        else {
          map.put("isAuthenticationFailed", isAuthenticationFailed);
        }
    }
    if (enableEmailOTP != null) {
        if (isFileTypeOrListOfFiles(enableEmailOTP)) {
            fileTypeFound = true;
        }

        if (enableEmailOTP.getClass().equals(java.io.File.class) ||
            enableEmailOTP.getClass().equals(Integer.class) ||
            enableEmailOTP.getClass().equals(String.class) ||
            enableEmailOTP.getClass().isEnum()) {
            map.put("enableEmailOTP", enableEmailOTP);
        } else if (isListOfFile(enableEmailOTP)) {
            for(int i = 0; i< getListSize(enableEmailOTP); i++) {
                map.put("enableEmailOTP", enableEmailOTP);
            }
        }
        else {
          map.put("enableEmailOTP", enableEmailOTP);
        }
    }
    if (authenticationType != null) {
        if (isFileTypeOrListOfFiles(authenticationType)) {
            fileTypeFound = true;
        }

        if (authenticationType.getClass().equals(java.io.File.class) ||
            authenticationType.getClass().equals(Integer.class) ||
            authenticationType.getClass().equals(String.class) ||
            authenticationType.getClass().isEnum()) {
            map.put("authenticationType", authenticationType);
        } else if (isListOfFile(authenticationType)) {
            for(int i = 0; i< getListSize(authenticationType); i++) {
                map.put("authenticationType", authenticationType);
            }
        }
        else {
          map.put("authenticationType", authenticationType);
        }
    }
    if (isDeliveryFailed != null) {
        if (isFileTypeOrListOfFiles(isDeliveryFailed)) {
            fileTypeFound = true;
        }

        if (isDeliveryFailed.getClass().equals(java.io.File.class) ||
            isDeliveryFailed.getClass().equals(Integer.class) ||
            isDeliveryFailed.getClass().equals(String.class) ||
            isDeliveryFailed.getClass().isEnum()) {
            map.put("isDeliveryFailed", isDeliveryFailed);
        } else if (isListOfFile(isDeliveryFailed)) {
            for(int i = 0; i< getListSize(isDeliveryFailed); i++) {
                map.put("isDeliveryFailed", isDeliveryFailed);
            }
        }
        else {
          map.put("isDeliveryFailed", isDeliveryFailed);
        }
    }
    if (isViewed != null) {
        if (isFileTypeOrListOfFiles(isViewed)) {
            fileTypeFound = true;
        }

        if (isViewed.getClass().equals(java.io.File.class) ||
            isViewed.getClass().equals(Integer.class) ||
            isViewed.getClass().equals(String.class) ||
            isViewed.getClass().isEnum()) {
            map.put("isViewed", isViewed);
        } else if (isListOfFile(isViewed)) {
            for(int i = 0; i< getListSize(isViewed); i++) {
                map.put("isViewed", isViewed);
            }
        }
        else {
          map.put("isViewed", isViewed);
        }
    }
    if (order != null) {
        if (isFileTypeOrListOfFiles(order)) {
            fileTypeFound = true;
        }

        if (order.getClass().equals(java.io.File.class) ||
            order.getClass().equals(Integer.class) ||
            order.getClass().equals(String.class) ||
            order.getClass().isEnum()) {
            map.put("order", order);
        } else if (isListOfFile(order)) {
            for(int i = 0; i< getListSize(order); i++) {
                map.put("order", order);
            }
        }
        else {
          map.put("order", order);
        }
    }
    if (signerType != null) {
        if (isFileTypeOrListOfFiles(signerType)) {
            fileTypeFound = true;
        }

        if (signerType.getClass().equals(java.io.File.class) ||
            signerType.getClass().equals(Integer.class) ||
            signerType.getClass().equals(String.class) ||
            signerType.getClass().isEnum()) {
            map.put("signerType", signerType);
        } else if (isListOfFile(signerType)) {
            for(int i = 0; i< getListSize(signerType); i++) {
                map.put("signerType", signerType);
            }
        }
        else {
          map.put("signerType", signerType);
        }
    }
    if (hostEmail != null) {
        if (isFileTypeOrListOfFiles(hostEmail)) {
            fileTypeFound = true;
        }

        if (hostEmail.getClass().equals(java.io.File.class) ||
            hostEmail.getClass().equals(Integer.class) ||
            hostEmail.getClass().equals(String.class) ||
            hostEmail.getClass().isEnum()) {
            map.put("hostEmail", hostEmail);
        } else if (isListOfFile(hostEmail)) {
            for(int i = 0; i< getListSize(hostEmail); i++) {
                map.put("hostEmail", hostEmail);
            }
        }
        else {
          map.put("hostEmail", hostEmail);
        }
    }
    if (hostName != null) {
        if (isFileTypeOrListOfFiles(hostName)) {
            fileTypeFound = true;
        }

        if (hostName.getClass().equals(java.io.File.class) ||
            hostName.getClass().equals(Integer.class) ||
            hostName.getClass().equals(String.class) ||
            hostName.getClass().isEnum()) {
            map.put("hostName", hostName);
        } else if (isListOfFile(hostName)) {
            for(int i = 0; i< getListSize(hostName); i++) {
                map.put("hostName", hostName);
            }
        }
        else {
          map.put("hostName", hostName);
        }
    }
    if (isReassigned != null) {
        if (isFileTypeOrListOfFiles(isReassigned)) {
            fileTypeFound = true;
        }

        if (isReassigned.getClass().equals(java.io.File.class) ||
            isReassigned.getClass().equals(Integer.class) ||
            isReassigned.getClass().equals(String.class) ||
            isReassigned.getClass().isEnum()) {
            map.put("isReassigned", isReassigned);
        } else if (isListOfFile(isReassigned)) {
            for(int i = 0; i< getListSize(isReassigned); i++) {
                map.put("isReassigned", isReassigned);
            }
        }
        else {
          map.put("isReassigned", isReassigned);
        }
    }
    if (privateMessage != null) {
        if (isFileTypeOrListOfFiles(privateMessage)) {
            fileTypeFound = true;
        }

        if (privateMessage.getClass().equals(java.io.File.class) ||
            privateMessage.getClass().equals(Integer.class) ||
            privateMessage.getClass().equals(String.class) ||
            privateMessage.getClass().isEnum()) {
            map.put("privateMessage", privateMessage);
        } else if (isListOfFile(privateMessage)) {
            for(int i = 0; i< getListSize(privateMessage); i++) {
                map.put("privateMessage", privateMessage);
            }
        }
        else {
          map.put("privateMessage", privateMessage);
        }
    }
    if (allowFieldConfiguration != null) {
        if (isFileTypeOrListOfFiles(allowFieldConfiguration)) {
            fileTypeFound = true;
        }

        if (allowFieldConfiguration.getClass().equals(java.io.File.class) ||
            allowFieldConfiguration.getClass().equals(Integer.class) ||
            allowFieldConfiguration.getClass().equals(String.class) ||
            allowFieldConfiguration.getClass().isEnum()) {
            map.put("allowFieldConfiguration", allowFieldConfiguration);
        } else if (isListOfFile(allowFieldConfiguration)) {
            for(int i = 0; i< getListSize(allowFieldConfiguration); i++) {
                map.put("allowFieldConfiguration", allowFieldConfiguration);
            }
        }
        else {
          map.put("allowFieldConfiguration", allowFieldConfiguration);
        }
    }
    if (formFields != null) {
        if (isFileTypeOrListOfFiles(formFields)) {
            fileTypeFound = true;
        }

        if (formFields.getClass().equals(java.io.File.class) ||
            formFields.getClass().equals(Integer.class) ||
            formFields.getClass().equals(String.class) ||
            formFields.getClass().isEnum()) {
            map.put("formFields", formFields);
        } else if (isListOfFile(formFields)) {
            for(int i = 0; i< getListSize(formFields); i++) {
                map.put("formFields", formFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formFields) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formFields", objectList);
        }
    }
    if (language != null) {
        if (isFileTypeOrListOfFiles(language)) {
            fileTypeFound = true;
        }

        if (language.getClass().equals(java.io.File.class) ||
            language.getClass().equals(Integer.class) ||
            language.getClass().equals(String.class) ||
            language.getClass().isEnum()) {
            map.put("language", language);
        } else if (isListOfFile(language)) {
            for(int i = 0; i< getListSize(language); i++) {
                map.put("language", language);
            }
        }
        else {
          map.put("language", language);
        }
    }
    if (locale != null) {
        if (isFileTypeOrListOfFiles(locale)) {
            fileTypeFound = true;
        }

        if (locale.getClass().equals(java.io.File.class) ||
            locale.getClass().equals(Integer.class) ||
            locale.getClass().equals(String.class) ||
            locale.getClass().isEnum()) {
            map.put("locale", locale);
        } else if (isListOfFile(locale)) {
            for(int i = 0; i< getListSize(locale); i++) {
                map.put("locale", locale);
            }
        }
        else {
          map.put("locale", locale);
        }
    }
    if (phoneNumber != null) {
        if (isFileTypeOrListOfFiles(phoneNumber)) {
            fileTypeFound = true;
        }

        if (phoneNumber.getClass().equals(java.io.File.class) ||
            phoneNumber.getClass().equals(Integer.class) ||
            phoneNumber.getClass().equals(String.class) ||
            phoneNumber.getClass().isEnum()) {
            map.put("phoneNumber", phoneNumber);
        } else if (isListOfFile(phoneNumber)) {
            for(int i = 0; i< getListSize(phoneNumber); i++) {
                map.put("phoneNumber", phoneNumber);
            }
        }
        else {
          map.put("phoneNumber", phoneNumber);
        }
    }
    if (idVerification != null) {
        if (isFileTypeOrListOfFiles(idVerification)) {
            fileTypeFound = true;
        }

        if (idVerification.getClass().equals(java.io.File.class) ||
            idVerification.getClass().equals(Integer.class) ||
            idVerification.getClass().equals(String.class) ||
            idVerification.getClass().isEnum()) {
            map.put("idVerification", idVerification);
        } else if (isListOfFile(idVerification)) {
            for(int i = 0; i< getListSize(idVerification); i++) {
                map.put("idVerification", idVerification);
            }
        }
        else {
          map.put("idVerification", idVerification);
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", recipientNotificationSettings);
        }
    }
    if (authenticationRetryCount != null) {
        if (isFileTypeOrListOfFiles(authenticationRetryCount)) {
            fileTypeFound = true;
        }

        if (authenticationRetryCount.getClass().equals(java.io.File.class) ||
            authenticationRetryCount.getClass().equals(Integer.class) ||
            authenticationRetryCount.getClass().equals(String.class) ||
            authenticationRetryCount.getClass().isEnum()) {
            map.put("authenticationRetryCount", authenticationRetryCount);
        } else if (isListOfFile(authenticationRetryCount)) {
            for(int i = 0; i< getListSize(authenticationRetryCount); i++) {
                map.put("authenticationRetryCount", authenticationRetryCount);
            }
        }
        else {
          map.put("authenticationRetryCount", authenticationRetryCount);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signerName");
    openapiFields.add("signerRole");
    openapiFields.add("signerEmail");
    openapiFields.add("status");
    openapiFields.add("enableAccessCode");
    openapiFields.add("isAuthenticationFailed");
    openapiFields.add("enableEmailOTP");
    openapiFields.add("authenticationType");
    openapiFields.add("isDeliveryFailed");
    openapiFields.add("isViewed");
    openapiFields.add("order");
    openapiFields.add("signerType");
    openapiFields.add("hostEmail");
    openapiFields.add("hostName");
    openapiFields.add("isReassigned");
    openapiFields.add("privateMessage");
    openapiFields.add("allowFieldConfiguration");
    openapiFields.add("formFields");
    openapiFields.add("language");
    openapiFields.add("locale");
    openapiFields.add("phoneNumber");
    openapiFields.add("idVerification");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("authenticationRetryCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSignerDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSignerDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSignerDetails is not found in the empty JSON string", DocumentSignerDetails.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("signerName") != null && !jsonObj.get("signerName").isJsonNull()) && !jsonObj.get("signerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerName").toString()));
      }
      if ((jsonObj.get("signerRole") != null && !jsonObj.get("signerRole").isJsonNull()) && !jsonObj.get("signerRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerRole").toString()));
      }
      if ((jsonObj.get("signerEmail") != null && !jsonObj.get("signerEmail").isJsonNull()) && !jsonObj.get("signerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerEmail").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) && !jsonObj.get("authenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationType").toString()));
      }
      // validate the optional field `authenticationType`
      if (jsonObj.get("authenticationType") != null && !jsonObj.get("authenticationType").isJsonNull()) {
        AuthenticationTypeEnum.validateJsonElement(jsonObj.get("authenticationType"));
      }
      if ((jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) && !jsonObj.get("signerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerType").toString()));
      }
      // validate the optional field `signerType`
      if (jsonObj.get("signerType") != null && !jsonObj.get("signerType").isJsonNull()) {
        SignerTypeEnum.validateJsonElement(jsonObj.get("signerType"));
      }
      if ((jsonObj.get("hostEmail") != null && !jsonObj.get("hostEmail").isJsonNull()) && !jsonObj.get("hostEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostEmail").toString()));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("privateMessage") != null && !jsonObj.get("privateMessage").isJsonNull()) && !jsonObj.get("privateMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateMessage").toString()));
      }
      if (jsonObj.get("formFields") != null && !jsonObj.get("formFields").isJsonNull()) {
        JsonArray jsonArrayformFields = jsonObj.getAsJsonArray("formFields");
        if (jsonArrayformFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formFields` to be an array in the JSON string but got `%s`", jsonObj.get("formFields").toString()));
          }

          // validate the optional field `formFields` (array)
          for (int i = 0; i < jsonArrayformFields.size(); i++) {
            DocumentFormFields.validateJsonElement(jsonArrayformFields.get(i));
          };
        }
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      // validate the optional field `idVerification`
      if (jsonObj.get("idVerification") != null && !jsonObj.get("idVerification").isJsonNull()) {
        IdVerification.validateJsonElement(jsonObj.get("idVerification"));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSignerDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSignerDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSignerDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSignerDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSignerDetails>() {
           @Override
           public void write(JsonWriter out, DocumentSignerDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSignerDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSignerDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSignerDetails
   * @throws IOException if the JSON string is invalid with respect to DocumentSignerDetails
   */
  public static DocumentSignerDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSignerDetails.class);
  }

  /**
   * Convert an instance of DocumentSignerDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

