/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.AttachmentInfo;
import com.boldsign.model.Font;
import com.boldsign.model.FormulaFieldSettings;
import com.boldsign.model.ImageInfo;
import com.boldsign.model.Size;
import com.boldsign.model.TextTagOffset;
import com.boldsign.model.Validation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * TextTagDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TextTagDefinition {
  public static final String SERIALIZED_NAME_DEFINITION_ID = "definitionId";
  @SerializedName(SERIALIZED_NAME_DEFINITION_ID)
  private String definitionId;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SIGNATURE("Signature"),
    
    INITIAL("Initial"),
    
    CHECK_BOX("CheckBox"),
    
    TEXT_BOX("TextBox"),
    
    LABEL("Label"),
    
    DATE_SIGNED("DateSigned"),
    
    RADIO_BUTTON("RadioButton"),
    
    IMAGE("Image"),
    
    ATTACHMENT("Attachment"),
    
    EDITABLE_DATE("EditableDate"),
    
    HYPERLINK("Hyperlink"),
    
    DROPDOWN("Dropdown"),
    
    TITLE("Title"),
    
    COMPANY("Company"),
    
    FORMULA("Formula");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SIGNER_INDEX = "signerIndex";
  @SerializedName(SERIALIZED_NAME_SIGNER_INDEX)
  private Integer signerIndex;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private Font font;

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  private Validation validation;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  public static final String SERIALIZED_NAME_RADIO_GROUP_NAME = "radioGroupName";
  @SerializedName(SERIALIZED_NAME_RADIO_GROUP_NAME)
  private String radioGroupName;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_DROPDOWN_OPTIONS = "dropdownOptions";
  @SerializedName(SERIALIZED_NAME_DROPDOWN_OPTIONS)
  private List<String> dropdownOptions;

  public static final String SERIALIZED_NAME_IMAGE_INFO = "imageInfo";
  @SerializedName(SERIALIZED_NAME_IMAGE_INFO)
  private ImageInfo imageInfo;

  public static final String SERIALIZED_NAME_HYPERLINK_TEXT = "hyperlinkText";
  @SerializedName(SERIALIZED_NAME_HYPERLINK_TEXT)
  private String hyperlinkText;

  public static final String SERIALIZED_NAME_ATTACHMENT_INFO = "attachmentInfo";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_INFO)
  private AttachmentInfo attachmentInfo;

  public static final String SERIALIZED_NAME_BACKGROUND_HEX_COLOR = "backgroundHexColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_HEX_COLOR)
  private String backgroundHexColor;

  public static final String SERIALIZED_NAME_IS_READ_ONLY = "isReadOnly";
  @SerializedName(SERIALIZED_NAME_IS_READ_ONLY)
  private Boolean isReadOnly;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private TextTagOffset offset;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TAB_INDEX = "tabIndex";
  @SerializedName(SERIALIZED_NAME_TAB_INDEX)
  private Integer tabIndex;

  public static final String SERIALIZED_NAME_DATA_SYNC_TAG = "dataSyncTag";
  @SerializedName(SERIALIZED_NAME_DATA_SYNC_TAG)
  private String dataSyncTag;

  /**
   * Gets or Sets textAlign
   */
  @JsonAdapter(TextAlignEnum.Adapter.class)
  public enum TextAlignEnum {
    LEFT("Left"),
    
    CENTER("Center"),
    
    RIGHT("Right");

    private String value;

    TextAlignEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextAlignEnum fromValue(String value) {
      for (TextAlignEnum b : TextAlignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextAlignEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextAlignEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextAlignEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextAlignEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextAlignEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_ALIGN = "textAlign";
  @SerializedName(SERIALIZED_NAME_TEXT_ALIGN)
  private TextAlignEnum textAlign;

  /**
   * Gets or Sets textDirection
   */
  @JsonAdapter(TextDirectionEnum.Adapter.class)
  public enum TextDirectionEnum {
    LTR("LTR"),
    
    RTL("RTL");

    private String value;

    TextDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextDirectionEnum fromValue(String value) {
      for (TextDirectionEnum b : TextDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_DIRECTION = "textDirection";
  @SerializedName(SERIALIZED_NAME_TEXT_DIRECTION)
  private TextDirectionEnum textDirection;

  public static final String SERIALIZED_NAME_CHARACTER_SPACING = "characterSpacing";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SPACING)
  private Float characterSpacing;

  public static final String SERIALIZED_NAME_CHARACTER_LIMIT = "characterLimit";
  @SerializedName(SERIALIZED_NAME_CHARACTER_LIMIT)
  private Integer characterLimit;

  public static final String SERIALIZED_NAME_FORMULA_FIELD_SETTINGS = "formulaFieldSettings";
  @SerializedName(SERIALIZED_NAME_FORMULA_FIELD_SETTINGS)
  private FormulaFieldSettings formulaFieldSettings;

  /**
   * Gets or Sets resizeOption
   */
  @JsonAdapter(ResizeOptionEnum.Adapter.class)
  public enum ResizeOptionEnum {
    GROW_VERTICALLY("GrowVertically"),
    
    GROW_HORIZONTALLY("GrowHorizontally"),
    
    GROW_BOTH("GrowBoth"),
    
    FIXED("Fixed"),
    
    AUTO_RESIZE_FONT("AutoResizeFont");

    private String value;

    ResizeOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResizeOptionEnum fromValue(String value) {
      for (ResizeOptionEnum b : ResizeOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResizeOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResizeOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResizeOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResizeOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResizeOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESIZE_OPTION = "resizeOption";
  @SerializedName(SERIALIZED_NAME_RESIZE_OPTION)
  private ResizeOptionEnum resizeOption;

  public TextTagDefinition() {
  }

  public TextTagDefinition definitionId(String definitionId) {
    this.definitionId = definitionId;
    return this;
  }

  /**
   * Get definitionId
   * @return definitionId
   */
  @javax.annotation.Nonnull
  public String getDefinitionId() {
    return definitionId;
  }

  public void setDefinitionId(String definitionId) {
    this.definitionId = definitionId;
  }


  public TextTagDefinition type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public TextTagDefinition signerIndex(Integer signerIndex) {
    this.signerIndex = signerIndex;
    return this;
  }

  /**
   * Get signerIndex
   * minimum: 1
   * maximum: 50
   * @return signerIndex
   */
  @javax.annotation.Nonnull
  public Integer getSignerIndex() {
    return signerIndex;
  }

  public void setSignerIndex(Integer signerIndex) {
    this.signerIndex = signerIndex;
  }


  public TextTagDefinition isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Get isRequired
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public TextTagDefinition placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

  /**
   * Get placeholder
   * @return placeholder
   */
  @javax.annotation.Nullable
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }


  public TextTagDefinition fieldId(String fieldId) {
    this.fieldId = fieldId;
    return this;
  }

  /**
   * Get fieldId
   * @return fieldId
   */
  @javax.annotation.Nullable
  public String getFieldId() {
    return fieldId;
  }

  public void setFieldId(String fieldId) {
    this.fieldId = fieldId;
  }


  public TextTagDefinition font(Font font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public Font getFont() {
    return font;
  }

  public void setFont(Font font) {
    this.font = font;
  }


  public TextTagDefinition validation(Validation validation) {
    this.validation = validation;
    return this;
  }

  /**
   * Get validation
   * @return validation
   */
  @javax.annotation.Nullable
  public Validation getValidation() {
    return validation;
  }

  public void setValidation(Validation validation) {
    this.validation = validation;
  }


  public TextTagDefinition size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public TextTagDefinition dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public TextTagDefinition timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public TextTagDefinition radioGroupName(String radioGroupName) {
    this.radioGroupName = radioGroupName;
    return this;
  }

  /**
   * Get radioGroupName
   * @return radioGroupName
   */
  @javax.annotation.Nullable
  public String getRadioGroupName() {
    return radioGroupName;
  }

  public void setRadioGroupName(String radioGroupName) {
    this.radioGroupName = radioGroupName;
  }


  public TextTagDefinition groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public TextTagDefinition value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public TextTagDefinition dropdownOptions(List<String> dropdownOptions) {
    this.dropdownOptions = dropdownOptions;
    return this;
  }

  public TextTagDefinition addDropdownOptionsItem(String dropdownOptionsItem) {
    if (this.dropdownOptions == null) {
      this.dropdownOptions = new ArrayList<>();
    }
    this.dropdownOptions.add(dropdownOptionsItem);
    return this;
  }

  /**
   * Get dropdownOptions
   * @return dropdownOptions
   */
  @javax.annotation.Nullable
  public List<String> getDropdownOptions() {
    return dropdownOptions;
  }

  public void setDropdownOptions(List<String> dropdownOptions) {
    this.dropdownOptions = dropdownOptions;
  }


  public TextTagDefinition imageInfo(ImageInfo imageInfo) {
    this.imageInfo = imageInfo;
    return this;
  }

  /**
   * Get imageInfo
   * @return imageInfo
   */
  @javax.annotation.Nullable
  public ImageInfo getImageInfo() {
    return imageInfo;
  }

  public void setImageInfo(ImageInfo imageInfo) {
    this.imageInfo = imageInfo;
  }


  public TextTagDefinition hyperlinkText(String hyperlinkText) {
    this.hyperlinkText = hyperlinkText;
    return this;
  }

  /**
   * Get hyperlinkText
   * @return hyperlinkText
   */
  @javax.annotation.Nullable
  public String getHyperlinkText() {
    return hyperlinkText;
  }

  public void setHyperlinkText(String hyperlinkText) {
    this.hyperlinkText = hyperlinkText;
  }


  public TextTagDefinition attachmentInfo(AttachmentInfo attachmentInfo) {
    this.attachmentInfo = attachmentInfo;
    return this;
  }

  /**
   * Get attachmentInfo
   * @return attachmentInfo
   */
  @javax.annotation.Nullable
  public AttachmentInfo getAttachmentInfo() {
    return attachmentInfo;
  }

  public void setAttachmentInfo(AttachmentInfo attachmentInfo) {
    this.attachmentInfo = attachmentInfo;
  }


  public TextTagDefinition backgroundHexColor(String backgroundHexColor) {
    this.backgroundHexColor = backgroundHexColor;
    return this;
  }

  /**
   * Get backgroundHexColor
   * @return backgroundHexColor
   */
  @javax.annotation.Nullable
  public String getBackgroundHexColor() {
    return backgroundHexColor;
  }

  public void setBackgroundHexColor(String backgroundHexColor) {
    this.backgroundHexColor = backgroundHexColor;
  }


  public TextTagDefinition isReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    return this;
  }

  /**
   * Get isReadOnly
   * @return isReadOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsReadOnly() {
    return isReadOnly;
  }

  public void setIsReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
  }


  public TextTagDefinition offset(TextTagOffset offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public TextTagOffset getOffset() {
    return offset;
  }

  public void setOffset(TextTagOffset offset) {
    this.offset = offset;
  }


  public TextTagDefinition label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public TextTagDefinition tabIndex(Integer tabIndex) {
    this.tabIndex = tabIndex;
    return this;
  }

  /**
   * Get tabIndex
   * minimum: -1
   * maximum: 2147483647
   * @return tabIndex
   */
  @javax.annotation.Nullable
  public Integer getTabIndex() {
    return tabIndex;
  }

  public void setTabIndex(Integer tabIndex) {
    this.tabIndex = tabIndex;
  }


  public TextTagDefinition dataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
    return this;
  }

  /**
   * Get dataSyncTag
   * @return dataSyncTag
   */
  @javax.annotation.Nullable
  public String getDataSyncTag() {
    return dataSyncTag;
  }

  public void setDataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
  }


  public TextTagDefinition textAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
    return this;
  }

  /**
   * Get textAlign
   * @return textAlign
   */
  @javax.annotation.Nullable
  public TextAlignEnum getTextAlign() {
    return textAlign;
  }

  public void setTextAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
  }


  public TextTagDefinition textDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
    return this;
  }

  /**
   * Get textDirection
   * @return textDirection
   */
  @javax.annotation.Nullable
  public TextDirectionEnum getTextDirection() {
    return textDirection;
  }

  public void setTextDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
  }


  public TextTagDefinition characterSpacing(Float characterSpacing) {
    this.characterSpacing = characterSpacing;
    return this;
  }

  /**
   * Get characterSpacing
   * @return characterSpacing
   */
  @javax.annotation.Nullable
  public Float getCharacterSpacing() {
    return characterSpacing;
  }

  public void setCharacterSpacing(Float characterSpacing) {
    this.characterSpacing = characterSpacing;
  }


  public TextTagDefinition characterLimit(Integer characterLimit) {
    this.characterLimit = characterLimit;
    return this;
  }

  /**
   * Get characterLimit
   * minimum: 0
   * maximum: 2147483647
   * @return characterLimit
   */
  @javax.annotation.Nullable
  public Integer getCharacterLimit() {
    return characterLimit;
  }

  public void setCharacterLimit(Integer characterLimit) {
    this.characterLimit = characterLimit;
  }


  public TextTagDefinition formulaFieldSettings(FormulaFieldSettings formulaFieldSettings) {
    this.formulaFieldSettings = formulaFieldSettings;
    return this;
  }

  /**
   * Get formulaFieldSettings
   * @return formulaFieldSettings
   */
  @javax.annotation.Nullable
  public FormulaFieldSettings getFormulaFieldSettings() {
    return formulaFieldSettings;
  }

  public void setFormulaFieldSettings(FormulaFieldSettings formulaFieldSettings) {
    this.formulaFieldSettings = formulaFieldSettings;
  }


  public TextTagDefinition resizeOption(ResizeOptionEnum resizeOption) {
    this.resizeOption = resizeOption;
    return this;
  }

  /**
   * Get resizeOption
   * @return resizeOption
   */
  @javax.annotation.Nullable
  public ResizeOptionEnum getResizeOption() {
    return resizeOption;
  }

  public void setResizeOption(ResizeOptionEnum resizeOption) {
    this.resizeOption = resizeOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextTagDefinition textTagDefinition = (TextTagDefinition) o;
    return Objects.equals(this.definitionId, textTagDefinition.definitionId) &&
        Objects.equals(this.type, textTagDefinition.type) &&
        Objects.equals(this.signerIndex, textTagDefinition.signerIndex) &&
        Objects.equals(this.isRequired, textTagDefinition.isRequired) &&
        Objects.equals(this.placeholder, textTagDefinition.placeholder) &&
        Objects.equals(this.fieldId, textTagDefinition.fieldId) &&
        Objects.equals(this.font, textTagDefinition.font) &&
        Objects.equals(this.validation, textTagDefinition.validation) &&
        Objects.equals(this.size, textTagDefinition.size) &&
        Objects.equals(this.dateFormat, textTagDefinition.dateFormat) &&
        Objects.equals(this.timeFormat, textTagDefinition.timeFormat) &&
        Objects.equals(this.radioGroupName, textTagDefinition.radioGroupName) &&
        Objects.equals(this.groupName, textTagDefinition.groupName) &&
        Objects.equals(this.value, textTagDefinition.value) &&
        Objects.equals(this.dropdownOptions, textTagDefinition.dropdownOptions) &&
        Objects.equals(this.imageInfo, textTagDefinition.imageInfo) &&
        Objects.equals(this.hyperlinkText, textTagDefinition.hyperlinkText) &&
        Objects.equals(this.attachmentInfo, textTagDefinition.attachmentInfo) &&
        Objects.equals(this.backgroundHexColor, textTagDefinition.backgroundHexColor) &&
        Objects.equals(this.isReadOnly, textTagDefinition.isReadOnly) &&
        Objects.equals(this.offset, textTagDefinition.offset) &&
        Objects.equals(this.label, textTagDefinition.label) &&
        Objects.equals(this.tabIndex, textTagDefinition.tabIndex) &&
        Objects.equals(this.dataSyncTag, textTagDefinition.dataSyncTag) &&
        Objects.equals(this.textAlign, textTagDefinition.textAlign) &&
        Objects.equals(this.textDirection, textTagDefinition.textDirection) &&
        Objects.equals(this.characterSpacing, textTagDefinition.characterSpacing) &&
        Objects.equals(this.characterLimit, textTagDefinition.characterLimit) &&
        Objects.equals(this.formulaFieldSettings, textTagDefinition.formulaFieldSettings) &&
        Objects.equals(this.resizeOption, textTagDefinition.resizeOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definitionId, type, signerIndex, isRequired, placeholder, fieldId, font, validation, size, dateFormat, timeFormat, radioGroupName, groupName, value, dropdownOptions, imageInfo, hyperlinkText, attachmentInfo, backgroundHexColor, isReadOnly, offset, label, tabIndex, dataSyncTag, textAlign, textDirection, characterSpacing, characterLimit, formulaFieldSettings, resizeOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextTagDefinition {\n");
    sb.append("    definitionId: ").append(toIndentedString(definitionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    signerIndex: ").append(toIndentedString(signerIndex)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    radioGroupName: ").append(toIndentedString(radioGroupName)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    dropdownOptions: ").append(toIndentedString(dropdownOptions)).append("\n");
    sb.append("    imageInfo: ").append(toIndentedString(imageInfo)).append("\n");
    sb.append("    hyperlinkText: ").append(toIndentedString(hyperlinkText)).append("\n");
    sb.append("    attachmentInfo: ").append(toIndentedString(attachmentInfo)).append("\n");
    sb.append("    backgroundHexColor: ").append(toIndentedString(backgroundHexColor)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    tabIndex: ").append(toIndentedString(tabIndex)).append("\n");
    sb.append("    dataSyncTag: ").append(toIndentedString(dataSyncTag)).append("\n");
    sb.append("    textAlign: ").append(toIndentedString(textAlign)).append("\n");
    sb.append("    textDirection: ").append(toIndentedString(textDirection)).append("\n");
    sb.append("    characterSpacing: ").append(toIndentedString(characterSpacing)).append("\n");
    sb.append("    characterLimit: ").append(toIndentedString(characterLimit)).append("\n");
    sb.append("    formulaFieldSettings: ").append(toIndentedString(formulaFieldSettings)).append("\n");
    sb.append("    resizeOption: ").append(toIndentedString(resizeOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (definitionId != null) {
        if (isFileTypeOrListOfFiles(definitionId)) {
            fileTypeFound = true;
        }

        if (definitionId.getClass().equals(java.io.File.class) ||
            definitionId.getClass().equals(Integer.class) ||
            definitionId.getClass().equals(String.class) ||
            definitionId.getClass().equals(java.net.URI.class)||
            definitionId.getClass().isEnum()) {
            map.put("definitionId", definitionId);
        } else if (isListOfFile(definitionId)) {
            for(int i = 0; i< getListSize(definitionId); i++) {
                map.put("definitionId", definitionId);
            }
        }
        else {
          map.put("definitionId", JSON.serialize(definitionId));
        }
    }
    if (type != null) {
        if (isFileTypeOrListOfFiles(type)) {
            fileTypeFound = true;
        }

        if (type.getClass().equals(java.io.File.class) ||
            type.getClass().equals(Integer.class) ||
            type.getClass().equals(String.class) ||
            type.getClass().equals(java.net.URI.class)||
            type.getClass().isEnum()) {
            map.put("type", type);
        } else if (isListOfFile(type)) {
            for(int i = 0; i< getListSize(type); i++) {
                map.put("type", type);
            }
        }
        else {
          map.put("type", JSON.serialize(type));
        }
    }
    if (signerIndex != null) {
        if (isFileTypeOrListOfFiles(signerIndex)) {
            fileTypeFound = true;
        }

        if (signerIndex.getClass().equals(java.io.File.class) ||
            signerIndex.getClass().equals(Integer.class) ||
            signerIndex.getClass().equals(String.class) ||
            signerIndex.getClass().equals(java.net.URI.class)||
            signerIndex.getClass().isEnum()) {
            map.put("signerIndex", signerIndex);
        } else if (isListOfFile(signerIndex)) {
            for(int i = 0; i< getListSize(signerIndex); i++) {
                map.put("signerIndex", signerIndex);
            }
        }
        else {
          map.put("signerIndex", JSON.serialize(signerIndex));
        }
    }
    if (isRequired != null) {
        if (isFileTypeOrListOfFiles(isRequired)) {
            fileTypeFound = true;
        }

        if (isRequired.getClass().equals(java.io.File.class) ||
            isRequired.getClass().equals(Integer.class) ||
            isRequired.getClass().equals(String.class) ||
            isRequired.getClass().equals(java.net.URI.class)||
            isRequired.getClass().isEnum()) {
            map.put("isRequired", isRequired);
        } else if (isListOfFile(isRequired)) {
            for(int i = 0; i< getListSize(isRequired); i++) {
                map.put("isRequired", isRequired);
            }
        }
        else {
          map.put("isRequired", JSON.serialize(isRequired));
        }
    }
    if (placeholder != null) {
        if (isFileTypeOrListOfFiles(placeholder)) {
            fileTypeFound = true;
        }

        if (placeholder.getClass().equals(java.io.File.class) ||
            placeholder.getClass().equals(Integer.class) ||
            placeholder.getClass().equals(String.class) ||
            placeholder.getClass().equals(java.net.URI.class)||
            placeholder.getClass().isEnum()) {
            map.put("placeholder", placeholder);
        } else if (isListOfFile(placeholder)) {
            for(int i = 0; i< getListSize(placeholder); i++) {
                map.put("placeholder", placeholder);
            }
        }
        else {
          map.put("placeholder", JSON.serialize(placeholder));
        }
    }
    if (fieldId != null) {
        if (isFileTypeOrListOfFiles(fieldId)) {
            fileTypeFound = true;
        }

        if (fieldId.getClass().equals(java.io.File.class) ||
            fieldId.getClass().equals(Integer.class) ||
            fieldId.getClass().equals(String.class) ||
            fieldId.getClass().equals(java.net.URI.class)||
            fieldId.getClass().isEnum()) {
            map.put("fieldId", fieldId);
        } else if (isListOfFile(fieldId)) {
            for(int i = 0; i< getListSize(fieldId); i++) {
                map.put("fieldId", fieldId);
            }
        }
        else {
          map.put("fieldId", JSON.serialize(fieldId));
        }
    }
    if (font != null) {
        if (isFileTypeOrListOfFiles(font)) {
            fileTypeFound = true;
        }

        if (font.getClass().equals(java.io.File.class) ||
            font.getClass().equals(Integer.class) ||
            font.getClass().equals(String.class) ||
            font.getClass().equals(java.net.URI.class)||
            font.getClass().isEnum()) {
            map.put("font", font);
        } else if (isListOfFile(font)) {
            for(int i = 0; i< getListSize(font); i++) {
                map.put("font", font);
            }
        }
        else {
          map.put("font", JSON.serialize(font));
        }
    }
    if (validation != null) {
        if (isFileTypeOrListOfFiles(validation)) {
            fileTypeFound = true;
        }

        if (validation.getClass().equals(java.io.File.class) ||
            validation.getClass().equals(Integer.class) ||
            validation.getClass().equals(String.class) ||
            validation.getClass().equals(java.net.URI.class)||
            validation.getClass().isEnum()) {
            map.put("validation", validation);
        } else if (isListOfFile(validation)) {
            for(int i = 0; i< getListSize(validation); i++) {
                map.put("validation", validation);
            }
        }
        else {
          map.put("validation", JSON.serialize(validation));
        }
    }
    if (size != null) {
        if (isFileTypeOrListOfFiles(size)) {
            fileTypeFound = true;
        }

        if (size.getClass().equals(java.io.File.class) ||
            size.getClass().equals(Integer.class) ||
            size.getClass().equals(String.class) ||
            size.getClass().equals(java.net.URI.class)||
            size.getClass().isEnum()) {
            map.put("size", size);
        } else if (isListOfFile(size)) {
            for(int i = 0; i< getListSize(size); i++) {
                map.put("size", size);
            }
        }
        else {
          map.put("size", JSON.serialize(size));
        }
    }
    if (dateFormat != null) {
        if (isFileTypeOrListOfFiles(dateFormat)) {
            fileTypeFound = true;
        }

        if (dateFormat.getClass().equals(java.io.File.class) ||
            dateFormat.getClass().equals(Integer.class) ||
            dateFormat.getClass().equals(String.class) ||
            dateFormat.getClass().equals(java.net.URI.class)||
            dateFormat.getClass().isEnum()) {
            map.put("dateFormat", dateFormat);
        } else if (isListOfFile(dateFormat)) {
            for(int i = 0; i< getListSize(dateFormat); i++) {
                map.put("dateFormat", dateFormat);
            }
        }
        else {
          map.put("dateFormat", JSON.serialize(dateFormat));
        }
    }
    if (timeFormat != null) {
        if (isFileTypeOrListOfFiles(timeFormat)) {
            fileTypeFound = true;
        }

        if (timeFormat.getClass().equals(java.io.File.class) ||
            timeFormat.getClass().equals(Integer.class) ||
            timeFormat.getClass().equals(String.class) ||
            timeFormat.getClass().equals(java.net.URI.class)||
            timeFormat.getClass().isEnum()) {
            map.put("timeFormat", timeFormat);
        } else if (isListOfFile(timeFormat)) {
            for(int i = 0; i< getListSize(timeFormat); i++) {
                map.put("timeFormat", timeFormat);
            }
        }
        else {
          map.put("timeFormat", JSON.serialize(timeFormat));
        }
    }
    if (radioGroupName != null) {
        if (isFileTypeOrListOfFiles(radioGroupName)) {
            fileTypeFound = true;
        }

        if (radioGroupName.getClass().equals(java.io.File.class) ||
            radioGroupName.getClass().equals(Integer.class) ||
            radioGroupName.getClass().equals(String.class) ||
            radioGroupName.getClass().equals(java.net.URI.class)||
            radioGroupName.getClass().isEnum()) {
            map.put("radioGroupName", radioGroupName);
        } else if (isListOfFile(radioGroupName)) {
            for(int i = 0; i< getListSize(radioGroupName); i++) {
                map.put("radioGroupName", radioGroupName);
            }
        }
        else {
          map.put("radioGroupName", JSON.serialize(radioGroupName));
        }
    }
    if (groupName != null) {
        if (isFileTypeOrListOfFiles(groupName)) {
            fileTypeFound = true;
        }

        if (groupName.getClass().equals(java.io.File.class) ||
            groupName.getClass().equals(Integer.class) ||
            groupName.getClass().equals(String.class) ||
            groupName.getClass().equals(java.net.URI.class)||
            groupName.getClass().isEnum()) {
            map.put("groupName", groupName);
        } else if (isListOfFile(groupName)) {
            for(int i = 0; i< getListSize(groupName); i++) {
                map.put("groupName", groupName);
            }
        }
        else {
          map.put("groupName", JSON.serialize(groupName));
        }
    }
    if (value != null) {
        if (isFileTypeOrListOfFiles(value)) {
            fileTypeFound = true;
        }

        if (value.getClass().equals(java.io.File.class) ||
            value.getClass().equals(Integer.class) ||
            value.getClass().equals(String.class) ||
            value.getClass().equals(java.net.URI.class)||
            value.getClass().isEnum()) {
            map.put("value", value);
        } else if (isListOfFile(value)) {
            for(int i = 0; i< getListSize(value); i++) {
                map.put("value", value);
            }
        }
        else {
          map.put("value", JSON.serialize(value));
        }
    }
    if (dropdownOptions != null) {
        if (isFileTypeOrListOfFiles(dropdownOptions)) {
            fileTypeFound = true;
        }

        if (dropdownOptions.getClass().equals(java.io.File.class) ||
            dropdownOptions.getClass().equals(Integer.class) ||
            dropdownOptions.getClass().equals(String.class) ||
            dropdownOptions.getClass().equals(java.net.URI.class)||
            dropdownOptions.getClass().isEnum()) {
            map.put("dropdownOptions", dropdownOptions);
        } else if (isListOfFile(dropdownOptions)) {
            for(int i = 0; i< getListSize(dropdownOptions); i++) {
                map.put("dropdownOptions", dropdownOptions);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : dropdownOptions) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("dropdownOptions", objectList);
        }
    }
    if (imageInfo != null) {
        if (isFileTypeOrListOfFiles(imageInfo)) {
            fileTypeFound = true;
        }

        if (imageInfo.getClass().equals(java.io.File.class) ||
            imageInfo.getClass().equals(Integer.class) ||
            imageInfo.getClass().equals(String.class) ||
            imageInfo.getClass().equals(java.net.URI.class)||
            imageInfo.getClass().isEnum()) {
            map.put("imageInfo", imageInfo);
        } else if (isListOfFile(imageInfo)) {
            for(int i = 0; i< getListSize(imageInfo); i++) {
                map.put("imageInfo", imageInfo);
            }
        }
        else {
          map.put("imageInfo", JSON.serialize(imageInfo));
        }
    }
    if (hyperlinkText != null) {
        if (isFileTypeOrListOfFiles(hyperlinkText)) {
            fileTypeFound = true;
        }

        if (hyperlinkText.getClass().equals(java.io.File.class) ||
            hyperlinkText.getClass().equals(Integer.class) ||
            hyperlinkText.getClass().equals(String.class) ||
            hyperlinkText.getClass().equals(java.net.URI.class)||
            hyperlinkText.getClass().isEnum()) {
            map.put("hyperlinkText", hyperlinkText);
        } else if (isListOfFile(hyperlinkText)) {
            for(int i = 0; i< getListSize(hyperlinkText); i++) {
                map.put("hyperlinkText", hyperlinkText);
            }
        }
        else {
          map.put("hyperlinkText", JSON.serialize(hyperlinkText));
        }
    }
    if (attachmentInfo != null) {
        if (isFileTypeOrListOfFiles(attachmentInfo)) {
            fileTypeFound = true;
        }

        if (attachmentInfo.getClass().equals(java.io.File.class) ||
            attachmentInfo.getClass().equals(Integer.class) ||
            attachmentInfo.getClass().equals(String.class) ||
            attachmentInfo.getClass().equals(java.net.URI.class)||
            attachmentInfo.getClass().isEnum()) {
            map.put("attachmentInfo", attachmentInfo);
        } else if (isListOfFile(attachmentInfo)) {
            for(int i = 0; i< getListSize(attachmentInfo); i++) {
                map.put("attachmentInfo", attachmentInfo);
            }
        }
        else {
          map.put("attachmentInfo", JSON.serialize(attachmentInfo));
        }
    }
    if (backgroundHexColor != null) {
        if (isFileTypeOrListOfFiles(backgroundHexColor)) {
            fileTypeFound = true;
        }

        if (backgroundHexColor.getClass().equals(java.io.File.class) ||
            backgroundHexColor.getClass().equals(Integer.class) ||
            backgroundHexColor.getClass().equals(String.class) ||
            backgroundHexColor.getClass().equals(java.net.URI.class)||
            backgroundHexColor.getClass().isEnum()) {
            map.put("backgroundHexColor", backgroundHexColor);
        } else if (isListOfFile(backgroundHexColor)) {
            for(int i = 0; i< getListSize(backgroundHexColor); i++) {
                map.put("backgroundHexColor", backgroundHexColor);
            }
        }
        else {
          map.put("backgroundHexColor", JSON.serialize(backgroundHexColor));
        }
    }
    if (isReadOnly != null) {
        if (isFileTypeOrListOfFiles(isReadOnly)) {
            fileTypeFound = true;
        }

        if (isReadOnly.getClass().equals(java.io.File.class) ||
            isReadOnly.getClass().equals(Integer.class) ||
            isReadOnly.getClass().equals(String.class) ||
            isReadOnly.getClass().equals(java.net.URI.class)||
            isReadOnly.getClass().isEnum()) {
            map.put("isReadOnly", isReadOnly);
        } else if (isListOfFile(isReadOnly)) {
            for(int i = 0; i< getListSize(isReadOnly); i++) {
                map.put("isReadOnly", isReadOnly);
            }
        }
        else {
          map.put("isReadOnly", JSON.serialize(isReadOnly));
        }
    }
    if (offset != null) {
        if (isFileTypeOrListOfFiles(offset)) {
            fileTypeFound = true;
        }

        if (offset.getClass().equals(java.io.File.class) ||
            offset.getClass().equals(Integer.class) ||
            offset.getClass().equals(String.class) ||
            offset.getClass().equals(java.net.URI.class)||
            offset.getClass().isEnum()) {
            map.put("offset", offset);
        } else if (isListOfFile(offset)) {
            for(int i = 0; i< getListSize(offset); i++) {
                map.put("offset", offset);
            }
        }
        else {
          map.put("offset", JSON.serialize(offset));
        }
    }
    if (label != null) {
        if (isFileTypeOrListOfFiles(label)) {
            fileTypeFound = true;
        }

        if (label.getClass().equals(java.io.File.class) ||
            label.getClass().equals(Integer.class) ||
            label.getClass().equals(String.class) ||
            label.getClass().equals(java.net.URI.class)||
            label.getClass().isEnum()) {
            map.put("label", label);
        } else if (isListOfFile(label)) {
            for(int i = 0; i< getListSize(label); i++) {
                map.put("label", label);
            }
        }
        else {
          map.put("label", JSON.serialize(label));
        }
    }
    if (tabIndex != null) {
        if (isFileTypeOrListOfFiles(tabIndex)) {
            fileTypeFound = true;
        }

        if (tabIndex.getClass().equals(java.io.File.class) ||
            tabIndex.getClass().equals(Integer.class) ||
            tabIndex.getClass().equals(String.class) ||
            tabIndex.getClass().equals(java.net.URI.class)||
            tabIndex.getClass().isEnum()) {
            map.put("tabIndex", tabIndex);
        } else if (isListOfFile(tabIndex)) {
            for(int i = 0; i< getListSize(tabIndex); i++) {
                map.put("tabIndex", tabIndex);
            }
        }
        else {
          map.put("tabIndex", JSON.serialize(tabIndex));
        }
    }
    if (dataSyncTag != null) {
        if (isFileTypeOrListOfFiles(dataSyncTag)) {
            fileTypeFound = true;
        }

        if (dataSyncTag.getClass().equals(java.io.File.class) ||
            dataSyncTag.getClass().equals(Integer.class) ||
            dataSyncTag.getClass().equals(String.class) ||
            dataSyncTag.getClass().equals(java.net.URI.class)||
            dataSyncTag.getClass().isEnum()) {
            map.put("dataSyncTag", dataSyncTag);
        } else if (isListOfFile(dataSyncTag)) {
            for(int i = 0; i< getListSize(dataSyncTag); i++) {
                map.put("dataSyncTag", dataSyncTag);
            }
        }
        else {
          map.put("dataSyncTag", JSON.serialize(dataSyncTag));
        }
    }
    if (textAlign != null) {
        if (isFileTypeOrListOfFiles(textAlign)) {
            fileTypeFound = true;
        }

        if (textAlign.getClass().equals(java.io.File.class) ||
            textAlign.getClass().equals(Integer.class) ||
            textAlign.getClass().equals(String.class) ||
            textAlign.getClass().equals(java.net.URI.class)||
            textAlign.getClass().isEnum()) {
            map.put("textAlign", textAlign);
        } else if (isListOfFile(textAlign)) {
            for(int i = 0; i< getListSize(textAlign); i++) {
                map.put("textAlign", textAlign);
            }
        }
        else {
          map.put("textAlign", JSON.serialize(textAlign));
        }
    }
    if (textDirection != null) {
        if (isFileTypeOrListOfFiles(textDirection)) {
            fileTypeFound = true;
        }

        if (textDirection.getClass().equals(java.io.File.class) ||
            textDirection.getClass().equals(Integer.class) ||
            textDirection.getClass().equals(String.class) ||
            textDirection.getClass().equals(java.net.URI.class)||
            textDirection.getClass().isEnum()) {
            map.put("textDirection", textDirection);
        } else if (isListOfFile(textDirection)) {
            for(int i = 0; i< getListSize(textDirection); i++) {
                map.put("textDirection", textDirection);
            }
        }
        else {
          map.put("textDirection", JSON.serialize(textDirection));
        }
    }
    if (characterSpacing != null) {
        if (isFileTypeOrListOfFiles(characterSpacing)) {
            fileTypeFound = true;
        }

        if (characterSpacing.getClass().equals(java.io.File.class) ||
            characterSpacing.getClass().equals(Integer.class) ||
            characterSpacing.getClass().equals(String.class) ||
            characterSpacing.getClass().equals(java.net.URI.class)||
            characterSpacing.getClass().isEnum()) {
            map.put("characterSpacing", characterSpacing);
        } else if (isListOfFile(characterSpacing)) {
            for(int i = 0; i< getListSize(characterSpacing); i++) {
                map.put("characterSpacing", characterSpacing);
            }
        }
        else {
          map.put("characterSpacing", JSON.serialize(characterSpacing));
        }
    }
    if (characterLimit != null) {
        if (isFileTypeOrListOfFiles(characterLimit)) {
            fileTypeFound = true;
        }

        if (characterLimit.getClass().equals(java.io.File.class) ||
            characterLimit.getClass().equals(Integer.class) ||
            characterLimit.getClass().equals(String.class) ||
            characterLimit.getClass().equals(java.net.URI.class)||
            characterLimit.getClass().isEnum()) {
            map.put("characterLimit", characterLimit);
        } else if (isListOfFile(characterLimit)) {
            for(int i = 0; i< getListSize(characterLimit); i++) {
                map.put("characterLimit", characterLimit);
            }
        }
        else {
          map.put("characterLimit", JSON.serialize(characterLimit));
        }
    }
    if (formulaFieldSettings != null) {
        if (isFileTypeOrListOfFiles(formulaFieldSettings)) {
            fileTypeFound = true;
        }

        if (formulaFieldSettings.getClass().equals(java.io.File.class) ||
            formulaFieldSettings.getClass().equals(Integer.class) ||
            formulaFieldSettings.getClass().equals(String.class) ||
            formulaFieldSettings.getClass().equals(java.net.URI.class)||
            formulaFieldSettings.getClass().isEnum()) {
            map.put("formulaFieldSettings", formulaFieldSettings);
        } else if (isListOfFile(formulaFieldSettings)) {
            for(int i = 0; i< getListSize(formulaFieldSettings); i++) {
                map.put("formulaFieldSettings", formulaFieldSettings);
            }
        }
        else {
          map.put("formulaFieldSettings", JSON.serialize(formulaFieldSettings));
        }
    }
    if (resizeOption != null) {
        if (isFileTypeOrListOfFiles(resizeOption)) {
            fileTypeFound = true;
        }

        if (resizeOption.getClass().equals(java.io.File.class) ||
            resizeOption.getClass().equals(Integer.class) ||
            resizeOption.getClass().equals(String.class) ||
            resizeOption.getClass().equals(java.net.URI.class)||
            resizeOption.getClass().isEnum()) {
            map.put("resizeOption", resizeOption);
        } else if (isListOfFile(resizeOption)) {
            for(int i = 0; i< getListSize(resizeOption); i++) {
                map.put("resizeOption", resizeOption);
            }
        }
        else {
          map.put("resizeOption", JSON.serialize(resizeOption));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("definitionId");
    openapiFields.add("type");
    openapiFields.add("signerIndex");
    openapiFields.add("isRequired");
    openapiFields.add("placeholder");
    openapiFields.add("fieldId");
    openapiFields.add("font");
    openapiFields.add("validation");
    openapiFields.add("size");
    openapiFields.add("dateFormat");
    openapiFields.add("timeFormat");
    openapiFields.add("radioGroupName");
    openapiFields.add("groupName");
    openapiFields.add("value");
    openapiFields.add("dropdownOptions");
    openapiFields.add("imageInfo");
    openapiFields.add("hyperlinkText");
    openapiFields.add("attachmentInfo");
    openapiFields.add("backgroundHexColor");
    openapiFields.add("isReadOnly");
    openapiFields.add("offset");
    openapiFields.add("label");
    openapiFields.add("tabIndex");
    openapiFields.add("dataSyncTag");
    openapiFields.add("textAlign");
    openapiFields.add("textDirection");
    openapiFields.add("characterSpacing");
    openapiFields.add("characterLimit");
    openapiFields.add("formulaFieldSettings");
    openapiFields.add("resizeOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("definitionId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("signerIndex");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextTagDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextTagDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextTagDefinition is not found in the empty JSON string", TextTagDefinition.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TextTagDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("definitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definitionId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("placeholder") != null && !jsonObj.get("placeholder").isJsonNull()) && !jsonObj.get("placeholder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeholder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeholder").toString()));
      }
      if ((jsonObj.get("fieldId") != null && !jsonObj.get("fieldId").isJsonNull()) && !jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      // validate the optional field `font`
      if (jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) {
        Font.validateJsonElement(jsonObj.get("font"));
      }
      // validate the optional field `validation`
      if (jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) {
        Validation.validateJsonElement(jsonObj.get("validation"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("dateFormat") != null && !jsonObj.get("dateFormat").isJsonNull()) && !jsonObj.get("dateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFormat").toString()));
      }
      if ((jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) && !jsonObj.get("timeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFormat").toString()));
      }
      if ((jsonObj.get("radioGroupName") != null && !jsonObj.get("radioGroupName").isJsonNull()) && !jsonObj.get("radioGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radioGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radioGroupName").toString()));
      }
      if ((jsonObj.get("groupName") != null && !jsonObj.get("groupName").isJsonNull()) && !jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dropdownOptions") != null && !jsonObj.get("dropdownOptions").isJsonNull() && !jsonObj.get("dropdownOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dropdownOptions` to be an array in the JSON string but got `%s`", jsonObj.get("dropdownOptions").toString()));
      }
      // validate the optional field `imageInfo`
      if (jsonObj.get("imageInfo") != null && !jsonObj.get("imageInfo").isJsonNull()) {
        ImageInfo.validateJsonElement(jsonObj.get("imageInfo"));
      }
      if ((jsonObj.get("hyperlinkText") != null && !jsonObj.get("hyperlinkText").isJsonNull()) && !jsonObj.get("hyperlinkText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperlinkText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperlinkText").toString()));
      }
      // validate the optional field `attachmentInfo`
      if (jsonObj.get("attachmentInfo") != null && !jsonObj.get("attachmentInfo").isJsonNull()) {
        AttachmentInfo.validateJsonElement(jsonObj.get("attachmentInfo"));
      }
      if ((jsonObj.get("backgroundHexColor") != null && !jsonObj.get("backgroundHexColor").isJsonNull()) && !jsonObj.get("backgroundHexColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundHexColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundHexColor").toString()));
      }
      // validate the optional field `offset`
      if (jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) {
        TextTagOffset.validateJsonElement(jsonObj.get("offset"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("dataSyncTag") != null && !jsonObj.get("dataSyncTag").isJsonNull()) && !jsonObj.get("dataSyncTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSyncTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSyncTag").toString()));
      }
      if ((jsonObj.get("textAlign") != null && !jsonObj.get("textAlign").isJsonNull()) && !jsonObj.get("textAlign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textAlign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textAlign").toString()));
      }
      // validate the optional field `textAlign`
      if (jsonObj.get("textAlign") != null && !jsonObj.get("textAlign").isJsonNull()) {
        TextAlignEnum.validateJsonElement(jsonObj.get("textAlign"));
      }
      if ((jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) && !jsonObj.get("textDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textDirection").toString()));
      }
      // validate the optional field `textDirection`
      if (jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) {
        TextDirectionEnum.validateJsonElement(jsonObj.get("textDirection"));
      }
      // validate the optional field `formulaFieldSettings`
      if (jsonObj.get("formulaFieldSettings") != null && !jsonObj.get("formulaFieldSettings").isJsonNull()) {
        FormulaFieldSettings.validateJsonElement(jsonObj.get("formulaFieldSettings"));
      }
      if ((jsonObj.get("resizeOption") != null && !jsonObj.get("resizeOption").isJsonNull()) && !jsonObj.get("resizeOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeOption").toString()));
      }
      // validate the optional field `resizeOption`
      if (jsonObj.get("resizeOption") != null && !jsonObj.get("resizeOption").isJsonNull()) {
        ResizeOptionEnum.validateJsonElement(jsonObj.get("resizeOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextTagDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextTagDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextTagDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextTagDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<TextTagDefinition>() {
           @Override
           public void write(JsonWriter out, TextTagDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextTagDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextTagDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextTagDefinition
   * @throws IOException if the JSON string is invalid with respect to TextTagDefinition
   */
  public static TextTagDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextTagDefinition.class);
  }

  /**
   * Convert an instance of TextTagDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

