/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.CustomDomainSettings;
import com.boldsign.model.DocumentExpirySettings;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * ViewBrandDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class ViewBrandDetails {
  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_BRAND_LOGO = "brandLogo";
  @SerializedName(SERIALIZED_NAME_BRAND_LOGO)
  private String brandLogo;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BUTTON_COLOR = "buttonColor";
  @SerializedName(SERIALIZED_NAME_BUTTON_COLOR)
  private String buttonColor;

  public static final String SERIALIZED_NAME_BUTTON_TEXT_COLOR = "buttonTextColor";
  @SerializedName(SERIALIZED_NAME_BUTTON_TEXT_COLOR)
  private String buttonTextColor;

  public static final String SERIALIZED_NAME_EMAIL_DISPLAY_NAME = "emailDisplayName";
  @SerializedName(SERIALIZED_NAME_EMAIL_DISPLAY_NAME)
  private String emailDisplayName;

  public static final String SERIALIZED_NAME_DISCLAIMER_TITLE = "disclaimerTitle";
  @SerializedName(SERIALIZED_NAME_DISCLAIMER_TITLE)
  private String disclaimerTitle;

  public static final String SERIALIZED_NAME_DISCLAIMER_DESCRIPTION = "disclaimerDescription";
  @SerializedName(SERIALIZED_NAME_DISCLAIMER_DESCRIPTION)
  private String disclaimerDescription;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_CAN_HIDE_TAG_LINE = "canHideTagLine";
  @SerializedName(SERIALIZED_NAME_CAN_HIDE_TAG_LINE)
  private Boolean canHideTagLine;

  public static final String SERIALIZED_NAME_COMBINE_AUDIT_TRAIL = "combineAuditTrail";
  @SerializedName(SERIALIZED_NAME_COMBINE_AUDIT_TRAIL)
  private Boolean combineAuditTrail;

  public static final String SERIALIZED_NAME_EXCLUDE_AUDIT_TRAIL_FROM_EMAIL = "excludeAuditTrailFromEmail";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_AUDIT_TRAIL_FROM_EMAIL)
  private Boolean excludeAuditTrailFromEmail;

  /**
   * Gets or Sets emailSignedDocument
   */
  @JsonAdapter(EmailSignedDocumentEnum.Adapter.class)
  public enum EmailSignedDocumentEnum {
    ATTACHMENT("Attachment"),
    
    DOCUMENT_LINK("DocumentLink");

    private String value;

    EmailSignedDocumentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailSignedDocumentEnum fromValue(String value) {
      for (EmailSignedDocumentEnum b : EmailSignedDocumentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailSignedDocumentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailSignedDocumentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailSignedDocumentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailSignedDocumentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmailSignedDocumentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMAIL_SIGNED_DOCUMENT = "emailSignedDocument";
  @SerializedName(SERIALIZED_NAME_EMAIL_SIGNED_DOCUMENT)
  private EmailSignedDocumentEnum emailSignedDocument;

  public static final String SERIALIZED_NAME_DOCUMENT_TIME_ZONE = "documentTimeZone";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TIME_ZONE)
  private String documentTimeZone;

  public static final String SERIALIZED_NAME_SHOW_BUILT_IN_FORM_FIELDS = "showBuiltInFormFields";
  @SerializedName(SERIALIZED_NAME_SHOW_BUILT_IN_FORM_FIELDS)
  private Boolean showBuiltInFormFields;

  public static final String SERIALIZED_NAME_ALLOW_CUSTOM_FIELD_CREATION = "allowCustomFieldCreation";
  @SerializedName(SERIALIZED_NAME_ALLOW_CUSTOM_FIELD_CREATION)
  private Boolean allowCustomFieldCreation;

  public static final String SERIALIZED_NAME_SHOW_SHARED_CUSTOM_FIELDS = "showSharedCustomFields";
  @SerializedName(SERIALIZED_NAME_SHOW_SHARED_CUSTOM_FIELDS)
  private Boolean showSharedCustomFields;

  public static final String SERIALIZED_NAME_HIDE_DECLINE = "hideDecline";
  @SerializedName(SERIALIZED_NAME_HIDE_DECLINE)
  private Boolean hideDecline;

  public static final String SERIALIZED_NAME_HIDE_SAVE = "hideSave";
  @SerializedName(SERIALIZED_NAME_HIDE_SAVE)
  private Boolean hideSave;

  public static final String SERIALIZED_NAME_DOCUMENT_EXPIRY_SETTINGS = "documentExpirySettings";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_EXPIRY_SETTINGS)
  private DocumentExpirySettings documentExpirySettings;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN_SETTINGS = "customDomainSettings";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN_SETTINGS)
  private CustomDomainSettings customDomainSettings;

  public static final String SERIALIZED_NAME_IS_DOMAIN_VERIFIED = "isDomainVerified";
  @SerializedName(SERIALIZED_NAME_IS_DOMAIN_VERIFIED)
  private Boolean isDomainVerified;

  public ViewBrandDetails() {
  }

  public ViewBrandDetails brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public ViewBrandDetails brandLogo(String brandLogo) {
    this.brandLogo = brandLogo;
    return this;
  }

  /**
   * Get brandLogo
   * @return brandLogo
   */
  @javax.annotation.Nullable
  public String getBrandLogo() {
    return brandLogo;
  }

  public void setBrandLogo(String brandLogo) {
    this.brandLogo = brandLogo;
  }


  public ViewBrandDetails brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  /**
   * Get brandName
   * @return brandName
   */
  @javax.annotation.Nullable
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public ViewBrandDetails backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public ViewBrandDetails buttonColor(String buttonColor) {
    this.buttonColor = buttonColor;
    return this;
  }

  /**
   * Get buttonColor
   * @return buttonColor
   */
  @javax.annotation.Nullable
  public String getButtonColor() {
    return buttonColor;
  }

  public void setButtonColor(String buttonColor) {
    this.buttonColor = buttonColor;
  }


  public ViewBrandDetails buttonTextColor(String buttonTextColor) {
    this.buttonTextColor = buttonTextColor;
    return this;
  }

  /**
   * Get buttonTextColor
   * @return buttonTextColor
   */
  @javax.annotation.Nullable
  public String getButtonTextColor() {
    return buttonTextColor;
  }

  public void setButtonTextColor(String buttonTextColor) {
    this.buttonTextColor = buttonTextColor;
  }


  public ViewBrandDetails emailDisplayName(String emailDisplayName) {
    this.emailDisplayName = emailDisplayName;
    return this;
  }

  /**
   * Get emailDisplayName
   * @return emailDisplayName
   */
  @javax.annotation.Nullable
  public String getEmailDisplayName() {
    return emailDisplayName;
  }

  public void setEmailDisplayName(String emailDisplayName) {
    this.emailDisplayName = emailDisplayName;
  }


  public ViewBrandDetails disclaimerTitle(String disclaimerTitle) {
    this.disclaimerTitle = disclaimerTitle;
    return this;
  }

  /**
   * Get disclaimerTitle
   * @return disclaimerTitle
   */
  @javax.annotation.Nullable
  public String getDisclaimerTitle() {
    return disclaimerTitle;
  }

  public void setDisclaimerTitle(String disclaimerTitle) {
    this.disclaimerTitle = disclaimerTitle;
  }


  public ViewBrandDetails disclaimerDescription(String disclaimerDescription) {
    this.disclaimerDescription = disclaimerDescription;
    return this;
  }

  /**
   * Get disclaimerDescription
   * @return disclaimerDescription
   */
  @javax.annotation.Nullable
  public String getDisclaimerDescription() {
    return disclaimerDescription;
  }

  public void setDisclaimerDescription(String disclaimerDescription) {
    this.disclaimerDescription = disclaimerDescription;
  }


  public ViewBrandDetails redirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public String getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public ViewBrandDetails isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public ViewBrandDetails canHideTagLine(Boolean canHideTagLine) {
    this.canHideTagLine = canHideTagLine;
    return this;
  }

  /**
   * Get canHideTagLine
   * @return canHideTagLine
   */
  @javax.annotation.Nullable
  public Boolean getCanHideTagLine() {
    return canHideTagLine;
  }

  public void setCanHideTagLine(Boolean canHideTagLine) {
    this.canHideTagLine = canHideTagLine;
  }


  public ViewBrandDetails combineAuditTrail(Boolean combineAuditTrail) {
    this.combineAuditTrail = combineAuditTrail;
    return this;
  }

  /**
   * Get combineAuditTrail
   * @return combineAuditTrail
   */
  @javax.annotation.Nullable
  public Boolean getCombineAuditTrail() {
    return combineAuditTrail;
  }

  public void setCombineAuditTrail(Boolean combineAuditTrail) {
    this.combineAuditTrail = combineAuditTrail;
  }


  public ViewBrandDetails excludeAuditTrailFromEmail(Boolean excludeAuditTrailFromEmail) {
    this.excludeAuditTrailFromEmail = excludeAuditTrailFromEmail;
    return this;
  }

  /**
   * Get excludeAuditTrailFromEmail
   * @return excludeAuditTrailFromEmail
   */
  @javax.annotation.Nullable
  public Boolean getExcludeAuditTrailFromEmail() {
    return excludeAuditTrailFromEmail;
  }

  public void setExcludeAuditTrailFromEmail(Boolean excludeAuditTrailFromEmail) {
    this.excludeAuditTrailFromEmail = excludeAuditTrailFromEmail;
  }


  public ViewBrandDetails emailSignedDocument(EmailSignedDocumentEnum emailSignedDocument) {
    this.emailSignedDocument = emailSignedDocument;
    return this;
  }

  /**
   * Get emailSignedDocument
   * @return emailSignedDocument
   */
  @javax.annotation.Nullable
  public EmailSignedDocumentEnum getEmailSignedDocument() {
    return emailSignedDocument;
  }

  public void setEmailSignedDocument(EmailSignedDocumentEnum emailSignedDocument) {
    this.emailSignedDocument = emailSignedDocument;
  }


  public ViewBrandDetails documentTimeZone(String documentTimeZone) {
    this.documentTimeZone = documentTimeZone;
    return this;
  }

  /**
   * Get documentTimeZone
   * @return documentTimeZone
   */
  @javax.annotation.Nullable
  public String getDocumentTimeZone() {
    return documentTimeZone;
  }

  public void setDocumentTimeZone(String documentTimeZone) {
    this.documentTimeZone = documentTimeZone;
  }


  public ViewBrandDetails showBuiltInFormFields(Boolean showBuiltInFormFields) {
    this.showBuiltInFormFields = showBuiltInFormFields;
    return this;
  }

  /**
   * Get showBuiltInFormFields
   * @return showBuiltInFormFields
   */
  @javax.annotation.Nullable
  public Boolean getShowBuiltInFormFields() {
    return showBuiltInFormFields;
  }

  public void setShowBuiltInFormFields(Boolean showBuiltInFormFields) {
    this.showBuiltInFormFields = showBuiltInFormFields;
  }


  public ViewBrandDetails allowCustomFieldCreation(Boolean allowCustomFieldCreation) {
    this.allowCustomFieldCreation = allowCustomFieldCreation;
    return this;
  }

  /**
   * Get allowCustomFieldCreation
   * @return allowCustomFieldCreation
   */
  @javax.annotation.Nullable
  public Boolean getAllowCustomFieldCreation() {
    return allowCustomFieldCreation;
  }

  public void setAllowCustomFieldCreation(Boolean allowCustomFieldCreation) {
    this.allowCustomFieldCreation = allowCustomFieldCreation;
  }


  public ViewBrandDetails showSharedCustomFields(Boolean showSharedCustomFields) {
    this.showSharedCustomFields = showSharedCustomFields;
    return this;
  }

  /**
   * Get showSharedCustomFields
   * @return showSharedCustomFields
   */
  @javax.annotation.Nullable
  public Boolean getShowSharedCustomFields() {
    return showSharedCustomFields;
  }

  public void setShowSharedCustomFields(Boolean showSharedCustomFields) {
    this.showSharedCustomFields = showSharedCustomFields;
  }


  public ViewBrandDetails hideDecline(Boolean hideDecline) {
    this.hideDecline = hideDecline;
    return this;
  }

  /**
   * Get hideDecline
   * @return hideDecline
   */
  @javax.annotation.Nullable
  public Boolean getHideDecline() {
    return hideDecline;
  }

  public void setHideDecline(Boolean hideDecline) {
    this.hideDecline = hideDecline;
  }


  public ViewBrandDetails hideSave(Boolean hideSave) {
    this.hideSave = hideSave;
    return this;
  }

  /**
   * Get hideSave
   * @return hideSave
   */
  @javax.annotation.Nullable
  public Boolean getHideSave() {
    return hideSave;
  }

  public void setHideSave(Boolean hideSave) {
    this.hideSave = hideSave;
  }


  public ViewBrandDetails documentExpirySettings(DocumentExpirySettings documentExpirySettings) {
    this.documentExpirySettings = documentExpirySettings;
    return this;
  }

  /**
   * Get documentExpirySettings
   * @return documentExpirySettings
   */
  @javax.annotation.Nullable
  public DocumentExpirySettings getDocumentExpirySettings() {
    return documentExpirySettings;
  }

  public void setDocumentExpirySettings(DocumentExpirySettings documentExpirySettings) {
    this.documentExpirySettings = documentExpirySettings;
  }


  public ViewBrandDetails customDomainSettings(CustomDomainSettings customDomainSettings) {
    this.customDomainSettings = customDomainSettings;
    return this;
  }

  /**
   * Get customDomainSettings
   * @return customDomainSettings
   */
  @javax.annotation.Nullable
  public CustomDomainSettings getCustomDomainSettings() {
    return customDomainSettings;
  }

  public void setCustomDomainSettings(CustomDomainSettings customDomainSettings) {
    this.customDomainSettings = customDomainSettings;
  }


  public ViewBrandDetails isDomainVerified(Boolean isDomainVerified) {
    this.isDomainVerified = isDomainVerified;
    return this;
  }

  /**
   * Get isDomainVerified
   * @return isDomainVerified
   */
  @javax.annotation.Nullable
  public Boolean getIsDomainVerified() {
    return isDomainVerified;
  }

  public void setIsDomainVerified(Boolean isDomainVerified) {
    this.isDomainVerified = isDomainVerified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewBrandDetails viewBrandDetails = (ViewBrandDetails) o;
    return Objects.equals(this.brandId, viewBrandDetails.brandId) &&
        Objects.equals(this.brandLogo, viewBrandDetails.brandLogo) &&
        Objects.equals(this.brandName, viewBrandDetails.brandName) &&
        Objects.equals(this.backgroundColor, viewBrandDetails.backgroundColor) &&
        Objects.equals(this.buttonColor, viewBrandDetails.buttonColor) &&
        Objects.equals(this.buttonTextColor, viewBrandDetails.buttonTextColor) &&
        Objects.equals(this.emailDisplayName, viewBrandDetails.emailDisplayName) &&
        Objects.equals(this.disclaimerTitle, viewBrandDetails.disclaimerTitle) &&
        Objects.equals(this.disclaimerDescription, viewBrandDetails.disclaimerDescription) &&
        Objects.equals(this.redirectUrl, viewBrandDetails.redirectUrl) &&
        Objects.equals(this.isDefault, viewBrandDetails.isDefault) &&
        Objects.equals(this.canHideTagLine, viewBrandDetails.canHideTagLine) &&
        Objects.equals(this.combineAuditTrail, viewBrandDetails.combineAuditTrail) &&
        Objects.equals(this.excludeAuditTrailFromEmail, viewBrandDetails.excludeAuditTrailFromEmail) &&
        Objects.equals(this.emailSignedDocument, viewBrandDetails.emailSignedDocument) &&
        Objects.equals(this.documentTimeZone, viewBrandDetails.documentTimeZone) &&
        Objects.equals(this.showBuiltInFormFields, viewBrandDetails.showBuiltInFormFields) &&
        Objects.equals(this.allowCustomFieldCreation, viewBrandDetails.allowCustomFieldCreation) &&
        Objects.equals(this.showSharedCustomFields, viewBrandDetails.showSharedCustomFields) &&
        Objects.equals(this.hideDecline, viewBrandDetails.hideDecline) &&
        Objects.equals(this.hideSave, viewBrandDetails.hideSave) &&
        Objects.equals(this.documentExpirySettings, viewBrandDetails.documentExpirySettings) &&
        Objects.equals(this.customDomainSettings, viewBrandDetails.customDomainSettings) &&
        Objects.equals(this.isDomainVerified, viewBrandDetails.isDomainVerified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, brandLogo, brandName, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerTitle, disclaimerDescription, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettings, customDomainSettings, isDomainVerified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewBrandDetails {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandLogo: ").append(toIndentedString(brandLogo)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    buttonColor: ").append(toIndentedString(buttonColor)).append("\n");
    sb.append("    buttonTextColor: ").append(toIndentedString(buttonTextColor)).append("\n");
    sb.append("    emailDisplayName: ").append(toIndentedString(emailDisplayName)).append("\n");
    sb.append("    disclaimerTitle: ").append(toIndentedString(disclaimerTitle)).append("\n");
    sb.append("    disclaimerDescription: ").append(toIndentedString(disclaimerDescription)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    canHideTagLine: ").append(toIndentedString(canHideTagLine)).append("\n");
    sb.append("    combineAuditTrail: ").append(toIndentedString(combineAuditTrail)).append("\n");
    sb.append("    excludeAuditTrailFromEmail: ").append(toIndentedString(excludeAuditTrailFromEmail)).append("\n");
    sb.append("    emailSignedDocument: ").append(toIndentedString(emailSignedDocument)).append("\n");
    sb.append("    documentTimeZone: ").append(toIndentedString(documentTimeZone)).append("\n");
    sb.append("    showBuiltInFormFields: ").append(toIndentedString(showBuiltInFormFields)).append("\n");
    sb.append("    allowCustomFieldCreation: ").append(toIndentedString(allowCustomFieldCreation)).append("\n");
    sb.append("    showSharedCustomFields: ").append(toIndentedString(showSharedCustomFields)).append("\n");
    sb.append("    hideDecline: ").append(toIndentedString(hideDecline)).append("\n");
    sb.append("    hideSave: ").append(toIndentedString(hideSave)).append("\n");
    sb.append("    documentExpirySettings: ").append(toIndentedString(documentExpirySettings)).append("\n");
    sb.append("    customDomainSettings: ").append(toIndentedString(customDomainSettings)).append("\n");
    sb.append("    isDomainVerified: ").append(toIndentedString(isDomainVerified)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    if (brandLogo != null) {
        if (isFileTypeOrListOfFiles(brandLogo)) {
            fileTypeFound = true;
        }

        if (brandLogo.getClass().equals(java.io.File.class) ||
            brandLogo.getClass().equals(Integer.class) ||
            brandLogo.getClass().equals(String.class) ||
            brandLogo.getClass().isEnum()) {
            map.put("brandLogo", brandLogo);
        } else if (isListOfFile(brandLogo)) {
            for(int i = 0; i< getListSize(brandLogo); i++) {
                map.put("brandLogo", brandLogo);
            }
        }
        else {
          map.put("brandLogo", brandLogo);
        }
    }
    if (brandName != null) {
        if (isFileTypeOrListOfFiles(brandName)) {
            fileTypeFound = true;
        }

        if (brandName.getClass().equals(java.io.File.class) ||
            brandName.getClass().equals(Integer.class) ||
            brandName.getClass().equals(String.class) ||
            brandName.getClass().isEnum()) {
            map.put("brandName", brandName);
        } else if (isListOfFile(brandName)) {
            for(int i = 0; i< getListSize(brandName); i++) {
                map.put("brandName", brandName);
            }
        }
        else {
          map.put("brandName", brandName);
        }
    }
    if (backgroundColor != null) {
        if (isFileTypeOrListOfFiles(backgroundColor)) {
            fileTypeFound = true;
        }

        if (backgroundColor.getClass().equals(java.io.File.class) ||
            backgroundColor.getClass().equals(Integer.class) ||
            backgroundColor.getClass().equals(String.class) ||
            backgroundColor.getClass().isEnum()) {
            map.put("backgroundColor", backgroundColor);
        } else if (isListOfFile(backgroundColor)) {
            for(int i = 0; i< getListSize(backgroundColor); i++) {
                map.put("backgroundColor", backgroundColor);
            }
        }
        else {
          map.put("backgroundColor", backgroundColor);
        }
    }
    if (buttonColor != null) {
        if (isFileTypeOrListOfFiles(buttonColor)) {
            fileTypeFound = true;
        }

        if (buttonColor.getClass().equals(java.io.File.class) ||
            buttonColor.getClass().equals(Integer.class) ||
            buttonColor.getClass().equals(String.class) ||
            buttonColor.getClass().isEnum()) {
            map.put("buttonColor", buttonColor);
        } else if (isListOfFile(buttonColor)) {
            for(int i = 0; i< getListSize(buttonColor); i++) {
                map.put("buttonColor", buttonColor);
            }
        }
        else {
          map.put("buttonColor", buttonColor);
        }
    }
    if (buttonTextColor != null) {
        if (isFileTypeOrListOfFiles(buttonTextColor)) {
            fileTypeFound = true;
        }

        if (buttonTextColor.getClass().equals(java.io.File.class) ||
            buttonTextColor.getClass().equals(Integer.class) ||
            buttonTextColor.getClass().equals(String.class) ||
            buttonTextColor.getClass().isEnum()) {
            map.put("buttonTextColor", buttonTextColor);
        } else if (isListOfFile(buttonTextColor)) {
            for(int i = 0; i< getListSize(buttonTextColor); i++) {
                map.put("buttonTextColor", buttonTextColor);
            }
        }
        else {
          map.put("buttonTextColor", buttonTextColor);
        }
    }
    if (emailDisplayName != null) {
        if (isFileTypeOrListOfFiles(emailDisplayName)) {
            fileTypeFound = true;
        }

        if (emailDisplayName.getClass().equals(java.io.File.class) ||
            emailDisplayName.getClass().equals(Integer.class) ||
            emailDisplayName.getClass().equals(String.class) ||
            emailDisplayName.getClass().isEnum()) {
            map.put("emailDisplayName", emailDisplayName);
        } else if (isListOfFile(emailDisplayName)) {
            for(int i = 0; i< getListSize(emailDisplayName); i++) {
                map.put("emailDisplayName", emailDisplayName);
            }
        }
        else {
          map.put("emailDisplayName", emailDisplayName);
        }
    }
    if (disclaimerTitle != null) {
        if (isFileTypeOrListOfFiles(disclaimerTitle)) {
            fileTypeFound = true;
        }

        if (disclaimerTitle.getClass().equals(java.io.File.class) ||
            disclaimerTitle.getClass().equals(Integer.class) ||
            disclaimerTitle.getClass().equals(String.class) ||
            disclaimerTitle.getClass().isEnum()) {
            map.put("disclaimerTitle", disclaimerTitle);
        } else if (isListOfFile(disclaimerTitle)) {
            for(int i = 0; i< getListSize(disclaimerTitle); i++) {
                map.put("disclaimerTitle", disclaimerTitle);
            }
        }
        else {
          map.put("disclaimerTitle", disclaimerTitle);
        }
    }
    if (disclaimerDescription != null) {
        if (isFileTypeOrListOfFiles(disclaimerDescription)) {
            fileTypeFound = true;
        }

        if (disclaimerDescription.getClass().equals(java.io.File.class) ||
            disclaimerDescription.getClass().equals(Integer.class) ||
            disclaimerDescription.getClass().equals(String.class) ||
            disclaimerDescription.getClass().isEnum()) {
            map.put("disclaimerDescription", disclaimerDescription);
        } else if (isListOfFile(disclaimerDescription)) {
            for(int i = 0; i< getListSize(disclaimerDescription); i++) {
                map.put("disclaimerDescription", disclaimerDescription);
            }
        }
        else {
          map.put("disclaimerDescription", disclaimerDescription);
        }
    }
    if (redirectUrl != null) {
        if (isFileTypeOrListOfFiles(redirectUrl)) {
            fileTypeFound = true;
        }

        if (redirectUrl.getClass().equals(java.io.File.class) ||
            redirectUrl.getClass().equals(Integer.class) ||
            redirectUrl.getClass().equals(String.class) ||
            redirectUrl.getClass().isEnum()) {
            map.put("redirectUrl", redirectUrl);
        } else if (isListOfFile(redirectUrl)) {
            for(int i = 0; i< getListSize(redirectUrl); i++) {
                map.put("redirectUrl", redirectUrl);
            }
        }
        else {
          map.put("redirectUrl", redirectUrl);
        }
    }
    if (isDefault != null) {
        if (isFileTypeOrListOfFiles(isDefault)) {
            fileTypeFound = true;
        }

        if (isDefault.getClass().equals(java.io.File.class) ||
            isDefault.getClass().equals(Integer.class) ||
            isDefault.getClass().equals(String.class) ||
            isDefault.getClass().isEnum()) {
            map.put("isDefault", isDefault);
        } else if (isListOfFile(isDefault)) {
            for(int i = 0; i< getListSize(isDefault); i++) {
                map.put("isDefault", isDefault);
            }
        }
        else {
          map.put("isDefault", isDefault);
        }
    }
    if (canHideTagLine != null) {
        if (isFileTypeOrListOfFiles(canHideTagLine)) {
            fileTypeFound = true;
        }

        if (canHideTagLine.getClass().equals(java.io.File.class) ||
            canHideTagLine.getClass().equals(Integer.class) ||
            canHideTagLine.getClass().equals(String.class) ||
            canHideTagLine.getClass().isEnum()) {
            map.put("canHideTagLine", canHideTagLine);
        } else if (isListOfFile(canHideTagLine)) {
            for(int i = 0; i< getListSize(canHideTagLine); i++) {
                map.put("canHideTagLine", canHideTagLine);
            }
        }
        else {
          map.put("canHideTagLine", canHideTagLine);
        }
    }
    if (combineAuditTrail != null) {
        if (isFileTypeOrListOfFiles(combineAuditTrail)) {
            fileTypeFound = true;
        }

        if (combineAuditTrail.getClass().equals(java.io.File.class) ||
            combineAuditTrail.getClass().equals(Integer.class) ||
            combineAuditTrail.getClass().equals(String.class) ||
            combineAuditTrail.getClass().isEnum()) {
            map.put("combineAuditTrail", combineAuditTrail);
        } else if (isListOfFile(combineAuditTrail)) {
            for(int i = 0; i< getListSize(combineAuditTrail); i++) {
                map.put("combineAuditTrail", combineAuditTrail);
            }
        }
        else {
          map.put("combineAuditTrail", combineAuditTrail);
        }
    }
    if (excludeAuditTrailFromEmail != null) {
        if (isFileTypeOrListOfFiles(excludeAuditTrailFromEmail)) {
            fileTypeFound = true;
        }

        if (excludeAuditTrailFromEmail.getClass().equals(java.io.File.class) ||
            excludeAuditTrailFromEmail.getClass().equals(Integer.class) ||
            excludeAuditTrailFromEmail.getClass().equals(String.class) ||
            excludeAuditTrailFromEmail.getClass().isEnum()) {
            map.put("excludeAuditTrailFromEmail", excludeAuditTrailFromEmail);
        } else if (isListOfFile(excludeAuditTrailFromEmail)) {
            for(int i = 0; i< getListSize(excludeAuditTrailFromEmail); i++) {
                map.put("excludeAuditTrailFromEmail", excludeAuditTrailFromEmail);
            }
        }
        else {
          map.put("excludeAuditTrailFromEmail", excludeAuditTrailFromEmail);
        }
    }
    if (emailSignedDocument != null) {
        if (isFileTypeOrListOfFiles(emailSignedDocument)) {
            fileTypeFound = true;
        }

        if (emailSignedDocument.getClass().equals(java.io.File.class) ||
            emailSignedDocument.getClass().equals(Integer.class) ||
            emailSignedDocument.getClass().equals(String.class) ||
            emailSignedDocument.getClass().isEnum()) {
            map.put("emailSignedDocument", emailSignedDocument);
        } else if (isListOfFile(emailSignedDocument)) {
            for(int i = 0; i< getListSize(emailSignedDocument); i++) {
                map.put("emailSignedDocument", emailSignedDocument);
            }
        }
        else {
          map.put("emailSignedDocument", emailSignedDocument);
        }
    }
    if (documentTimeZone != null) {
        if (isFileTypeOrListOfFiles(documentTimeZone)) {
            fileTypeFound = true;
        }

        if (documentTimeZone.getClass().equals(java.io.File.class) ||
            documentTimeZone.getClass().equals(Integer.class) ||
            documentTimeZone.getClass().equals(String.class) ||
            documentTimeZone.getClass().isEnum()) {
            map.put("documentTimeZone", documentTimeZone);
        } else if (isListOfFile(documentTimeZone)) {
            for(int i = 0; i< getListSize(documentTimeZone); i++) {
                map.put("documentTimeZone", documentTimeZone);
            }
        }
        else {
          map.put("documentTimeZone", documentTimeZone);
        }
    }
    if (showBuiltInFormFields != null) {
        if (isFileTypeOrListOfFiles(showBuiltInFormFields)) {
            fileTypeFound = true;
        }

        if (showBuiltInFormFields.getClass().equals(java.io.File.class) ||
            showBuiltInFormFields.getClass().equals(Integer.class) ||
            showBuiltInFormFields.getClass().equals(String.class) ||
            showBuiltInFormFields.getClass().isEnum()) {
            map.put("showBuiltInFormFields", showBuiltInFormFields);
        } else if (isListOfFile(showBuiltInFormFields)) {
            for(int i = 0; i< getListSize(showBuiltInFormFields); i++) {
                map.put("showBuiltInFormFields", showBuiltInFormFields);
            }
        }
        else {
          map.put("showBuiltInFormFields", showBuiltInFormFields);
        }
    }
    if (allowCustomFieldCreation != null) {
        if (isFileTypeOrListOfFiles(allowCustomFieldCreation)) {
            fileTypeFound = true;
        }

        if (allowCustomFieldCreation.getClass().equals(java.io.File.class) ||
            allowCustomFieldCreation.getClass().equals(Integer.class) ||
            allowCustomFieldCreation.getClass().equals(String.class) ||
            allowCustomFieldCreation.getClass().isEnum()) {
            map.put("allowCustomFieldCreation", allowCustomFieldCreation);
        } else if (isListOfFile(allowCustomFieldCreation)) {
            for(int i = 0; i< getListSize(allowCustomFieldCreation); i++) {
                map.put("allowCustomFieldCreation", allowCustomFieldCreation);
            }
        }
        else {
          map.put("allowCustomFieldCreation", allowCustomFieldCreation);
        }
    }
    if (showSharedCustomFields != null) {
        if (isFileTypeOrListOfFiles(showSharedCustomFields)) {
            fileTypeFound = true;
        }

        if (showSharedCustomFields.getClass().equals(java.io.File.class) ||
            showSharedCustomFields.getClass().equals(Integer.class) ||
            showSharedCustomFields.getClass().equals(String.class) ||
            showSharedCustomFields.getClass().isEnum()) {
            map.put("showSharedCustomFields", showSharedCustomFields);
        } else if (isListOfFile(showSharedCustomFields)) {
            for(int i = 0; i< getListSize(showSharedCustomFields); i++) {
                map.put("showSharedCustomFields", showSharedCustomFields);
            }
        }
        else {
          map.put("showSharedCustomFields", showSharedCustomFields);
        }
    }
    if (hideDecline != null) {
        if (isFileTypeOrListOfFiles(hideDecline)) {
            fileTypeFound = true;
        }

        if (hideDecline.getClass().equals(java.io.File.class) ||
            hideDecline.getClass().equals(Integer.class) ||
            hideDecline.getClass().equals(String.class) ||
            hideDecline.getClass().isEnum()) {
            map.put("hideDecline", hideDecline);
        } else if (isListOfFile(hideDecline)) {
            for(int i = 0; i< getListSize(hideDecline); i++) {
                map.put("hideDecline", hideDecline);
            }
        }
        else {
          map.put("hideDecline", hideDecline);
        }
    }
    if (hideSave != null) {
        if (isFileTypeOrListOfFiles(hideSave)) {
            fileTypeFound = true;
        }

        if (hideSave.getClass().equals(java.io.File.class) ||
            hideSave.getClass().equals(Integer.class) ||
            hideSave.getClass().equals(String.class) ||
            hideSave.getClass().isEnum()) {
            map.put("hideSave", hideSave);
        } else if (isListOfFile(hideSave)) {
            for(int i = 0; i< getListSize(hideSave); i++) {
                map.put("hideSave", hideSave);
            }
        }
        else {
          map.put("hideSave", hideSave);
        }
    }
    if (documentExpirySettings != null) {
        if (isFileTypeOrListOfFiles(documentExpirySettings)) {
            fileTypeFound = true;
        }

        if (documentExpirySettings.getClass().equals(java.io.File.class) ||
            documentExpirySettings.getClass().equals(Integer.class) ||
            documentExpirySettings.getClass().equals(String.class) ||
            documentExpirySettings.getClass().isEnum()) {
            map.put("documentExpirySettings", documentExpirySettings);
        } else if (isListOfFile(documentExpirySettings)) {
            for(int i = 0; i< getListSize(documentExpirySettings); i++) {
                map.put("documentExpirySettings", documentExpirySettings);
            }
        }
        else {
          map.put("documentExpirySettings", documentExpirySettings);
        }
    }
    if (customDomainSettings != null) {
        if (isFileTypeOrListOfFiles(customDomainSettings)) {
            fileTypeFound = true;
        }

        if (customDomainSettings.getClass().equals(java.io.File.class) ||
            customDomainSettings.getClass().equals(Integer.class) ||
            customDomainSettings.getClass().equals(String.class) ||
            customDomainSettings.getClass().isEnum()) {
            map.put("customDomainSettings", customDomainSettings);
        } else if (isListOfFile(customDomainSettings)) {
            for(int i = 0; i< getListSize(customDomainSettings); i++) {
                map.put("customDomainSettings", customDomainSettings);
            }
        }
        else {
          map.put("customDomainSettings", customDomainSettings);
        }
    }
    if (isDomainVerified != null) {
        if (isFileTypeOrListOfFiles(isDomainVerified)) {
            fileTypeFound = true;
        }

        if (isDomainVerified.getClass().equals(java.io.File.class) ||
            isDomainVerified.getClass().equals(Integer.class) ||
            isDomainVerified.getClass().equals(String.class) ||
            isDomainVerified.getClass().isEnum()) {
            map.put("isDomainVerified", isDomainVerified);
        } else if (isListOfFile(isDomainVerified)) {
            for(int i = 0; i< getListSize(isDomainVerified); i++) {
                map.put("isDomainVerified", isDomainVerified);
            }
        }
        else {
          map.put("isDomainVerified", isDomainVerified);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    if(!fileTypeFound) {
        Field[] fields = ViewBrandDetails.class.getDeclaredFields();
        for (Field field : fields) {
            if ("files".equals(field.getName())) {
                fileTypeFound = true;
                break;
            }
        }
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandId");
    openapiFields.add("brandLogo");
    openapiFields.add("brandName");
    openapiFields.add("backgroundColor");
    openapiFields.add("buttonColor");
    openapiFields.add("buttonTextColor");
    openapiFields.add("emailDisplayName");
    openapiFields.add("disclaimerTitle");
    openapiFields.add("disclaimerDescription");
    openapiFields.add("redirectUrl");
    openapiFields.add("isDefault");
    openapiFields.add("canHideTagLine");
    openapiFields.add("combineAuditTrail");
    openapiFields.add("excludeAuditTrailFromEmail");
    openapiFields.add("emailSignedDocument");
    openapiFields.add("documentTimeZone");
    openapiFields.add("showBuiltInFormFields");
    openapiFields.add("allowCustomFieldCreation");
    openapiFields.add("showSharedCustomFields");
    openapiFields.add("hideDecline");
    openapiFields.add("hideSave");
    openapiFields.add("documentExpirySettings");
    openapiFields.add("customDomainSettings");
    openapiFields.add("isDomainVerified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViewBrandDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViewBrandDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewBrandDetails is not found in the empty JSON string", ViewBrandDetails.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if ((jsonObj.get("brandLogo") != null && !jsonObj.get("brandLogo").isJsonNull()) && !jsonObj.get("brandLogo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandLogo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandLogo").toString()));
      }
      if ((jsonObj.get("brandName") != null && !jsonObj.get("brandName").isJsonNull()) && !jsonObj.get("brandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandName").toString()));
      }
      if ((jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) && !jsonObj.get("backgroundColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundColor").toString()));
      }
      if ((jsonObj.get("buttonColor") != null && !jsonObj.get("buttonColor").isJsonNull()) && !jsonObj.get("buttonColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonColor").toString()));
      }
      if ((jsonObj.get("buttonTextColor") != null && !jsonObj.get("buttonTextColor").isJsonNull()) && !jsonObj.get("buttonTextColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buttonTextColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buttonTextColor").toString()));
      }
      if ((jsonObj.get("emailDisplayName") != null && !jsonObj.get("emailDisplayName").isJsonNull()) && !jsonObj.get("emailDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailDisplayName").toString()));
      }
      if ((jsonObj.get("disclaimerTitle") != null && !jsonObj.get("disclaimerTitle").isJsonNull()) && !jsonObj.get("disclaimerTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclaimerTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclaimerTitle").toString()));
      }
      if ((jsonObj.get("disclaimerDescription") != null && !jsonObj.get("disclaimerDescription").isJsonNull()) && !jsonObj.get("disclaimerDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclaimerDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclaimerDescription").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("emailSignedDocument") != null && !jsonObj.get("emailSignedDocument").isJsonNull()) && !jsonObj.get("emailSignedDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailSignedDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailSignedDocument").toString()));
      }
      // validate the optional field `emailSignedDocument`
      if (jsonObj.get("emailSignedDocument") != null && !jsonObj.get("emailSignedDocument").isJsonNull()) {
        EmailSignedDocumentEnum.validateJsonElement(jsonObj.get("emailSignedDocument"));
      }
      if ((jsonObj.get("documentTimeZone") != null && !jsonObj.get("documentTimeZone").isJsonNull()) && !jsonObj.get("documentTimeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTimeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTimeZone").toString()));
      }
      // validate the optional field `documentExpirySettings`
      if (jsonObj.get("documentExpirySettings") != null && !jsonObj.get("documentExpirySettings").isJsonNull()) {
        DocumentExpirySettings.validateJsonElement(jsonObj.get("documentExpirySettings"));
      }
      // validate the optional field `customDomainSettings`
      if (jsonObj.get("customDomainSettings") != null && !jsonObj.get("customDomainSettings").isJsonNull()) {
        CustomDomainSettings.validateJsonElement(jsonObj.get("customDomainSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewBrandDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewBrandDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewBrandDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewBrandDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewBrandDetails>() {
           @Override
           public void write(JsonWriter out, ViewBrandDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewBrandDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViewBrandDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViewBrandDetails
   * @throws IOException if the JSON string is invalid with respect to ViewBrandDetails
   */
  public static ViewBrandDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewBrandDetails.class);
  }

  /**
   * Convert an instance of ViewBrandDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

