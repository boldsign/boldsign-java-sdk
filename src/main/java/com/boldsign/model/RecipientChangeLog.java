/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.Added;
import com.boldsign.model.Removed;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * RecipientChangeLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class RecipientChangeLog {
  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private List<Added> added;

  public static final String SERIALIZED_NAME_REMOVED = "removed";
  @SerializedName(SERIALIZED_NAME_REMOVED)
  private List<Removed> removed;

  public RecipientChangeLog() {
  }

  public RecipientChangeLog added(List<Added> added) {
    this.added = added;
    return this;
  }

  public RecipientChangeLog addAddedItem(Added addedItem) {
    if (this.added == null) {
      this.added = new ArrayList<>();
    }
    this.added.add(addedItem);
    return this;
  }

  /**
   * Get added
   * @return added
   */
  @javax.annotation.Nullable
  public List<Added> getAdded() {
    return added;
  }

  public void setAdded(List<Added> added) {
    this.added = added;
  }


  public RecipientChangeLog removed(List<Removed> removed) {
    this.removed = removed;
    return this;
  }

  public RecipientChangeLog addRemovedItem(Removed removedItem) {
    if (this.removed == null) {
      this.removed = new ArrayList<>();
    }
    this.removed.add(removedItem);
    return this;
  }

  /**
   * Get removed
   * @return removed
   */
  @javax.annotation.Nullable
  public List<Removed> getRemoved() {
    return removed;
  }

  public void setRemoved(List<Removed> removed) {
    this.removed = removed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientChangeLog recipientChangeLog = (RecipientChangeLog) o;
    return Objects.equals(this.added, recipientChangeLog.added) &&
        Objects.equals(this.removed, recipientChangeLog.removed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(added, removed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientChangeLog {\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    removed: ").append(toIndentedString(removed)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (added != null) {
        if (isFileTypeOrListOfFiles(added)) {
            fileTypeFound = true;
        }

        if (added.getClass().equals(java.io.File.class) ||
            added.getClass().equals(Integer.class) ||
            added.getClass().equals(String.class) ||
            added.getClass().equals(java.net.URI.class)||
            added.getClass().isEnum()) {
            map.put("added", added);
        } else if (isListOfFile(added)) {
            for(int i = 0; i< getListSize(added); i++) {
                map.put("added", added);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : added) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("added", objectList);
        }
    }
    if (removed != null) {
        if (isFileTypeOrListOfFiles(removed)) {
            fileTypeFound = true;
        }

        if (removed.getClass().equals(java.io.File.class) ||
            removed.getClass().equals(Integer.class) ||
            removed.getClass().equals(String.class) ||
            removed.getClass().equals(java.net.URI.class)||
            removed.getClass().isEnum()) {
            map.put("removed", removed);
        } else if (isListOfFile(removed)) {
            for(int i = 0; i< getListSize(removed); i++) {
                map.put("removed", removed);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : removed) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("removed", objectList);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added");
    openapiFields.add("removed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecipientChangeLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecipientChangeLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecipientChangeLog is not found in the empty JSON string", RecipientChangeLog.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("added") != null && !jsonObj.get("added").isJsonNull()) {
        JsonArray jsonArrayadded = jsonObj.getAsJsonArray("added");
        if (jsonArrayadded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("added").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `added` to be an array in the JSON string but got `%s`", jsonObj.get("added").toString()));
          }

          // validate the optional field `added` (array)
          for (int i = 0; i < jsonArrayadded.size(); i++) {
            Added.validateJsonElement(jsonArrayadded.get(i));
          };
        }
      }
      if (jsonObj.get("removed") != null && !jsonObj.get("removed").isJsonNull()) {
        JsonArray jsonArrayremoved = jsonObj.getAsJsonArray("removed");
        if (jsonArrayremoved != null) {
          // ensure the json data is an array
          if (!jsonObj.get("removed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `removed` to be an array in the JSON string but got `%s`", jsonObj.get("removed").toString()));
          }

          // validate the optional field `removed` (array)
          for (int i = 0; i < jsonArrayremoved.size(); i++) {
            Removed.validateJsonElement(jsonArrayremoved.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecipientChangeLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecipientChangeLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecipientChangeLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecipientChangeLog.class));

       return (TypeAdapter<T>) new TypeAdapter<RecipientChangeLog>() {
           @Override
           public void write(JsonWriter out, RecipientChangeLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecipientChangeLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecipientChangeLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecipientChangeLog
   * @throws IOException if the JSON string is invalid with respect to RecipientChangeLog
   */
  public static RecipientChangeLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecipientChangeLog.class);
  }

  /**
   * Convert an instance of RecipientChangeLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

