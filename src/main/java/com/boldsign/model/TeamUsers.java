/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * TeamUsers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TeamUsers {
  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * Gets or Sets userRole
   */
  @JsonAdapter(UserRoleEnum.Adapter.class)
  public enum UserRoleEnum {
    ACCOUNT_ADMIN("AccountAdmin"),
    
    TEAM_ADMIN("TeamAdmin"),
    
    TEAM_MEMBER("TeamMember");

    private String value;

    UserRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserRoleEnum fromValue(String value) {
      for (UserRoleEnum b : UserRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_ROLE = "userRole";
  @SerializedName(SERIALIZED_NAME_USER_ROLE)
  private UserRoleEnum userRole;

  /**
   * Gets or Sets userStatus
   */
  @JsonAdapter(UserStatusEnum.Adapter.class)
  public enum UserStatusEnum {
    ACTIVE("Active"),
    
    INVITATION_PENDING("InvitationPending"),
    
    DEACTIVATED("Deactivated");

    private String value;

    UserStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserStatusEnum fromValue(String value) {
      for (UserStatusEnum b : UserStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_STATUS = "userStatus";
  @SerializedName(SERIALIZED_NAME_USER_STATUS)
  private UserStatusEnum userStatus;

  public TeamUsers() {
  }

  public TeamUsers userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public TeamUsers email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public TeamUsers firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public TeamUsers lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public TeamUsers userRole(UserRoleEnum userRole) {
    this.userRole = userRole;
    return this;
  }

  /**
   * Get userRole
   * @return userRole
   */
  @javax.annotation.Nullable
  public UserRoleEnum getUserRole() {
    return userRole;
  }

  public void setUserRole(UserRoleEnum userRole) {
    this.userRole = userRole;
  }


  public TeamUsers userStatus(UserStatusEnum userStatus) {
    this.userStatus = userStatus;
    return this;
  }

  /**
   * Get userStatus
   * @return userStatus
   */
  @javax.annotation.Nullable
  public UserStatusEnum getUserStatus() {
    return userStatus;
  }

  public void setUserStatus(UserStatusEnum userStatus) {
    this.userStatus = userStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamUsers teamUsers = (TeamUsers) o;
    return Objects.equals(this.userId, teamUsers.userId) &&
        Objects.equals(this.email, teamUsers.email) &&
        Objects.equals(this.firstName, teamUsers.firstName) &&
        Objects.equals(this.lastName, teamUsers.lastName) &&
        Objects.equals(this.userRole, teamUsers.userRole) &&
        Objects.equals(this.userStatus, teamUsers.userStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, email, firstName, lastName, userRole, userStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamUsers {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    userRole: ").append(toIndentedString(userRole)).append("\n");
    sb.append("    userStatus: ").append(toIndentedString(userStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (userId != null) {
        if (isFileTypeOrListOfFiles(userId)) {
            fileTypeFound = true;
        }

        if (userId.getClass().equals(java.io.File.class) ||
            userId.getClass().equals(Integer.class) ||
            userId.getClass().equals(String.class) ||
            userId.getClass().isEnum()) {
            map.put("userId", userId);
        } else if (isListOfFile(userId)) {
            for(int i = 0; i< getListSize(userId); i++) {
                map.put("userId", userId);
            }
        }
        else {
          map.put("userId", userId);
        }
    }
    if (email != null) {
        if (isFileTypeOrListOfFiles(email)) {
            fileTypeFound = true;
        }

        if (email.getClass().equals(java.io.File.class) ||
            email.getClass().equals(Integer.class) ||
            email.getClass().equals(String.class) ||
            email.getClass().isEnum()) {
            map.put("email", email);
        } else if (isListOfFile(email)) {
            for(int i = 0; i< getListSize(email); i++) {
                map.put("email", email);
            }
        }
        else {
          map.put("email", email);
        }
    }
    if (firstName != null) {
        if (isFileTypeOrListOfFiles(firstName)) {
            fileTypeFound = true;
        }

        if (firstName.getClass().equals(java.io.File.class) ||
            firstName.getClass().equals(Integer.class) ||
            firstName.getClass().equals(String.class) ||
            firstName.getClass().isEnum()) {
            map.put("firstName", firstName);
        } else if (isListOfFile(firstName)) {
            for(int i = 0; i< getListSize(firstName); i++) {
                map.put("firstName", firstName);
            }
        }
        else {
          map.put("firstName", firstName);
        }
    }
    if (lastName != null) {
        if (isFileTypeOrListOfFiles(lastName)) {
            fileTypeFound = true;
        }

        if (lastName.getClass().equals(java.io.File.class) ||
            lastName.getClass().equals(Integer.class) ||
            lastName.getClass().equals(String.class) ||
            lastName.getClass().isEnum()) {
            map.put("lastName", lastName);
        } else if (isListOfFile(lastName)) {
            for(int i = 0; i< getListSize(lastName); i++) {
                map.put("lastName", lastName);
            }
        }
        else {
          map.put("lastName", lastName);
        }
    }
    if (userRole != null) {
        if (isFileTypeOrListOfFiles(userRole)) {
            fileTypeFound = true;
        }

        if (userRole.getClass().equals(java.io.File.class) ||
            userRole.getClass().equals(Integer.class) ||
            userRole.getClass().equals(String.class) ||
            userRole.getClass().isEnum()) {
            map.put("userRole", userRole);
        } else if (isListOfFile(userRole)) {
            for(int i = 0; i< getListSize(userRole); i++) {
                map.put("userRole", userRole);
            }
        }
        else {
          map.put("userRole", userRole);
        }
    }
    if (userStatus != null) {
        if (isFileTypeOrListOfFiles(userStatus)) {
            fileTypeFound = true;
        }

        if (userStatus.getClass().equals(java.io.File.class) ||
            userStatus.getClass().equals(Integer.class) ||
            userStatus.getClass().equals(String.class) ||
            userStatus.getClass().isEnum()) {
            map.put("userStatus", userStatus);
        } else if (isListOfFile(userStatus)) {
            for(int i = 0; i< getListSize(userStatus); i++) {
                map.put("userStatus", userStatus);
            }
        }
        else {
          map.put("userStatus", userStatus);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("userId");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("userRole");
    openapiFields.add("userStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamUsers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamUsers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamUsers is not found in the empty JSON string", TeamUsers.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("userRole") != null && !jsonObj.get("userRole").isJsonNull()) && !jsonObj.get("userRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userRole").toString()));
      }
      // validate the optional field `userRole`
      if (jsonObj.get("userRole") != null && !jsonObj.get("userRole").isJsonNull()) {
        UserRoleEnum.validateJsonElement(jsonObj.get("userRole"));
      }
      if ((jsonObj.get("userStatus") != null && !jsonObj.get("userStatus").isJsonNull()) && !jsonObj.get("userStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userStatus").toString()));
      }
      // validate the optional field `userStatus`
      if (jsonObj.get("userStatus") != null && !jsonObj.get("userStatus").isJsonNull()) {
        UserStatusEnum.validateJsonElement(jsonObj.get("userStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamUsers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamUsers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamUsers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamUsers.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamUsers>() {
           @Override
           public void write(JsonWriter out, TeamUsers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamUsers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamUsers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamUsers
   * @throws IOException if the JSON string is invalid with respect to TeamUsers
   */
  public static TeamUsers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamUsers.class);
  }

  /**
   * Convert an instance of TeamUsers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

