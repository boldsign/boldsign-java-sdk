/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.ModificationDetails;
import com.boldsign.model.RecipientChangeLog;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * AuditTrail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class AuditTrail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_TO_NAME = "toName";
  @SerializedName(SERIALIZED_NAME_TO_NAME)
  private String toName;

  public static final String SERIALIZED_NAME_TO_EMAIL = "toEmail";
  @SerializedName(SERIALIZED_NAME_TO_EMAIL)
  private String toEmail;

  public static final String SERIALIZED_NAME_IPADDRESS = "ipaddress";
  @SerializedName(SERIALIZED_NAME_IPADDRESS)
  private String ipaddress;

  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    SENT("Sent"),
    
    VIEWED("Viewed"),
    
    SIGNED("Signed"),
    
    COMPLETED("Completed"),
    
    DOWNLOADED("Downloaded"),
    
    REASSIGNED("Reassigned"),
    
    DECLINED("Declined"),
    
    RECALLED("Recalled"),
    
    CREATED("Created"),
    
    AUTHENTICATION_FAILED("AuthenticationFailed"),
    
    REMINDER("Reminder"),
    
    ACCESS_CODE_CHANGED("AccessCodeChanged"),
    
    ACCESS_CODE_VIEWED("AccessCodeViewed"),
    
    DOWNLOADED_FOR_PRINT_SIGN("DownloadedForPrintSign"),
    
    FORM_CREATED("FormCreated"),
    
    EMAIL_OTP("EmailOTP"),
    
    AUTHENTICATION_REMOVED("AuthenticationRemoved"),
    
    DOWNLOADED_AUDIT_TRAIL("DownloadedAuditTrail"),
    
    CLONED("Cloned"),
    
    CLONED_WITH_FIELD_VALUES("ClonedWithFieldValues"),
    
    DELETED("Deleted"),
    
    MOVED_TO_TRASH("MovedToTrash"),
    
    RESTORED("Restored"),
    
    AUTO_REMINDER("AutoReminder"),
    
    RESEND("Resend"),
    
    REVIEWED("Reviewed"),
    
    INITIATE_PRINT_SIGN("InitiatePrintSign"),
    
    CANCEL_PRINT_SIGN("CancelPrintSign"),
    
    COMPLETE_PRINT_SIGN("CompletePrintSign"),
    
    GENERATED_EMBEDDED_SIGN_LINK("GeneratedEmbeddedSignLink"),
    
    EMBEDDED_SIGNED("EmbeddedSigned"),
    
    EMBEDDED_REVIEWED("EmbeddedReviewed"),
    
    EXPIRY_DATE_EXTENDED("ExpiryDateExtended"),
    
    ATTACHMENT("Attachment"),
    
    EDIT_RECIPIENT("EditRecipient"),
    
    AUTHENTICATION_ADDED("AuthenticationAdded"),
    
    AUTO_REMINDER_ON("AutoReminderON"),
    
    AUTO_REMINDER_OFF("AutoReminderOFF"),
    
    SMSOTP("SMSOTP"),
    
    PHONE_NUMBER_CHANGED("PhoneNumberChanged"),
    
    UNLOCKED_SMSOTP("UnlockedSMSOTP"),
    
    SMS_AUTHENTICATION_ADDED("SMSAuthenticationAdded"),
    
    SMS_AUTHENTICATION_REMOVED("SMSAuthenticationRemoved"),
    
    SMSOTP_VERIFIED("SMSOTPVerified"),
    
    SMS_AUTHENTICATION_FAILED("SMSAuthenticationFailed"),
    
    UNLOCK_EMAIL_OTP("UnlockEmailOTP"),
    
    EMAIL_AUTHENTICATION_ADDED("EmailAuthenticationAdded"),
    
    EMAIL_AUTHENTICATION_REMOVED("EmailAuthenticationRemoved"),
    
    EMAIL_OTP_VERIFY("EmailOtpVerify"),
    
    EMAIL_AUTHENTICATION_FAILED("EmailAuthenticationFailed"),
    
    SMSOTP_RESEND("SMSOTPResend"),
    
    EMAIL_OTP_RESEND("EmailOTPResend"),
    
    RESUME_DOCUMENT_SIGNING("ResumeDocumentSigning"),
    
    EMAIL_OTP_AUTHENTICATION_ADDED("EmailOTPAuthenticationAdded"),
    
    EMAIL_OTP_AUTHENTICATION_REMOVED("EmailOTPAuthenticationRemoved"),
    
    EMAIL_OTP_AUTHENTICATION_FAILED("EmailOTPAuthenticationFailed"),
    
    EMAIL_OTP_VERIFIED("EmailOTPVerified"),
    
    IDENTITY_VERIFICATION_INITIATED("IdentityVerificationInitiated"),
    
    IDENTITY_VERIFICATION_REMOVED("IdentityVerificationRemoved"),
    
    IDENTITY_VERIFICATION_COMPLETED("IdentityVerificationCompleted"),
    
    IDENTITY_VERIFICATION_FAILED("IdentityVerificationFailed"),
    
    DOWNLOADED_VERIFICATION_DATA("DownloadedVerificationData"),
    
    MANUAL_IDENTITY_VERIFICATION_COMPLETED("ManualIdentityVerificationCompleted"),
    
    IDENTITY_VERIFICATION_RESET("IdentityVerificationReset"),
    
    CREATE_EMBEDDED_VERIFICATION_LINK("CreateEmbeddedVerificationLink"),
    
    SENSITIVE_DATA_DOWNLOADED("SensitiveDataDownloaded"),
    
    ID_VERIFICATION_REMOVED("IdVerificationRemoved"),
    
    ID_VERIFICATION_ADDED("IdVerificationAdded"),
    
    MANUAL_IDENTITY_VERIFICATION_INITIATED("ManualIdentityVerificationInitiated"),
    
    GENERATED_SIGNING_LINK("GeneratedSigningLink"),
    
    EDITING_INITIATED("EditingInitiated"),
    
    EDITING_CANCELLED("EditingCancelled"),
    
    EDITING_COMPLETED("EditingCompleted"),
    
    QES_VERIFICATION_INITIATED("QESVerificationInitiated"),
    
    QES_VERIFIED("QESVerified"),
    
    QES_REJECTED("QESRejected"),
    
    QES_EXPIRED("QESExpired"),
    
    QES_WITHDRAWN("QESWithdrawn");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_RECIPIENT_CHANGE_LOG = "recipientChangeLog";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_CHANGE_LOG)
  private RecipientChangeLog recipientChangeLog;

  public static final String SERIALIZED_NAME_DOCUMENT_CHANGE_LOG = "documentChangeLog";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_CHANGE_LOG)
  private ModificationDetails documentChangeLog;

  public static final String SERIALIZED_NAME_FIELD_CHANGE_LOG = "fieldChangeLog";
  @SerializedName(SERIALIZED_NAME_FIELD_CHANGE_LOG)
  private ModificationDetails fieldChangeLog;

  public AuditTrail() {
  }

  public AuditTrail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AuditTrail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AuditTrail email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AuditTrail toName(String toName) {
    this.toName = toName;
    return this;
  }

  /**
   * Get toName
   * @return toName
   */
  @javax.annotation.Nullable
  public String getToName() {
    return toName;
  }

  public void setToName(String toName) {
    this.toName = toName;
  }


  public AuditTrail toEmail(String toEmail) {
    this.toEmail = toEmail;
    return this;
  }

  /**
   * Get toEmail
   * @return toEmail
   */
  @javax.annotation.Nullable
  public String getToEmail() {
    return toEmail;
  }

  public void setToEmail(String toEmail) {
    this.toEmail = toEmail;
  }


  public AuditTrail ipaddress(String ipaddress) {
    this.ipaddress = ipaddress;
    return this;
  }

  /**
   * Get ipaddress
   * @return ipaddress
   */
  @javax.annotation.Nullable
  public String getIpaddress() {
    return ipaddress;
  }

  public void setIpaddress(String ipaddress) {
    this.ipaddress = ipaddress;
  }


  public AuditTrail action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public AuditTrail timestamp(Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public AuditTrail recipientChangeLog(RecipientChangeLog recipientChangeLog) {
    this.recipientChangeLog = recipientChangeLog;
    return this;
  }

  /**
   * Get recipientChangeLog
   * @return recipientChangeLog
   */
  @javax.annotation.Nullable
  public RecipientChangeLog getRecipientChangeLog() {
    return recipientChangeLog;
  }

  public void setRecipientChangeLog(RecipientChangeLog recipientChangeLog) {
    this.recipientChangeLog = recipientChangeLog;
  }


  public AuditTrail documentChangeLog(ModificationDetails documentChangeLog) {
    this.documentChangeLog = documentChangeLog;
    return this;
  }

  /**
   * Get documentChangeLog
   * @return documentChangeLog
   */
  @javax.annotation.Nullable
  public ModificationDetails getDocumentChangeLog() {
    return documentChangeLog;
  }

  public void setDocumentChangeLog(ModificationDetails documentChangeLog) {
    this.documentChangeLog = documentChangeLog;
  }


  public AuditTrail fieldChangeLog(ModificationDetails fieldChangeLog) {
    this.fieldChangeLog = fieldChangeLog;
    return this;
  }

  /**
   * Get fieldChangeLog
   * @return fieldChangeLog
   */
  @javax.annotation.Nullable
  public ModificationDetails getFieldChangeLog() {
    return fieldChangeLog;
  }

  public void setFieldChangeLog(ModificationDetails fieldChangeLog) {
    this.fieldChangeLog = fieldChangeLog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditTrail auditTrail = (AuditTrail) o;
    return Objects.equals(this.id, auditTrail.id) &&
        Objects.equals(this.name, auditTrail.name) &&
        Objects.equals(this.email, auditTrail.email) &&
        Objects.equals(this.toName, auditTrail.toName) &&
        Objects.equals(this.toEmail, auditTrail.toEmail) &&
        Objects.equals(this.ipaddress, auditTrail.ipaddress) &&
        Objects.equals(this.action, auditTrail.action) &&
        Objects.equals(this.timestamp, auditTrail.timestamp) &&
        Objects.equals(this.recipientChangeLog, auditTrail.recipientChangeLog) &&
        Objects.equals(this.documentChangeLog, auditTrail.documentChangeLog) &&
        Objects.equals(this.fieldChangeLog, auditTrail.fieldChangeLog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, email, toName, toEmail, ipaddress, action, timestamp, recipientChangeLog, documentChangeLog, fieldChangeLog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditTrail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    toName: ").append(toIndentedString(toName)).append("\n");
    sb.append("    toEmail: ").append(toIndentedString(toEmail)).append("\n");
    sb.append("    ipaddress: ").append(toIndentedString(ipaddress)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    recipientChangeLog: ").append(toIndentedString(recipientChangeLog)).append("\n");
    sb.append("    documentChangeLog: ").append(toIndentedString(documentChangeLog)).append("\n");
    sb.append("    fieldChangeLog: ").append(toIndentedString(fieldChangeLog)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (id != null) {
        if (isFileTypeOrListOfFiles(id)) {
            fileTypeFound = true;
        }

        if (id.getClass().equals(java.io.File.class) ||
            id.getClass().equals(Integer.class) ||
            id.getClass().equals(String.class) ||
            id.getClass().equals(java.net.URI.class)||
            id.getClass().isEnum()) {
            map.put("id", id);
        } else if (isListOfFile(id)) {
            for(int i = 0; i< getListSize(id); i++) {
                map.put("id", id);
            }
        }
        else {
          map.put("id", JSON.serialize(id));
        }
    }
    if (name != null) {
        if (isFileTypeOrListOfFiles(name)) {
            fileTypeFound = true;
        }

        if (name.getClass().equals(java.io.File.class) ||
            name.getClass().equals(Integer.class) ||
            name.getClass().equals(String.class) ||
            name.getClass().equals(java.net.URI.class)||
            name.getClass().isEnum()) {
            map.put("name", name);
        } else if (isListOfFile(name)) {
            for(int i = 0; i< getListSize(name); i++) {
                map.put("name", name);
            }
        }
        else {
          map.put("name", JSON.serialize(name));
        }
    }
    if (email != null) {
        if (isFileTypeOrListOfFiles(email)) {
            fileTypeFound = true;
        }

        if (email.getClass().equals(java.io.File.class) ||
            email.getClass().equals(Integer.class) ||
            email.getClass().equals(String.class) ||
            email.getClass().equals(java.net.URI.class)||
            email.getClass().isEnum()) {
            map.put("email", email);
        } else if (isListOfFile(email)) {
            for(int i = 0; i< getListSize(email); i++) {
                map.put("email", email);
            }
        }
        else {
          map.put("email", JSON.serialize(email));
        }
    }
    if (toName != null) {
        if (isFileTypeOrListOfFiles(toName)) {
            fileTypeFound = true;
        }

        if (toName.getClass().equals(java.io.File.class) ||
            toName.getClass().equals(Integer.class) ||
            toName.getClass().equals(String.class) ||
            toName.getClass().equals(java.net.URI.class)||
            toName.getClass().isEnum()) {
            map.put("toName", toName);
        } else if (isListOfFile(toName)) {
            for(int i = 0; i< getListSize(toName); i++) {
                map.put("toName", toName);
            }
        }
        else {
          map.put("toName", JSON.serialize(toName));
        }
    }
    if (toEmail != null) {
        if (isFileTypeOrListOfFiles(toEmail)) {
            fileTypeFound = true;
        }

        if (toEmail.getClass().equals(java.io.File.class) ||
            toEmail.getClass().equals(Integer.class) ||
            toEmail.getClass().equals(String.class) ||
            toEmail.getClass().equals(java.net.URI.class)||
            toEmail.getClass().isEnum()) {
            map.put("toEmail", toEmail);
        } else if (isListOfFile(toEmail)) {
            for(int i = 0; i< getListSize(toEmail); i++) {
                map.put("toEmail", toEmail);
            }
        }
        else {
          map.put("toEmail", JSON.serialize(toEmail));
        }
    }
    if (ipaddress != null) {
        if (isFileTypeOrListOfFiles(ipaddress)) {
            fileTypeFound = true;
        }

        if (ipaddress.getClass().equals(java.io.File.class) ||
            ipaddress.getClass().equals(Integer.class) ||
            ipaddress.getClass().equals(String.class) ||
            ipaddress.getClass().equals(java.net.URI.class)||
            ipaddress.getClass().isEnum()) {
            map.put("ipaddress", ipaddress);
        } else if (isListOfFile(ipaddress)) {
            for(int i = 0; i< getListSize(ipaddress); i++) {
                map.put("ipaddress", ipaddress);
            }
        }
        else {
          map.put("ipaddress", JSON.serialize(ipaddress));
        }
    }
    if (action != null) {
        if (isFileTypeOrListOfFiles(action)) {
            fileTypeFound = true;
        }

        if (action.getClass().equals(java.io.File.class) ||
            action.getClass().equals(Integer.class) ||
            action.getClass().equals(String.class) ||
            action.getClass().equals(java.net.URI.class)||
            action.getClass().isEnum()) {
            map.put("action", action);
        } else if (isListOfFile(action)) {
            for(int i = 0; i< getListSize(action); i++) {
                map.put("action", action);
            }
        }
        else {
          map.put("action", JSON.serialize(action));
        }
    }
    if (timestamp != null) {
        if (isFileTypeOrListOfFiles(timestamp)) {
            fileTypeFound = true;
        }

        if (timestamp.getClass().equals(java.io.File.class) ||
            timestamp.getClass().equals(Integer.class) ||
            timestamp.getClass().equals(String.class) ||
            timestamp.getClass().equals(java.net.URI.class)||
            timestamp.getClass().isEnum()) {
            map.put("timestamp", timestamp);
        } else if (isListOfFile(timestamp)) {
            for(int i = 0; i< getListSize(timestamp); i++) {
                map.put("timestamp", timestamp);
            }
        }
        else {
          map.put("timestamp", JSON.serialize(timestamp));
        }
    }
    if (recipientChangeLog != null) {
        if (isFileTypeOrListOfFiles(recipientChangeLog)) {
            fileTypeFound = true;
        }

        if (recipientChangeLog.getClass().equals(java.io.File.class) ||
            recipientChangeLog.getClass().equals(Integer.class) ||
            recipientChangeLog.getClass().equals(String.class) ||
            recipientChangeLog.getClass().equals(java.net.URI.class)||
            recipientChangeLog.getClass().isEnum()) {
            map.put("recipientChangeLog", recipientChangeLog);
        } else if (isListOfFile(recipientChangeLog)) {
            for(int i = 0; i< getListSize(recipientChangeLog); i++) {
                map.put("recipientChangeLog", recipientChangeLog);
            }
        }
        else {
          map.put("recipientChangeLog", JSON.serialize(recipientChangeLog));
        }
    }
    if (documentChangeLog != null) {
        if (isFileTypeOrListOfFiles(documentChangeLog)) {
            fileTypeFound = true;
        }

        if (documentChangeLog.getClass().equals(java.io.File.class) ||
            documentChangeLog.getClass().equals(Integer.class) ||
            documentChangeLog.getClass().equals(String.class) ||
            documentChangeLog.getClass().equals(java.net.URI.class)||
            documentChangeLog.getClass().isEnum()) {
            map.put("documentChangeLog", documentChangeLog);
        } else if (isListOfFile(documentChangeLog)) {
            for(int i = 0; i< getListSize(documentChangeLog); i++) {
                map.put("documentChangeLog", documentChangeLog);
            }
        }
        else {
          map.put("documentChangeLog", JSON.serialize(documentChangeLog));
        }
    }
    if (fieldChangeLog != null) {
        if (isFileTypeOrListOfFiles(fieldChangeLog)) {
            fileTypeFound = true;
        }

        if (fieldChangeLog.getClass().equals(java.io.File.class) ||
            fieldChangeLog.getClass().equals(Integer.class) ||
            fieldChangeLog.getClass().equals(String.class) ||
            fieldChangeLog.getClass().equals(java.net.URI.class)||
            fieldChangeLog.getClass().isEnum()) {
            map.put("fieldChangeLog", fieldChangeLog);
        } else if (isListOfFile(fieldChangeLog)) {
            for(int i = 0; i< getListSize(fieldChangeLog); i++) {
                map.put("fieldChangeLog", fieldChangeLog);
            }
        }
        else {
          map.put("fieldChangeLog", JSON.serialize(fieldChangeLog));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("toName");
    openapiFields.add("toEmail");
    openapiFields.add("ipaddress");
    openapiFields.add("action");
    openapiFields.add("timestamp");
    openapiFields.add("recipientChangeLog");
    openapiFields.add("documentChangeLog");
    openapiFields.add("fieldChangeLog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditTrail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditTrail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditTrail is not found in the empty JSON string", AuditTrail.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("toName") != null && !jsonObj.get("toName").isJsonNull()) && !jsonObj.get("toName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toName").toString()));
      }
      if ((jsonObj.get("toEmail") != null && !jsonObj.get("toEmail").isJsonNull()) && !jsonObj.get("toEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toEmail").toString()));
      }
      if ((jsonObj.get("ipaddress") != null && !jsonObj.get("ipaddress").isJsonNull()) && !jsonObj.get("ipaddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipaddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipaddress").toString()));
      }
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `recipientChangeLog`
      if (jsonObj.get("recipientChangeLog") != null && !jsonObj.get("recipientChangeLog").isJsonNull()) {
        RecipientChangeLog.validateJsonElement(jsonObj.get("recipientChangeLog"));
      }
      // validate the optional field `documentChangeLog`
      if (jsonObj.get("documentChangeLog") != null && !jsonObj.get("documentChangeLog").isJsonNull()) {
        ModificationDetails.validateJsonElement(jsonObj.get("documentChangeLog"));
      }
      // validate the optional field `fieldChangeLog`
      if (jsonObj.get("fieldChangeLog") != null && !jsonObj.get("fieldChangeLog").isJsonNull()) {
        ModificationDetails.validateJsonElement(jsonObj.get("fieldChangeLog"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditTrail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditTrail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditTrail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditTrail.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditTrail>() {
           @Override
           public void write(JsonWriter out, AuditTrail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditTrail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditTrail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditTrail
   * @throws IOException if the JSON string is invalid with respect to AuditTrail
   */
  public static AuditTrail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditTrail.class);
  }

  /**
   * Convert an instance of AuditTrail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

