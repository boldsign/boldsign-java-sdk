/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.Address;
import com.boldsign.model.Date;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * IdDocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class IdDocument {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_DOB = "dob";
  @SerializedName(SERIALIZED_NAME_DOB)
  private Date dob;

  public static final String SERIALIZED_NAME_ISSUED_DATE = "issuedDate";
  @SerializedName(SERIALIZED_NAME_ISSUED_DATE)
  private Date issuedDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private Date expirationDate;

  public static final String SERIALIZED_NAME_DOCUMENT_FILES = "documentFiles";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILES)
  private List<String> documentFiles;

  public static final String SERIALIZED_NAME_SELFIE_FILE = "selfieFile";
  @SerializedName(SERIALIZED_NAME_SELFIE_FILE)
  private String selfieFile;

  public IdDocument() {
  }

  public IdDocument type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public IdDocument firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public IdDocument lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public IdDocument country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public IdDocument documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Get documentNumber
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public IdDocument address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public IdDocument dob(Date dob) {
    this.dob = dob;
    return this;
  }

  /**
   * Get dob
   * @return dob
   */
  @javax.annotation.Nullable
  public Date getDob() {
    return dob;
  }

  public void setDob(Date dob) {
    this.dob = dob;
  }


  public IdDocument issuedDate(Date issuedDate) {
    this.issuedDate = issuedDate;
    return this;
  }

  /**
   * Get issuedDate
   * @return issuedDate
   */
  @javax.annotation.Nullable
  public Date getIssuedDate() {
    return issuedDate;
  }

  public void setIssuedDate(Date issuedDate) {
    this.issuedDate = issuedDate;
  }


  public IdDocument expirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public Date getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(Date expirationDate) {
    this.expirationDate = expirationDate;
  }


  public IdDocument documentFiles(List<String> documentFiles) {
    this.documentFiles = documentFiles;
    return this;
  }

  public IdDocument addDocumentFilesItem(String documentFilesItem) {
    if (this.documentFiles == null) {
      this.documentFiles = new ArrayList<>();
    }
    this.documentFiles.add(documentFilesItem);
    return this;
  }

  /**
   * Get documentFiles
   * @return documentFiles
   */
  @javax.annotation.Nullable
  public List<String> getDocumentFiles() {
    return documentFiles;
  }

  public void setDocumentFiles(List<String> documentFiles) {
    this.documentFiles = documentFiles;
  }


  public IdDocument selfieFile(String selfieFile) {
    this.selfieFile = selfieFile;
    return this;
  }

  /**
   * Get selfieFile
   * @return selfieFile
   */
  @javax.annotation.Nullable
  public String getSelfieFile() {
    return selfieFile;
  }

  public void setSelfieFile(String selfieFile) {
    this.selfieFile = selfieFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdDocument idDocument = (IdDocument) o;
    return Objects.equals(this.type, idDocument.type) &&
        Objects.equals(this.firstName, idDocument.firstName) &&
        Objects.equals(this.lastName, idDocument.lastName) &&
        Objects.equals(this.country, idDocument.country) &&
        Objects.equals(this.documentNumber, idDocument.documentNumber) &&
        Objects.equals(this.address, idDocument.address) &&
        Objects.equals(this.dob, idDocument.dob) &&
        Objects.equals(this.issuedDate, idDocument.issuedDate) &&
        Objects.equals(this.expirationDate, idDocument.expirationDate) &&
        Objects.equals(this.documentFiles, idDocument.documentFiles) &&
        Objects.equals(this.selfieFile, idDocument.selfieFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, firstName, lastName, country, documentNumber, address, dob, issuedDate, expirationDate, documentFiles, selfieFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdDocument {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    dob: ").append(toIndentedString(dob)).append("\n");
    sb.append("    issuedDate: ").append(toIndentedString(issuedDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    documentFiles: ").append(toIndentedString(documentFiles)).append("\n");
    sb.append("    selfieFile: ").append(toIndentedString(selfieFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (type != null) {
        if (isFileTypeOrListOfFiles(type)) {
            fileTypeFound = true;
        }

        if (type.getClass().equals(java.io.File.class) ||
            type.getClass().equals(Integer.class) ||
            type.getClass().equals(String.class) ||
            type.getClass().equals(java.net.URI.class)||
            type.getClass().isEnum()) {
            map.put("type", type);
        } else if (isListOfFile(type)) {
            for(int i = 0; i< getListSize(type); i++) {
                map.put("type", type);
            }
        }
        else {
          map.put("type", JSON.serialize(type));
        }
    }
    if (firstName != null) {
        if (isFileTypeOrListOfFiles(firstName)) {
            fileTypeFound = true;
        }

        if (firstName.getClass().equals(java.io.File.class) ||
            firstName.getClass().equals(Integer.class) ||
            firstName.getClass().equals(String.class) ||
            firstName.getClass().equals(java.net.URI.class)||
            firstName.getClass().isEnum()) {
            map.put("firstName", firstName);
        } else if (isListOfFile(firstName)) {
            for(int i = 0; i< getListSize(firstName); i++) {
                map.put("firstName", firstName);
            }
        }
        else {
          map.put("firstName", JSON.serialize(firstName));
        }
    }
    if (lastName != null) {
        if (isFileTypeOrListOfFiles(lastName)) {
            fileTypeFound = true;
        }

        if (lastName.getClass().equals(java.io.File.class) ||
            lastName.getClass().equals(Integer.class) ||
            lastName.getClass().equals(String.class) ||
            lastName.getClass().equals(java.net.URI.class)||
            lastName.getClass().isEnum()) {
            map.put("lastName", lastName);
        } else if (isListOfFile(lastName)) {
            for(int i = 0; i< getListSize(lastName); i++) {
                map.put("lastName", lastName);
            }
        }
        else {
          map.put("lastName", JSON.serialize(lastName));
        }
    }
    if (country != null) {
        if (isFileTypeOrListOfFiles(country)) {
            fileTypeFound = true;
        }

        if (country.getClass().equals(java.io.File.class) ||
            country.getClass().equals(Integer.class) ||
            country.getClass().equals(String.class) ||
            country.getClass().equals(java.net.URI.class)||
            country.getClass().isEnum()) {
            map.put("country", country);
        } else if (isListOfFile(country)) {
            for(int i = 0; i< getListSize(country); i++) {
                map.put("country", country);
            }
        }
        else {
          map.put("country", JSON.serialize(country));
        }
    }
    if (documentNumber != null) {
        if (isFileTypeOrListOfFiles(documentNumber)) {
            fileTypeFound = true;
        }

        if (documentNumber.getClass().equals(java.io.File.class) ||
            documentNumber.getClass().equals(Integer.class) ||
            documentNumber.getClass().equals(String.class) ||
            documentNumber.getClass().equals(java.net.URI.class)||
            documentNumber.getClass().isEnum()) {
            map.put("documentNumber", documentNumber);
        } else if (isListOfFile(documentNumber)) {
            for(int i = 0; i< getListSize(documentNumber); i++) {
                map.put("documentNumber", documentNumber);
            }
        }
        else {
          map.put("documentNumber", JSON.serialize(documentNumber));
        }
    }
    if (address != null) {
        if (isFileTypeOrListOfFiles(address)) {
            fileTypeFound = true;
        }

        if (address.getClass().equals(java.io.File.class) ||
            address.getClass().equals(Integer.class) ||
            address.getClass().equals(String.class) ||
            address.getClass().equals(java.net.URI.class)||
            address.getClass().isEnum()) {
            map.put("address", address);
        } else if (isListOfFile(address)) {
            for(int i = 0; i< getListSize(address); i++) {
                map.put("address", address);
            }
        }
        else {
          map.put("address", JSON.serialize(address));
        }
    }
    if (dob != null) {
        if (isFileTypeOrListOfFiles(dob)) {
            fileTypeFound = true;
        }

        if (dob.getClass().equals(java.io.File.class) ||
            dob.getClass().equals(Integer.class) ||
            dob.getClass().equals(String.class) ||
            dob.getClass().equals(java.net.URI.class)||
            dob.getClass().isEnum()) {
            map.put("dob", dob);
        } else if (isListOfFile(dob)) {
            for(int i = 0; i< getListSize(dob); i++) {
                map.put("dob", dob);
            }
        }
        else {
          map.put("dob", JSON.serialize(dob));
        }
    }
    if (issuedDate != null) {
        if (isFileTypeOrListOfFiles(issuedDate)) {
            fileTypeFound = true;
        }

        if (issuedDate.getClass().equals(java.io.File.class) ||
            issuedDate.getClass().equals(Integer.class) ||
            issuedDate.getClass().equals(String.class) ||
            issuedDate.getClass().equals(java.net.URI.class)||
            issuedDate.getClass().isEnum()) {
            map.put("issuedDate", issuedDate);
        } else if (isListOfFile(issuedDate)) {
            for(int i = 0; i< getListSize(issuedDate); i++) {
                map.put("issuedDate", issuedDate);
            }
        }
        else {
          map.put("issuedDate", JSON.serialize(issuedDate));
        }
    }
    if (expirationDate != null) {
        if (isFileTypeOrListOfFiles(expirationDate)) {
            fileTypeFound = true;
        }

        if (expirationDate.getClass().equals(java.io.File.class) ||
            expirationDate.getClass().equals(Integer.class) ||
            expirationDate.getClass().equals(String.class) ||
            expirationDate.getClass().equals(java.net.URI.class)||
            expirationDate.getClass().isEnum()) {
            map.put("expirationDate", expirationDate);
        } else if (isListOfFile(expirationDate)) {
            for(int i = 0; i< getListSize(expirationDate); i++) {
                map.put("expirationDate", expirationDate);
            }
        }
        else {
          map.put("expirationDate", JSON.serialize(expirationDate));
        }
    }
    if (documentFiles != null) {
        if (isFileTypeOrListOfFiles(documentFiles)) {
            fileTypeFound = true;
        }

        if (documentFiles.getClass().equals(java.io.File.class) ||
            documentFiles.getClass().equals(Integer.class) ||
            documentFiles.getClass().equals(String.class) ||
            documentFiles.getClass().equals(java.net.URI.class)||
            documentFiles.getClass().isEnum()) {
            map.put("documentFiles", documentFiles);
        } else if (isListOfFile(documentFiles)) {
            for(int i = 0; i< getListSize(documentFiles); i++) {
                map.put("documentFiles", documentFiles);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentFiles) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentFiles", objectList);
        }
    }
    if (selfieFile != null) {
        if (isFileTypeOrListOfFiles(selfieFile)) {
            fileTypeFound = true;
        }

        if (selfieFile.getClass().equals(java.io.File.class) ||
            selfieFile.getClass().equals(Integer.class) ||
            selfieFile.getClass().equals(String.class) ||
            selfieFile.getClass().equals(java.net.URI.class)||
            selfieFile.getClass().isEnum()) {
            map.put("selfieFile", selfieFile);
        } else if (isListOfFile(selfieFile)) {
            for(int i = 0; i< getListSize(selfieFile); i++) {
                map.put("selfieFile", selfieFile);
            }
        }
        else {
          map.put("selfieFile", JSON.serialize(selfieFile));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("country");
    openapiFields.add("documentNumber");
    openapiFields.add("address");
    openapiFields.add("dob");
    openapiFields.add("issuedDate");
    openapiFields.add("expirationDate");
    openapiFields.add("documentFiles");
    openapiFields.add("selfieFile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdDocument is not found in the empty JSON string", IdDocument.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `dob`
      if (jsonObj.get("dob") != null && !jsonObj.get("dob").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("dob"));
      }
      // validate the optional field `issuedDate`
      if (jsonObj.get("issuedDate") != null && !jsonObj.get("issuedDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("issuedDate"));
      }
      // validate the optional field `expirationDate`
      if (jsonObj.get("expirationDate") != null && !jsonObj.get("expirationDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("expirationDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentFiles") != null && !jsonObj.get("documentFiles").isJsonNull() && !jsonObj.get("documentFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentFiles` to be an array in the JSON string but got `%s`", jsonObj.get("documentFiles").toString()));
      }
      if ((jsonObj.get("selfieFile") != null && !jsonObj.get("selfieFile").isJsonNull()) && !jsonObj.get("selfieFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfieFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfieFile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<IdDocument>() {
           @Override
           public void write(JsonWriter out, IdDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdDocument
   * @throws IOException if the JSON string is invalid with respect to IdDocument
   */
  public static IdDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdDocument.class);
  }

  /**
   * Convert an instance of IdDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

