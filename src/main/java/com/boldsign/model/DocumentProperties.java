/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.AuditTrail;
import com.boldsign.model.BehalfOf;
import com.boldsign.model.DocumentCcDetails;
import com.boldsign.model.DocumentFiles;
import com.boldsign.model.DocumentFormFields;
import com.boldsign.model.DocumentReassign;
import com.boldsign.model.DocumentSenderDetail;
import com.boldsign.model.DocumentSignerDetails;
import com.boldsign.model.FormGroup;
import com.boldsign.model.RecipientNotificationSettings;
import com.boldsign.model.ReminderSettings;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * DocumentProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class DocumentProperties {
  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_MESSAGE_TITLE = "messageTitle";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TITLE)
  private String messageTitle;

  public static final String SERIALIZED_NAME_DOCUMENT_DESCRIPTION = "documentDescription";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DESCRIPTION)
  private String documentDescription;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    DECLINED("Declined"),
    
    EXPIRED("Expired"),
    
    REVOKED("Revoked"),
    
    DRAFT("Draft"),
    
    SCHEDULED("Scheduled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<DocumentFiles> files;

  public static final String SERIALIZED_NAME_SENDER_DETAIL = "senderDetail";
  @SerializedName(SERIALIZED_NAME_SENDER_DETAIL)
  private DocumentSenderDetail senderDetail;

  public static final String SERIALIZED_NAME_SIGNER_DETAILS = "signerDetails";
  @SerializedName(SERIALIZED_NAME_SIGNER_DETAILS)
  private List<DocumentSignerDetails> signerDetails;

  public static final String SERIALIZED_NAME_FORM_GROUPS = "formGroups";
  @SerializedName(SERIALIZED_NAME_FORM_GROUPS)
  private List<FormGroup> formGroups;

  public static final String SERIALIZED_NAME_COMMON_FIELDS = "commonFields";
  @SerializedName(SERIALIZED_NAME_COMMON_FIELDS)
  private List<DocumentFormFields> commonFields;

  public static final String SERIALIZED_NAME_BEHALF_OF = "behalfOf";
  @SerializedName(SERIALIZED_NAME_BEHALF_OF)
  private BehalfOf behalfOf;

  public static final String SERIALIZED_NAME_CC_DETAILS = "ccDetails";
  @SerializedName(SERIALIZED_NAME_CC_DETAILS)
  private List<DocumentCcDetails> ccDetails;

  public static final String SERIALIZED_NAME_REMINDER_SETTINGS = "reminderSettings";
  @SerializedName(SERIALIZED_NAME_REMINDER_SETTINGS)
  private ReminderSettings reminderSettings;

  public static final String SERIALIZED_NAME_REASSIGN = "reassign";
  @SerializedName(SERIALIZED_NAME_REASSIGN)
  private List<DocumentReassign> reassign;

  public static final String SERIALIZED_NAME_DOCUMENT_HISTORY = "documentHistory";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HISTORY)
  private List<AuditTrail> documentHistory;

  public static final String SERIALIZED_NAME_ACTIVITY_BY = "activityBy";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_BY)
  private String activityBy;

  public static final String SERIALIZED_NAME_ACTIVITY_DATE = "activityDate";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATE)
  private Long activityDate;

  /**
   * Gets or Sets activityAction
   */
  @JsonAdapter(ActivityActionEnum.Adapter.class)
  public enum ActivityActionEnum {
    VIEWED("Viewed"),
    
    SIGNED("Signed"),
    
    REASSIGNED("Reassigned"),
    
    DECLINED("Declined"),
    
    REVOKED("Revoked"),
    
    EXPIRED("Expired"),
    
    DOWNLOADED("Downloaded"),
    
    DOWNLOADED_FOR_PRINT_SIGN("DownloadedForPrintSign"),
    
    INITIATE_PRINT_AND_SIGN("InitiatePrintAndSign"),
    
    INITIATE_FORM_SIGN("InitiateFormSign"),
    
    CANCEL_PRINT_AND_SIGN("CancelPrintAndSign"),
    
    COMPLETE_PRINT_AND_SIGN("CompletePrintAndSign"),
    
    REVIEWED("Reviewed"),
    
    NONE("None"),
    
    EDITING_INITIATED("EditingInitiated"),
    
    EDITING_CANCELLED("EditingCancelled"),
    
    EDITING_COMPLETED("EditingCompleted"),
    
    DOCUMENT_SCHEDULED("DocumentScheduled");

    private String value;

    ActivityActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActivityActionEnum fromValue(String value) {
      for (ActivityActionEnum b : ActivityActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActivityActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActivityActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActivityActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActivityActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActivityActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVITY_ACTION = "activityAction";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ACTION)
  private ActivityActionEnum activityAction;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_EXPIRY_DAYS = "expiryDays";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DAYS)
  private Integer expiryDays;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private Long expiryDate;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_REVOKE_MESSAGE = "revokeMessage";
  @SerializedName(SERIALIZED_NAME_REVOKE_MESSAGE)
  private String revokeMessage;

  public static final String SERIALIZED_NAME_DECLINE_MESSAGE = "declineMessage";
  @SerializedName(SERIALIZED_NAME_DECLINE_MESSAGE)
  private String declineMessage;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_DISABLE_EMAILS = "disableEmails";
  @SerializedName(SERIALIZED_NAME_DISABLE_EMAILS)
  private Boolean disableEmails;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN = "enablePrintAndSign";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN)
  private Boolean enablePrintAndSign;

  public static final String SERIALIZED_NAME_ENABLE_REASSIGN = "enableReassign";
  @SerializedName(SERIALIZED_NAME_ENABLE_REASSIGN)
  private Boolean enableReassign;

  public static final String SERIALIZED_NAME_DISABLE_EXPIRY_ALERT = "disableExpiryAlert";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXPIRY_ALERT)
  private Boolean disableExpiryAlert;

  public static final String SERIALIZED_NAME_HIDE_DOCUMENT_ID = "hideDocumentId";
  @SerializedName(SERIALIZED_NAME_HIDE_DOCUMENT_ID)
  private Boolean hideDocumentId;

  /**
   * Gets or Sets expiryDateType
   */
  @JsonAdapter(ExpiryDateTypeEnum.Adapter.class)
  public enum ExpiryDateTypeEnum {
    DAYS("Days"),
    
    HOURS("Hours"),
    
    SPECIFIC_DATE_TIME("SpecificDateTime");

    private String value;

    ExpiryDateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpiryDateTypeEnum fromValue(String value) {
      for (ExpiryDateTypeEnum b : ExpiryDateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpiryDateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpiryDateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpiryDateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpiryDateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpiryDateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRY_DATE_TYPE = "expiryDateType";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_TYPE)
  private ExpiryDateTypeEnum expiryDateType;

  public static final String SERIALIZED_NAME_EXPIRY_VALUE = "expiryValue";
  @SerializedName(SERIALIZED_NAME_EXPIRY_VALUE)
  private Long expiryValue;

  /**
   * Gets or Sets documentDownloadOption
   */
  @JsonAdapter(DocumentDownloadOptionEnum.Adapter.class)
  public enum DocumentDownloadOptionEnum {
    COMBINED("Combined"),
    
    INDIVIDUALLY("Individually");

    private String value;

    DocumentDownloadOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentDownloadOptionEnum fromValue(String value) {
      for (DocumentDownloadOptionEnum b : DocumentDownloadOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentDownloadOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentDownloadOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentDownloadOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentDownloadOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentDownloadOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION = "documentDownloadOption";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION)
  private DocumentDownloadOptionEnum documentDownloadOption;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Map<String, String> metaData;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_ENABLE_AUDIT_TRAIL_LOCALIZATION = "enableAuditTrailLocalization";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUDIT_TRAIL_LOCALIZATION)
  private Boolean enableAuditTrailLocalization;

  public static final String SERIALIZED_NAME_DOWNLOAD_FILE_NAME = "downloadFileName";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_FILE_NAME)
  private String downloadFileName;

  public static final String SERIALIZED_NAME_SCHEDULED_SEND_TIME = "scheduledSendTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_SEND_TIME)
  private Long scheduledSendTime;

  public DocumentProperties() {
  }

  public DocumentProperties documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public DocumentProperties brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public DocumentProperties messageTitle(String messageTitle) {
    this.messageTitle = messageTitle;
    return this;
  }

  /**
   * Get messageTitle
   * @return messageTitle
   */
  @javax.annotation.Nullable
  public String getMessageTitle() {
    return messageTitle;
  }

  public void setMessageTitle(String messageTitle) {
    this.messageTitle = messageTitle;
  }


  public DocumentProperties documentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
    return this;
  }

  /**
   * Get documentDescription
   * @return documentDescription
   */
  @javax.annotation.Nullable
  public String getDocumentDescription() {
    return documentDescription;
  }

  public void setDocumentDescription(String documentDescription) {
    this.documentDescription = documentDescription;
  }


  public DocumentProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DocumentProperties files(List<DocumentFiles> files) {
    this.files = files;
    return this;
  }

  public DocumentProperties addFilesItem(DocumentFiles filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<DocumentFiles> getFiles() {
    return files;
  }

  public void setFiles(List<DocumentFiles> files) {
    this.files = files;
  }


  public DocumentProperties senderDetail(DocumentSenderDetail senderDetail) {
    this.senderDetail = senderDetail;
    return this;
  }

  /**
   * Get senderDetail
   * @return senderDetail
   */
  @javax.annotation.Nullable
  public DocumentSenderDetail getSenderDetail() {
    return senderDetail;
  }

  public void setSenderDetail(DocumentSenderDetail senderDetail) {
    this.senderDetail = senderDetail;
  }


  public DocumentProperties signerDetails(List<DocumentSignerDetails> signerDetails) {
    this.signerDetails = signerDetails;
    return this;
  }

  public DocumentProperties addSignerDetailsItem(DocumentSignerDetails signerDetailsItem) {
    if (this.signerDetails == null) {
      this.signerDetails = new ArrayList<>();
    }
    this.signerDetails.add(signerDetailsItem);
    return this;
  }

  /**
   * Get signerDetails
   * @return signerDetails
   */
  @javax.annotation.Nullable
  public List<DocumentSignerDetails> getSignerDetails() {
    return signerDetails;
  }

  public void setSignerDetails(List<DocumentSignerDetails> signerDetails) {
    this.signerDetails = signerDetails;
  }


  public DocumentProperties formGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
    return this;
  }

  public DocumentProperties addFormGroupsItem(FormGroup formGroupsItem) {
    if (this.formGroups == null) {
      this.formGroups = new ArrayList<>();
    }
    this.formGroups.add(formGroupsItem);
    return this;
  }

  /**
   * Get formGroups
   * @return formGroups
   */
  @javax.annotation.Nullable
  public List<FormGroup> getFormGroups() {
    return formGroups;
  }

  public void setFormGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
  }


  public DocumentProperties commonFields(List<DocumentFormFields> commonFields) {
    this.commonFields = commonFields;
    return this;
  }

  public DocumentProperties addCommonFieldsItem(DocumentFormFields commonFieldsItem) {
    if (this.commonFields == null) {
      this.commonFields = new ArrayList<>();
    }
    this.commonFields.add(commonFieldsItem);
    return this;
  }

  /**
   * Get commonFields
   * @return commonFields
   */
  @javax.annotation.Nullable
  public List<DocumentFormFields> getCommonFields() {
    return commonFields;
  }

  public void setCommonFields(List<DocumentFormFields> commonFields) {
    this.commonFields = commonFields;
  }


  public DocumentProperties behalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
    return this;
  }

  /**
   * Get behalfOf
   * @return behalfOf
   */
  @javax.annotation.Nullable
  public BehalfOf getBehalfOf() {
    return behalfOf;
  }

  public void setBehalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
  }


  public DocumentProperties ccDetails(List<DocumentCcDetails> ccDetails) {
    this.ccDetails = ccDetails;
    return this;
  }

  public DocumentProperties addCcDetailsItem(DocumentCcDetails ccDetailsItem) {
    if (this.ccDetails == null) {
      this.ccDetails = new ArrayList<>();
    }
    this.ccDetails.add(ccDetailsItem);
    return this;
  }

  /**
   * Get ccDetails
   * @return ccDetails
   */
  @javax.annotation.Nullable
  public List<DocumentCcDetails> getCcDetails() {
    return ccDetails;
  }

  public void setCcDetails(List<DocumentCcDetails> ccDetails) {
    this.ccDetails = ccDetails;
  }


  public DocumentProperties reminderSettings(ReminderSettings reminderSettings) {
    this.reminderSettings = reminderSettings;
    return this;
  }

  /**
   * Get reminderSettings
   * @return reminderSettings
   */
  @javax.annotation.Nullable
  public ReminderSettings getReminderSettings() {
    return reminderSettings;
  }

  public void setReminderSettings(ReminderSettings reminderSettings) {
    this.reminderSettings = reminderSettings;
  }


  public DocumentProperties reassign(List<DocumentReassign> reassign) {
    this.reassign = reassign;
    return this;
  }

  public DocumentProperties addReassignItem(DocumentReassign reassignItem) {
    if (this.reassign == null) {
      this.reassign = new ArrayList<>();
    }
    this.reassign.add(reassignItem);
    return this;
  }

  /**
   * Get reassign
   * @return reassign
   */
  @javax.annotation.Nullable
  public List<DocumentReassign> getReassign() {
    return reassign;
  }

  public void setReassign(List<DocumentReassign> reassign) {
    this.reassign = reassign;
  }


  public DocumentProperties documentHistory(List<AuditTrail> documentHistory) {
    this.documentHistory = documentHistory;
    return this;
  }

  public DocumentProperties addDocumentHistoryItem(AuditTrail documentHistoryItem) {
    if (this.documentHistory == null) {
      this.documentHistory = new ArrayList<>();
    }
    this.documentHistory.add(documentHistoryItem);
    return this;
  }

  /**
   * Get documentHistory
   * @return documentHistory
   */
  @javax.annotation.Nullable
  public List<AuditTrail> getDocumentHistory() {
    return documentHistory;
  }

  public void setDocumentHistory(List<AuditTrail> documentHistory) {
    this.documentHistory = documentHistory;
  }


  public DocumentProperties activityBy(String activityBy) {
    this.activityBy = activityBy;
    return this;
  }

  /**
   * Get activityBy
   * @return activityBy
   */
  @javax.annotation.Nullable
  public String getActivityBy() {
    return activityBy;
  }

  public void setActivityBy(String activityBy) {
    this.activityBy = activityBy;
  }


  public DocumentProperties activityDate(Long activityDate) {
    this.activityDate = activityDate;
    return this;
  }

  /**
   * Get activityDate
   * @return activityDate
   */
  @javax.annotation.Nullable
  public Long getActivityDate() {
    return activityDate;
  }

  public void setActivityDate(Long activityDate) {
    this.activityDate = activityDate;
  }


  public DocumentProperties activityAction(ActivityActionEnum activityAction) {
    this.activityAction = activityAction;
    return this;
  }

  /**
   * Get activityAction
   * @return activityAction
   */
  @javax.annotation.Nullable
  public ActivityActionEnum getActivityAction() {
    return activityAction;
  }

  public void setActivityAction(ActivityActionEnum activityAction) {
    this.activityAction = activityAction;
  }


  public DocumentProperties createdDate(Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public DocumentProperties expiryDays(Integer expiryDays) {
    this.expiryDays = expiryDays;
    return this;
  }

  /**
   * Get expiryDays
   * @return expiryDays
   */
  @javax.annotation.Nullable
  public Integer getExpiryDays() {
    return expiryDays;
  }

  public void setExpiryDays(Integer expiryDays) {
    this.expiryDays = expiryDays;
  }


  public DocumentProperties expiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Get expiryDate
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public Long getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
  }


  public DocumentProperties enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public DocumentProperties isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public DocumentProperties revokeMessage(String revokeMessage) {
    this.revokeMessage = revokeMessage;
    return this;
  }

  /**
   * Get revokeMessage
   * @return revokeMessage
   */
  @javax.annotation.Nullable
  public String getRevokeMessage() {
    return revokeMessage;
  }

  public void setRevokeMessage(String revokeMessage) {
    this.revokeMessage = revokeMessage;
  }


  public DocumentProperties declineMessage(String declineMessage) {
    this.declineMessage = declineMessage;
    return this;
  }

  /**
   * Get declineMessage
   * @return declineMessage
   */
  @javax.annotation.Nullable
  public String getDeclineMessage() {
    return declineMessage;
  }

  public void setDeclineMessage(String declineMessage) {
    this.declineMessage = declineMessage;
  }


  public DocumentProperties applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nullable
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public DocumentProperties labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public DocumentProperties addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public DocumentProperties disableEmails(Boolean disableEmails) {
    this.disableEmails = disableEmails;
    return this;
  }

  /**
   * Get disableEmails
   * @return disableEmails
   */
  @javax.annotation.Nullable
  public Boolean getDisableEmails() {
    return disableEmails;
  }

  public void setDisableEmails(Boolean disableEmails) {
    this.disableEmails = disableEmails;
  }


  public DocumentProperties enablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
    return this;
  }

  /**
   * Get enablePrintAndSign
   * @return enablePrintAndSign
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrintAndSign() {
    return enablePrintAndSign;
  }

  public void setEnablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
  }


  public DocumentProperties enableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
    return this;
  }

  /**
   * Get enableReassign
   * @return enableReassign
   */
  @javax.annotation.Nullable
  public Boolean getEnableReassign() {
    return enableReassign;
  }

  public void setEnableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
  }


  public DocumentProperties disableExpiryAlert(Boolean disableExpiryAlert) {
    this.disableExpiryAlert = disableExpiryAlert;
    return this;
  }

  /**
   * Get disableExpiryAlert
   * @return disableExpiryAlert
   */
  @javax.annotation.Nullable
  public Boolean getDisableExpiryAlert() {
    return disableExpiryAlert;
  }

  public void setDisableExpiryAlert(Boolean disableExpiryAlert) {
    this.disableExpiryAlert = disableExpiryAlert;
  }


  public DocumentProperties hideDocumentId(Boolean hideDocumentId) {
    this.hideDocumentId = hideDocumentId;
    return this;
  }

  /**
   * Get hideDocumentId
   * @return hideDocumentId
   */
  @javax.annotation.Nullable
  public Boolean getHideDocumentId() {
    return hideDocumentId;
  }

  public void setHideDocumentId(Boolean hideDocumentId) {
    this.hideDocumentId = hideDocumentId;
  }


  public DocumentProperties expiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
    return this;
  }

  /**
   * Get expiryDateType
   * @return expiryDateType
   */
  @javax.annotation.Nullable
  public ExpiryDateTypeEnum getExpiryDateType() {
    return expiryDateType;
  }

  public void setExpiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
  }


  public DocumentProperties expiryValue(Long expiryValue) {
    this.expiryValue = expiryValue;
    return this;
  }

  /**
   * Get expiryValue
   * @return expiryValue
   */
  @javax.annotation.Nullable
  public Long getExpiryValue() {
    return expiryValue;
  }

  public void setExpiryValue(Long expiryValue) {
    this.expiryValue = expiryValue;
  }


  public DocumentProperties documentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
    return this;
  }

  /**
   * Get documentDownloadOption
   * @return documentDownloadOption
   */
  @javax.annotation.Nullable
  public DocumentDownloadOptionEnum getDocumentDownloadOption() {
    return documentDownloadOption;
  }

  public void setDocumentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
  }


  public DocumentProperties metaData(Map<String, String> metaData) {
    this.metaData = metaData;
    return this;
  }

  public DocumentProperties putMetaDataItem(String key, String metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new HashMap<>();
    }
    this.metaData.put(key, metaDataItem);
    return this;
  }

  /**
   * Get metaData
   * @return metaData
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetaData() {
    return metaData;
  }

  public void setMetaData(Map<String, String> metaData) {
    this.metaData = metaData;
  }


  public DocumentProperties recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public DocumentProperties enableAuditTrailLocalization(Boolean enableAuditTrailLocalization) {
    this.enableAuditTrailLocalization = enableAuditTrailLocalization;
    return this;
  }

  /**
   * Get enableAuditTrailLocalization
   * @return enableAuditTrailLocalization
   */
  @javax.annotation.Nullable
  public Boolean getEnableAuditTrailLocalization() {
    return enableAuditTrailLocalization;
  }

  public void setEnableAuditTrailLocalization(Boolean enableAuditTrailLocalization) {
    this.enableAuditTrailLocalization = enableAuditTrailLocalization;
  }


  public DocumentProperties downloadFileName(String downloadFileName) {
    this.downloadFileName = downloadFileName;
    return this;
  }

  /**
   * Get downloadFileName
   * @return downloadFileName
   */
  @javax.annotation.Nullable
  public String getDownloadFileName() {
    return downloadFileName;
  }

  public void setDownloadFileName(String downloadFileName) {
    this.downloadFileName = downloadFileName;
  }


  public DocumentProperties scheduledSendTime(Long scheduledSendTime) {
    this.scheduledSendTime = scheduledSendTime;
    return this;
  }

  /**
   * Get scheduledSendTime
   * @return scheduledSendTime
   */
  @javax.annotation.Nullable
  public Long getScheduledSendTime() {
    return scheduledSendTime;
  }

  public void setScheduledSendTime(Long scheduledSendTime) {
    this.scheduledSendTime = scheduledSendTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentProperties documentProperties = (DocumentProperties) o;
    return Objects.equals(this.documentId, documentProperties.documentId) &&
        Objects.equals(this.brandId, documentProperties.brandId) &&
        Objects.equals(this.messageTitle, documentProperties.messageTitle) &&
        Objects.equals(this.documentDescription, documentProperties.documentDescription) &&
        Objects.equals(this.status, documentProperties.status) &&
        Objects.equals(this.files, documentProperties.files) &&
        Objects.equals(this.senderDetail, documentProperties.senderDetail) &&
        Objects.equals(this.signerDetails, documentProperties.signerDetails) &&
        Objects.equals(this.formGroups, documentProperties.formGroups) &&
        Objects.equals(this.commonFields, documentProperties.commonFields) &&
        Objects.equals(this.behalfOf, documentProperties.behalfOf) &&
        Objects.equals(this.ccDetails, documentProperties.ccDetails) &&
        Objects.equals(this.reminderSettings, documentProperties.reminderSettings) &&
        Objects.equals(this.reassign, documentProperties.reassign) &&
        Objects.equals(this.documentHistory, documentProperties.documentHistory) &&
        Objects.equals(this.activityBy, documentProperties.activityBy) &&
        Objects.equals(this.activityDate, documentProperties.activityDate) &&
        Objects.equals(this.activityAction, documentProperties.activityAction) &&
        Objects.equals(this.createdDate, documentProperties.createdDate) &&
        Objects.equals(this.expiryDays, documentProperties.expiryDays) &&
        Objects.equals(this.expiryDate, documentProperties.expiryDate) &&
        Objects.equals(this.enableSigningOrder, documentProperties.enableSigningOrder) &&
        Objects.equals(this.isDeleted, documentProperties.isDeleted) &&
        Objects.equals(this.revokeMessage, documentProperties.revokeMessage) &&
        Objects.equals(this.declineMessage, documentProperties.declineMessage) &&
        Objects.equals(this.applicationId, documentProperties.applicationId) &&
        Objects.equals(this.labels, documentProperties.labels) &&
        Objects.equals(this.disableEmails, documentProperties.disableEmails) &&
        Objects.equals(this.enablePrintAndSign, documentProperties.enablePrintAndSign) &&
        Objects.equals(this.enableReassign, documentProperties.enableReassign) &&
        Objects.equals(this.disableExpiryAlert, documentProperties.disableExpiryAlert) &&
        Objects.equals(this.hideDocumentId, documentProperties.hideDocumentId) &&
        Objects.equals(this.expiryDateType, documentProperties.expiryDateType) &&
        Objects.equals(this.expiryValue, documentProperties.expiryValue) &&
        Objects.equals(this.documentDownloadOption, documentProperties.documentDownloadOption) &&
        Objects.equals(this.metaData, documentProperties.metaData) &&
        Objects.equals(this.recipientNotificationSettings, documentProperties.recipientNotificationSettings) &&
        Objects.equals(this.enableAuditTrailLocalization, documentProperties.enableAuditTrailLocalization) &&
        Objects.equals(this.downloadFileName, documentProperties.downloadFileName) &&
        Objects.equals(this.scheduledSendTime, documentProperties.scheduledSendTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentId, brandId, messageTitle, documentDescription, status, files, senderDetail, signerDetails, formGroups, commonFields, behalfOf, ccDetails, reminderSettings, reassign, documentHistory, activityBy, activityDate, activityAction, createdDate, expiryDays, expiryDate, enableSigningOrder, isDeleted, revokeMessage, declineMessage, applicationId, labels, disableEmails, enablePrintAndSign, enableReassign, disableExpiryAlert, hideDocumentId, expiryDateType, expiryValue, documentDownloadOption, metaData, recipientNotificationSettings, enableAuditTrailLocalization, downloadFileName, scheduledSendTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentProperties {\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    messageTitle: ").append(toIndentedString(messageTitle)).append("\n");
    sb.append("    documentDescription: ").append(toIndentedString(documentDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    senderDetail: ").append(toIndentedString(senderDetail)).append("\n");
    sb.append("    signerDetails: ").append(toIndentedString(signerDetails)).append("\n");
    sb.append("    formGroups: ").append(toIndentedString(formGroups)).append("\n");
    sb.append("    commonFields: ").append(toIndentedString(commonFields)).append("\n");
    sb.append("    behalfOf: ").append(toIndentedString(behalfOf)).append("\n");
    sb.append("    ccDetails: ").append(toIndentedString(ccDetails)).append("\n");
    sb.append("    reminderSettings: ").append(toIndentedString(reminderSettings)).append("\n");
    sb.append("    reassign: ").append(toIndentedString(reassign)).append("\n");
    sb.append("    documentHistory: ").append(toIndentedString(documentHistory)).append("\n");
    sb.append("    activityBy: ").append(toIndentedString(activityBy)).append("\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    activityAction: ").append(toIndentedString(activityAction)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    expiryDays: ").append(toIndentedString(expiryDays)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    revokeMessage: ").append(toIndentedString(revokeMessage)).append("\n");
    sb.append("    declineMessage: ").append(toIndentedString(declineMessage)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    disableEmails: ").append(toIndentedString(disableEmails)).append("\n");
    sb.append("    enablePrintAndSign: ").append(toIndentedString(enablePrintAndSign)).append("\n");
    sb.append("    enableReassign: ").append(toIndentedString(enableReassign)).append("\n");
    sb.append("    disableExpiryAlert: ").append(toIndentedString(disableExpiryAlert)).append("\n");
    sb.append("    hideDocumentId: ").append(toIndentedString(hideDocumentId)).append("\n");
    sb.append("    expiryDateType: ").append(toIndentedString(expiryDateType)).append("\n");
    sb.append("    expiryValue: ").append(toIndentedString(expiryValue)).append("\n");
    sb.append("    documentDownloadOption: ").append(toIndentedString(documentDownloadOption)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    enableAuditTrailLocalization: ").append(toIndentedString(enableAuditTrailLocalization)).append("\n");
    sb.append("    downloadFileName: ").append(toIndentedString(downloadFileName)).append("\n");
    sb.append("    scheduledSendTime: ").append(toIndentedString(scheduledSendTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (documentId != null) {
        if (isFileTypeOrListOfFiles(documentId)) {
            fileTypeFound = true;
        }

        if (documentId.getClass().equals(java.io.File.class) ||
            documentId.getClass().equals(Integer.class) ||
            documentId.getClass().equals(String.class) ||
            documentId.getClass().equals(java.net.URI.class)||
            documentId.getClass().isEnum()) {
            map.put("documentId", documentId);
        } else if (isListOfFile(documentId)) {
            for(int i = 0; i< getListSize(documentId); i++) {
                map.put("documentId", documentId);
            }
        }
        else {
          map.put("documentId", JSON.serialize(documentId));
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().equals(java.net.URI.class)||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", JSON.serialize(brandId));
        }
    }
    if (messageTitle != null) {
        if (isFileTypeOrListOfFiles(messageTitle)) {
            fileTypeFound = true;
        }

        if (messageTitle.getClass().equals(java.io.File.class) ||
            messageTitle.getClass().equals(Integer.class) ||
            messageTitle.getClass().equals(String.class) ||
            messageTitle.getClass().equals(java.net.URI.class)||
            messageTitle.getClass().isEnum()) {
            map.put("messageTitle", messageTitle);
        } else if (isListOfFile(messageTitle)) {
            for(int i = 0; i< getListSize(messageTitle); i++) {
                map.put("messageTitle", messageTitle);
            }
        }
        else {
          map.put("messageTitle", JSON.serialize(messageTitle));
        }
    }
    if (documentDescription != null) {
        if (isFileTypeOrListOfFiles(documentDescription)) {
            fileTypeFound = true;
        }

        if (documentDescription.getClass().equals(java.io.File.class) ||
            documentDescription.getClass().equals(Integer.class) ||
            documentDescription.getClass().equals(String.class) ||
            documentDescription.getClass().equals(java.net.URI.class)||
            documentDescription.getClass().isEnum()) {
            map.put("documentDescription", documentDescription);
        } else if (isListOfFile(documentDescription)) {
            for(int i = 0; i< getListSize(documentDescription); i++) {
                map.put("documentDescription", documentDescription);
            }
        }
        else {
          map.put("documentDescription", JSON.serialize(documentDescription));
        }
    }
    if (status != null) {
        if (isFileTypeOrListOfFiles(status)) {
            fileTypeFound = true;
        }

        if (status.getClass().equals(java.io.File.class) ||
            status.getClass().equals(Integer.class) ||
            status.getClass().equals(String.class) ||
            status.getClass().equals(java.net.URI.class)||
            status.getClass().isEnum()) {
            map.put("status", status);
        } else if (isListOfFile(status)) {
            for(int i = 0; i< getListSize(status); i++) {
                map.put("status", status);
            }
        }
        else {
          map.put("status", JSON.serialize(status));
        }
    }
    if (files != null) {
        if (isFileTypeOrListOfFiles(files)) {
            fileTypeFound = true;
        }

        if (files.getClass().equals(java.io.File.class) ||
            files.getClass().equals(Integer.class) ||
            files.getClass().equals(String.class) ||
            files.getClass().equals(java.net.URI.class)||
            files.getClass().isEnum()) {
            map.put("files", files);
        } else if (isListOfFile(files)) {
            for(int i = 0; i< getListSize(files); i++) {
                map.put("files", files);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : files) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("files", objectList);
        }
    }
    if (senderDetail != null) {
        if (isFileTypeOrListOfFiles(senderDetail)) {
            fileTypeFound = true;
        }

        if (senderDetail.getClass().equals(java.io.File.class) ||
            senderDetail.getClass().equals(Integer.class) ||
            senderDetail.getClass().equals(String.class) ||
            senderDetail.getClass().equals(java.net.URI.class)||
            senderDetail.getClass().isEnum()) {
            map.put("senderDetail", senderDetail);
        } else if (isListOfFile(senderDetail)) {
            for(int i = 0; i< getListSize(senderDetail); i++) {
                map.put("senderDetail", senderDetail);
            }
        }
        else {
          map.put("senderDetail", JSON.serialize(senderDetail));
        }
    }
    if (signerDetails != null) {
        if (isFileTypeOrListOfFiles(signerDetails)) {
            fileTypeFound = true;
        }

        if (signerDetails.getClass().equals(java.io.File.class) ||
            signerDetails.getClass().equals(Integer.class) ||
            signerDetails.getClass().equals(String.class) ||
            signerDetails.getClass().equals(java.net.URI.class)||
            signerDetails.getClass().isEnum()) {
            map.put("signerDetails", signerDetails);
        } else if (isListOfFile(signerDetails)) {
            for(int i = 0; i< getListSize(signerDetails); i++) {
                map.put("signerDetails", signerDetails);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : signerDetails) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("signerDetails", objectList);
        }
    }
    if (formGroups != null) {
        if (isFileTypeOrListOfFiles(formGroups)) {
            fileTypeFound = true;
        }

        if (formGroups.getClass().equals(java.io.File.class) ||
            formGroups.getClass().equals(Integer.class) ||
            formGroups.getClass().equals(String.class) ||
            formGroups.getClass().equals(java.net.URI.class)||
            formGroups.getClass().isEnum()) {
            map.put("formGroups", formGroups);
        } else if (isListOfFile(formGroups)) {
            for(int i = 0; i< getListSize(formGroups); i++) {
                map.put("formGroups", formGroups);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formGroups) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formGroups", objectList);
        }
    }
    if (commonFields != null) {
        if (isFileTypeOrListOfFiles(commonFields)) {
            fileTypeFound = true;
        }

        if (commonFields.getClass().equals(java.io.File.class) ||
            commonFields.getClass().equals(Integer.class) ||
            commonFields.getClass().equals(String.class) ||
            commonFields.getClass().equals(java.net.URI.class)||
            commonFields.getClass().isEnum()) {
            map.put("commonFields", commonFields);
        } else if (isListOfFile(commonFields)) {
            for(int i = 0; i< getListSize(commonFields); i++) {
                map.put("commonFields", commonFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : commonFields) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("commonFields", objectList);
        }
    }
    if (behalfOf != null) {
        if (isFileTypeOrListOfFiles(behalfOf)) {
            fileTypeFound = true;
        }

        if (behalfOf.getClass().equals(java.io.File.class) ||
            behalfOf.getClass().equals(Integer.class) ||
            behalfOf.getClass().equals(String.class) ||
            behalfOf.getClass().equals(java.net.URI.class)||
            behalfOf.getClass().isEnum()) {
            map.put("behalfOf", behalfOf);
        } else if (isListOfFile(behalfOf)) {
            for(int i = 0; i< getListSize(behalfOf); i++) {
                map.put("behalfOf", behalfOf);
            }
        }
        else {
          map.put("behalfOf", JSON.serialize(behalfOf));
        }
    }
    if (ccDetails != null) {
        if (isFileTypeOrListOfFiles(ccDetails)) {
            fileTypeFound = true;
        }

        if (ccDetails.getClass().equals(java.io.File.class) ||
            ccDetails.getClass().equals(Integer.class) ||
            ccDetails.getClass().equals(String.class) ||
            ccDetails.getClass().equals(java.net.URI.class)||
            ccDetails.getClass().isEnum()) {
            map.put("ccDetails", ccDetails);
        } else if (isListOfFile(ccDetails)) {
            for(int i = 0; i< getListSize(ccDetails); i++) {
                map.put("ccDetails", ccDetails);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : ccDetails) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("ccDetails", objectList);
        }
    }
    if (reminderSettings != null) {
        if (isFileTypeOrListOfFiles(reminderSettings)) {
            fileTypeFound = true;
        }

        if (reminderSettings.getClass().equals(java.io.File.class) ||
            reminderSettings.getClass().equals(Integer.class) ||
            reminderSettings.getClass().equals(String.class) ||
            reminderSettings.getClass().equals(java.net.URI.class)||
            reminderSettings.getClass().isEnum()) {
            map.put("reminderSettings", reminderSettings);
        } else if (isListOfFile(reminderSettings)) {
            for(int i = 0; i< getListSize(reminderSettings); i++) {
                map.put("reminderSettings", reminderSettings);
            }
        }
        else {
          map.put("reminderSettings", JSON.serialize(reminderSettings));
        }
    }
    if (reassign != null) {
        if (isFileTypeOrListOfFiles(reassign)) {
            fileTypeFound = true;
        }

        if (reassign.getClass().equals(java.io.File.class) ||
            reassign.getClass().equals(Integer.class) ||
            reassign.getClass().equals(String.class) ||
            reassign.getClass().equals(java.net.URI.class)||
            reassign.getClass().isEnum()) {
            map.put("reassign", reassign);
        } else if (isListOfFile(reassign)) {
            for(int i = 0; i< getListSize(reassign); i++) {
                map.put("reassign", reassign);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : reassign) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("reassign", objectList);
        }
    }
    if (documentHistory != null) {
        if (isFileTypeOrListOfFiles(documentHistory)) {
            fileTypeFound = true;
        }

        if (documentHistory.getClass().equals(java.io.File.class) ||
            documentHistory.getClass().equals(Integer.class) ||
            documentHistory.getClass().equals(String.class) ||
            documentHistory.getClass().equals(java.net.URI.class)||
            documentHistory.getClass().isEnum()) {
            map.put("documentHistory", documentHistory);
        } else if (isListOfFile(documentHistory)) {
            for(int i = 0; i< getListSize(documentHistory); i++) {
                map.put("documentHistory", documentHistory);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentHistory) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentHistory", objectList);
        }
    }
    if (activityBy != null) {
        if (isFileTypeOrListOfFiles(activityBy)) {
            fileTypeFound = true;
        }

        if (activityBy.getClass().equals(java.io.File.class) ||
            activityBy.getClass().equals(Integer.class) ||
            activityBy.getClass().equals(String.class) ||
            activityBy.getClass().equals(java.net.URI.class)||
            activityBy.getClass().isEnum()) {
            map.put("activityBy", activityBy);
        } else if (isListOfFile(activityBy)) {
            for(int i = 0; i< getListSize(activityBy); i++) {
                map.put("activityBy", activityBy);
            }
        }
        else {
          map.put("activityBy", JSON.serialize(activityBy));
        }
    }
    if (activityDate != null) {
        if (isFileTypeOrListOfFiles(activityDate)) {
            fileTypeFound = true;
        }

        if (activityDate.getClass().equals(java.io.File.class) ||
            activityDate.getClass().equals(Integer.class) ||
            activityDate.getClass().equals(String.class) ||
            activityDate.getClass().equals(java.net.URI.class)||
            activityDate.getClass().isEnum()) {
            map.put("activityDate", activityDate);
        } else if (isListOfFile(activityDate)) {
            for(int i = 0; i< getListSize(activityDate); i++) {
                map.put("activityDate", activityDate);
            }
        }
        else {
          map.put("activityDate", JSON.serialize(activityDate));
        }
    }
    if (activityAction != null) {
        if (isFileTypeOrListOfFiles(activityAction)) {
            fileTypeFound = true;
        }

        if (activityAction.getClass().equals(java.io.File.class) ||
            activityAction.getClass().equals(Integer.class) ||
            activityAction.getClass().equals(String.class) ||
            activityAction.getClass().equals(java.net.URI.class)||
            activityAction.getClass().isEnum()) {
            map.put("activityAction", activityAction);
        } else if (isListOfFile(activityAction)) {
            for(int i = 0; i< getListSize(activityAction); i++) {
                map.put("activityAction", activityAction);
            }
        }
        else {
          map.put("activityAction", JSON.serialize(activityAction));
        }
    }
    if (createdDate != null) {
        if (isFileTypeOrListOfFiles(createdDate)) {
            fileTypeFound = true;
        }

        if (createdDate.getClass().equals(java.io.File.class) ||
            createdDate.getClass().equals(Integer.class) ||
            createdDate.getClass().equals(String.class) ||
            createdDate.getClass().equals(java.net.URI.class)||
            createdDate.getClass().isEnum()) {
            map.put("createdDate", createdDate);
        } else if (isListOfFile(createdDate)) {
            for(int i = 0; i< getListSize(createdDate); i++) {
                map.put("createdDate", createdDate);
            }
        }
        else {
          map.put("createdDate", JSON.serialize(createdDate));
        }
    }
    if (expiryDays != null) {
        if (isFileTypeOrListOfFiles(expiryDays)) {
            fileTypeFound = true;
        }

        if (expiryDays.getClass().equals(java.io.File.class) ||
            expiryDays.getClass().equals(Integer.class) ||
            expiryDays.getClass().equals(String.class) ||
            expiryDays.getClass().equals(java.net.URI.class)||
            expiryDays.getClass().isEnum()) {
            map.put("expiryDays", expiryDays);
        } else if (isListOfFile(expiryDays)) {
            for(int i = 0; i< getListSize(expiryDays); i++) {
                map.put("expiryDays", expiryDays);
            }
        }
        else {
          map.put("expiryDays", JSON.serialize(expiryDays));
        }
    }
    if (expiryDate != null) {
        if (isFileTypeOrListOfFiles(expiryDate)) {
            fileTypeFound = true;
        }

        if (expiryDate.getClass().equals(java.io.File.class) ||
            expiryDate.getClass().equals(Integer.class) ||
            expiryDate.getClass().equals(String.class) ||
            expiryDate.getClass().equals(java.net.URI.class)||
            expiryDate.getClass().isEnum()) {
            map.put("expiryDate", expiryDate);
        } else if (isListOfFile(expiryDate)) {
            for(int i = 0; i< getListSize(expiryDate); i++) {
                map.put("expiryDate", expiryDate);
            }
        }
        else {
          map.put("expiryDate", JSON.serialize(expiryDate));
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().equals(java.net.URI.class)||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", JSON.serialize(enableSigningOrder));
        }
    }
    if (isDeleted != null) {
        if (isFileTypeOrListOfFiles(isDeleted)) {
            fileTypeFound = true;
        }

        if (isDeleted.getClass().equals(java.io.File.class) ||
            isDeleted.getClass().equals(Integer.class) ||
            isDeleted.getClass().equals(String.class) ||
            isDeleted.getClass().equals(java.net.URI.class)||
            isDeleted.getClass().isEnum()) {
            map.put("isDeleted", isDeleted);
        } else if (isListOfFile(isDeleted)) {
            for(int i = 0; i< getListSize(isDeleted); i++) {
                map.put("isDeleted", isDeleted);
            }
        }
        else {
          map.put("isDeleted", JSON.serialize(isDeleted));
        }
    }
    if (revokeMessage != null) {
        if (isFileTypeOrListOfFiles(revokeMessage)) {
            fileTypeFound = true;
        }

        if (revokeMessage.getClass().equals(java.io.File.class) ||
            revokeMessage.getClass().equals(Integer.class) ||
            revokeMessage.getClass().equals(String.class) ||
            revokeMessage.getClass().equals(java.net.URI.class)||
            revokeMessage.getClass().isEnum()) {
            map.put("revokeMessage", revokeMessage);
        } else if (isListOfFile(revokeMessage)) {
            for(int i = 0; i< getListSize(revokeMessage); i++) {
                map.put("revokeMessage", revokeMessage);
            }
        }
        else {
          map.put("revokeMessage", JSON.serialize(revokeMessage));
        }
    }
    if (declineMessage != null) {
        if (isFileTypeOrListOfFiles(declineMessage)) {
            fileTypeFound = true;
        }

        if (declineMessage.getClass().equals(java.io.File.class) ||
            declineMessage.getClass().equals(Integer.class) ||
            declineMessage.getClass().equals(String.class) ||
            declineMessage.getClass().equals(java.net.URI.class)||
            declineMessage.getClass().isEnum()) {
            map.put("declineMessage", declineMessage);
        } else if (isListOfFile(declineMessage)) {
            for(int i = 0; i< getListSize(declineMessage); i++) {
                map.put("declineMessage", declineMessage);
            }
        }
        else {
          map.put("declineMessage", JSON.serialize(declineMessage));
        }
    }
    if (applicationId != null) {
        if (isFileTypeOrListOfFiles(applicationId)) {
            fileTypeFound = true;
        }

        if (applicationId.getClass().equals(java.io.File.class) ||
            applicationId.getClass().equals(Integer.class) ||
            applicationId.getClass().equals(String.class) ||
            applicationId.getClass().equals(java.net.URI.class)||
            applicationId.getClass().isEnum()) {
            map.put("applicationId", applicationId);
        } else if (isListOfFile(applicationId)) {
            for(int i = 0; i< getListSize(applicationId); i++) {
                map.put("applicationId", applicationId);
            }
        }
        else {
          map.put("applicationId", JSON.serialize(applicationId));
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().equals(java.net.URI.class)||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (disableEmails != null) {
        if (isFileTypeOrListOfFiles(disableEmails)) {
            fileTypeFound = true;
        }

        if (disableEmails.getClass().equals(java.io.File.class) ||
            disableEmails.getClass().equals(Integer.class) ||
            disableEmails.getClass().equals(String.class) ||
            disableEmails.getClass().equals(java.net.URI.class)||
            disableEmails.getClass().isEnum()) {
            map.put("disableEmails", disableEmails);
        } else if (isListOfFile(disableEmails)) {
            for(int i = 0; i< getListSize(disableEmails); i++) {
                map.put("disableEmails", disableEmails);
            }
        }
        else {
          map.put("disableEmails", JSON.serialize(disableEmails));
        }
    }
    if (enablePrintAndSign != null) {
        if (isFileTypeOrListOfFiles(enablePrintAndSign)) {
            fileTypeFound = true;
        }

        if (enablePrintAndSign.getClass().equals(java.io.File.class) ||
            enablePrintAndSign.getClass().equals(Integer.class) ||
            enablePrintAndSign.getClass().equals(String.class) ||
            enablePrintAndSign.getClass().equals(java.net.URI.class)||
            enablePrintAndSign.getClass().isEnum()) {
            map.put("enablePrintAndSign", enablePrintAndSign);
        } else if (isListOfFile(enablePrintAndSign)) {
            for(int i = 0; i< getListSize(enablePrintAndSign); i++) {
                map.put("enablePrintAndSign", enablePrintAndSign);
            }
        }
        else {
          map.put("enablePrintAndSign", JSON.serialize(enablePrintAndSign));
        }
    }
    if (enableReassign != null) {
        if (isFileTypeOrListOfFiles(enableReassign)) {
            fileTypeFound = true;
        }

        if (enableReassign.getClass().equals(java.io.File.class) ||
            enableReassign.getClass().equals(Integer.class) ||
            enableReassign.getClass().equals(String.class) ||
            enableReassign.getClass().equals(java.net.URI.class)||
            enableReassign.getClass().isEnum()) {
            map.put("enableReassign", enableReassign);
        } else if (isListOfFile(enableReassign)) {
            for(int i = 0; i< getListSize(enableReassign); i++) {
                map.put("enableReassign", enableReassign);
            }
        }
        else {
          map.put("enableReassign", JSON.serialize(enableReassign));
        }
    }
    if (disableExpiryAlert != null) {
        if (isFileTypeOrListOfFiles(disableExpiryAlert)) {
            fileTypeFound = true;
        }

        if (disableExpiryAlert.getClass().equals(java.io.File.class) ||
            disableExpiryAlert.getClass().equals(Integer.class) ||
            disableExpiryAlert.getClass().equals(String.class) ||
            disableExpiryAlert.getClass().equals(java.net.URI.class)||
            disableExpiryAlert.getClass().isEnum()) {
            map.put("disableExpiryAlert", disableExpiryAlert);
        } else if (isListOfFile(disableExpiryAlert)) {
            for(int i = 0; i< getListSize(disableExpiryAlert); i++) {
                map.put("disableExpiryAlert", disableExpiryAlert);
            }
        }
        else {
          map.put("disableExpiryAlert", JSON.serialize(disableExpiryAlert));
        }
    }
    if (hideDocumentId != null) {
        if (isFileTypeOrListOfFiles(hideDocumentId)) {
            fileTypeFound = true;
        }

        if (hideDocumentId.getClass().equals(java.io.File.class) ||
            hideDocumentId.getClass().equals(Integer.class) ||
            hideDocumentId.getClass().equals(String.class) ||
            hideDocumentId.getClass().equals(java.net.URI.class)||
            hideDocumentId.getClass().isEnum()) {
            map.put("hideDocumentId", hideDocumentId);
        } else if (isListOfFile(hideDocumentId)) {
            for(int i = 0; i< getListSize(hideDocumentId); i++) {
                map.put("hideDocumentId", hideDocumentId);
            }
        }
        else {
          map.put("hideDocumentId", JSON.serialize(hideDocumentId));
        }
    }
    if (expiryDateType != null) {
        if (isFileTypeOrListOfFiles(expiryDateType)) {
            fileTypeFound = true;
        }

        if (expiryDateType.getClass().equals(java.io.File.class) ||
            expiryDateType.getClass().equals(Integer.class) ||
            expiryDateType.getClass().equals(String.class) ||
            expiryDateType.getClass().equals(java.net.URI.class)||
            expiryDateType.getClass().isEnum()) {
            map.put("expiryDateType", expiryDateType);
        } else if (isListOfFile(expiryDateType)) {
            for(int i = 0; i< getListSize(expiryDateType); i++) {
                map.put("expiryDateType", expiryDateType);
            }
        }
        else {
          map.put("expiryDateType", JSON.serialize(expiryDateType));
        }
    }
    if (expiryValue != null) {
        if (isFileTypeOrListOfFiles(expiryValue)) {
            fileTypeFound = true;
        }

        if (expiryValue.getClass().equals(java.io.File.class) ||
            expiryValue.getClass().equals(Integer.class) ||
            expiryValue.getClass().equals(String.class) ||
            expiryValue.getClass().equals(java.net.URI.class)||
            expiryValue.getClass().isEnum()) {
            map.put("expiryValue", expiryValue);
        } else if (isListOfFile(expiryValue)) {
            for(int i = 0; i< getListSize(expiryValue); i++) {
                map.put("expiryValue", expiryValue);
            }
        }
        else {
          map.put("expiryValue", JSON.serialize(expiryValue));
        }
    }
    if (documentDownloadOption != null) {
        if (isFileTypeOrListOfFiles(documentDownloadOption)) {
            fileTypeFound = true;
        }

        if (documentDownloadOption.getClass().equals(java.io.File.class) ||
            documentDownloadOption.getClass().equals(Integer.class) ||
            documentDownloadOption.getClass().equals(String.class) ||
            documentDownloadOption.getClass().equals(java.net.URI.class)||
            documentDownloadOption.getClass().isEnum()) {
            map.put("documentDownloadOption", documentDownloadOption);
        } else if (isListOfFile(documentDownloadOption)) {
            for(int i = 0; i< getListSize(documentDownloadOption); i++) {
                map.put("documentDownloadOption", documentDownloadOption);
            }
        }
        else {
          map.put("documentDownloadOption", JSON.serialize(documentDownloadOption));
        }
    }
    if (metaData != null) {
        if (isFileTypeOrListOfFiles(metaData)) {
            fileTypeFound = true;
        }

        if (metaData.getClass().equals(java.io.File.class) ||
            metaData.getClass().equals(Integer.class) ||
            metaData.getClass().equals(String.class) ||
            metaData.getClass().equals(java.net.URI.class)||
            metaData.getClass().isEnum()) {
            map.put("metaData", metaData);
        } else if (isListOfFile(metaData)) {
            for(int i = 0; i< getListSize(metaData); i++) {
                map.put("metaData", metaData);
            }
        }
        else {
          map.put("metaData", JSON.serialize(metaData));
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().equals(java.net.URI.class)||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", JSON.serialize(recipientNotificationSettings));
        }
    }
    if (enableAuditTrailLocalization != null) {
        if (isFileTypeOrListOfFiles(enableAuditTrailLocalization)) {
            fileTypeFound = true;
        }

        if (enableAuditTrailLocalization.getClass().equals(java.io.File.class) ||
            enableAuditTrailLocalization.getClass().equals(Integer.class) ||
            enableAuditTrailLocalization.getClass().equals(String.class) ||
            enableAuditTrailLocalization.getClass().equals(java.net.URI.class)||
            enableAuditTrailLocalization.getClass().isEnum()) {
            map.put("enableAuditTrailLocalization", enableAuditTrailLocalization);
        } else if (isListOfFile(enableAuditTrailLocalization)) {
            for(int i = 0; i< getListSize(enableAuditTrailLocalization); i++) {
                map.put("enableAuditTrailLocalization", enableAuditTrailLocalization);
            }
        }
        else {
          map.put("enableAuditTrailLocalization", JSON.serialize(enableAuditTrailLocalization));
        }
    }
    if (downloadFileName != null) {
        if (isFileTypeOrListOfFiles(downloadFileName)) {
            fileTypeFound = true;
        }

        if (downloadFileName.getClass().equals(java.io.File.class) ||
            downloadFileName.getClass().equals(Integer.class) ||
            downloadFileName.getClass().equals(String.class) ||
            downloadFileName.getClass().equals(java.net.URI.class)||
            downloadFileName.getClass().isEnum()) {
            map.put("downloadFileName", downloadFileName);
        } else if (isListOfFile(downloadFileName)) {
            for(int i = 0; i< getListSize(downloadFileName); i++) {
                map.put("downloadFileName", downloadFileName);
            }
        }
        else {
          map.put("downloadFileName", JSON.serialize(downloadFileName));
        }
    }
    if (scheduledSendTime != null) {
        if (isFileTypeOrListOfFiles(scheduledSendTime)) {
            fileTypeFound = true;
        }

        if (scheduledSendTime.getClass().equals(java.io.File.class) ||
            scheduledSendTime.getClass().equals(Integer.class) ||
            scheduledSendTime.getClass().equals(String.class) ||
            scheduledSendTime.getClass().equals(java.net.URI.class)||
            scheduledSendTime.getClass().isEnum()) {
            map.put("scheduledSendTime", scheduledSendTime);
        } else if (isListOfFile(scheduledSendTime)) {
            for(int i = 0; i< getListSize(scheduledSendTime); i++) {
                map.put("scheduledSendTime", scheduledSendTime);
            }
        }
        else {
          map.put("scheduledSendTime", JSON.serialize(scheduledSendTime));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentId");
    openapiFields.add("brandId");
    openapiFields.add("messageTitle");
    openapiFields.add("documentDescription");
    openapiFields.add("status");
    openapiFields.add("files");
    openapiFields.add("senderDetail");
    openapiFields.add("signerDetails");
    openapiFields.add("formGroups");
    openapiFields.add("commonFields");
    openapiFields.add("behalfOf");
    openapiFields.add("ccDetails");
    openapiFields.add("reminderSettings");
    openapiFields.add("reassign");
    openapiFields.add("documentHistory");
    openapiFields.add("activityBy");
    openapiFields.add("activityDate");
    openapiFields.add("activityAction");
    openapiFields.add("createdDate");
    openapiFields.add("expiryDays");
    openapiFields.add("expiryDate");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("isDeleted");
    openapiFields.add("revokeMessage");
    openapiFields.add("declineMessage");
    openapiFields.add("applicationId");
    openapiFields.add("labels");
    openapiFields.add("disableEmails");
    openapiFields.add("enablePrintAndSign");
    openapiFields.add("enableReassign");
    openapiFields.add("disableExpiryAlert");
    openapiFields.add("hideDocumentId");
    openapiFields.add("expiryDateType");
    openapiFields.add("expiryValue");
    openapiFields.add("documentDownloadOption");
    openapiFields.add("metaData");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("enableAuditTrailLocalization");
    openapiFields.add("downloadFileName");
    openapiFields.add("scheduledSendTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentProperties is not found in the empty JSON string", DocumentProperties.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if ((jsonObj.get("messageTitle") != null && !jsonObj.get("messageTitle").isJsonNull()) && !jsonObj.get("messageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTitle").toString()));
      }
      if ((jsonObj.get("documentDescription") != null && !jsonObj.get("documentDescription").isJsonNull()) && !jsonObj.get("documentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentDescription").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            DocumentFiles.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `senderDetail`
      if (jsonObj.get("senderDetail") != null && !jsonObj.get("senderDetail").isJsonNull()) {
        DocumentSenderDetail.validateJsonElement(jsonObj.get("senderDetail"));
      }
      if (jsonObj.get("signerDetails") != null && !jsonObj.get("signerDetails").isJsonNull()) {
        JsonArray jsonArraysignerDetails = jsonObj.getAsJsonArray("signerDetails");
        if (jsonArraysignerDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signerDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signerDetails` to be an array in the JSON string but got `%s`", jsonObj.get("signerDetails").toString()));
          }

          // validate the optional field `signerDetails` (array)
          for (int i = 0; i < jsonArraysignerDetails.size(); i++) {
            DocumentSignerDetails.validateJsonElement(jsonArraysignerDetails.get(i));
          };
        }
      }
      if (jsonObj.get("formGroups") != null && !jsonObj.get("formGroups").isJsonNull()) {
        JsonArray jsonArrayformGroups = jsonObj.getAsJsonArray("formGroups");
        if (jsonArrayformGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formGroups` to be an array in the JSON string but got `%s`", jsonObj.get("formGroups").toString()));
          }

          // validate the optional field `formGroups` (array)
          for (int i = 0; i < jsonArrayformGroups.size(); i++) {
            FormGroup.validateJsonElement(jsonArrayformGroups.get(i));
          };
        }
      }
      if (jsonObj.get("commonFields") != null && !jsonObj.get("commonFields").isJsonNull()) {
        JsonArray jsonArraycommonFields = jsonObj.getAsJsonArray("commonFields");
        if (jsonArraycommonFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonFields` to be an array in the JSON string but got `%s`", jsonObj.get("commonFields").toString()));
          }

          // validate the optional field `commonFields` (array)
          for (int i = 0; i < jsonArraycommonFields.size(); i++) {
            DocumentFormFields.validateJsonElement(jsonArraycommonFields.get(i));
          };
        }
      }
      // validate the optional field `behalfOf`
      if (jsonObj.get("behalfOf") != null && !jsonObj.get("behalfOf").isJsonNull()) {
        BehalfOf.validateJsonElement(jsonObj.get("behalfOf"));
      }
      if (jsonObj.get("ccDetails") != null && !jsonObj.get("ccDetails").isJsonNull()) {
        JsonArray jsonArrayccDetails = jsonObj.getAsJsonArray("ccDetails");
        if (jsonArrayccDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ccDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ccDetails` to be an array in the JSON string but got `%s`", jsonObj.get("ccDetails").toString()));
          }

          // validate the optional field `ccDetails` (array)
          for (int i = 0; i < jsonArrayccDetails.size(); i++) {
            DocumentCcDetails.validateJsonElement(jsonArrayccDetails.get(i));
          };
        }
      }
      // validate the optional field `reminderSettings`
      if (jsonObj.get("reminderSettings") != null && !jsonObj.get("reminderSettings").isJsonNull()) {
        ReminderSettings.validateJsonElement(jsonObj.get("reminderSettings"));
      }
      if (jsonObj.get("reassign") != null && !jsonObj.get("reassign").isJsonNull()) {
        JsonArray jsonArrayreassign = jsonObj.getAsJsonArray("reassign");
        if (jsonArrayreassign != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reassign").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reassign` to be an array in the JSON string but got `%s`", jsonObj.get("reassign").toString()));
          }

          // validate the optional field `reassign` (array)
          for (int i = 0; i < jsonArrayreassign.size(); i++) {
            DocumentReassign.validateJsonElement(jsonArrayreassign.get(i));
          };
        }
      }
      if (jsonObj.get("documentHistory") != null && !jsonObj.get("documentHistory").isJsonNull()) {
        JsonArray jsonArraydocumentHistory = jsonObj.getAsJsonArray("documentHistory");
        if (jsonArraydocumentHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentHistory` to be an array in the JSON string but got `%s`", jsonObj.get("documentHistory").toString()));
          }

          // validate the optional field `documentHistory` (array)
          for (int i = 0; i < jsonArraydocumentHistory.size(); i++) {
            AuditTrail.validateJsonElement(jsonArraydocumentHistory.get(i));
          };
        }
      }
      if ((jsonObj.get("activityBy") != null && !jsonObj.get("activityBy").isJsonNull()) && !jsonObj.get("activityBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityBy").toString()));
      }
      if ((jsonObj.get("activityAction") != null && !jsonObj.get("activityAction").isJsonNull()) && !jsonObj.get("activityAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityAction").toString()));
      }
      // validate the optional field `activityAction`
      if (jsonObj.get("activityAction") != null && !jsonObj.get("activityAction").isJsonNull()) {
        ActivityActionEnum.validateJsonElement(jsonObj.get("activityAction"));
      }
      if ((jsonObj.get("revokeMessage") != null && !jsonObj.get("revokeMessage").isJsonNull()) && !jsonObj.get("revokeMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revokeMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revokeMessage").toString()));
      }
      if ((jsonObj.get("declineMessage") != null && !jsonObj.get("declineMessage").isJsonNull()) && !jsonObj.get("declineMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declineMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declineMessage").toString()));
      }
      if ((jsonObj.get("applicationId") != null && !jsonObj.get("applicationId").isJsonNull()) && !jsonObj.get("applicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) && !jsonObj.get("expiryDateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDateType").toString()));
      }
      // validate the optional field `expiryDateType`
      if (jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) {
        ExpiryDateTypeEnum.validateJsonElement(jsonObj.get("expiryDateType"));
      }
      if ((jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) && !jsonObj.get("documentDownloadOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDownloadOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentDownloadOption").toString()));
      }
      // validate the optional field `documentDownloadOption`
      if (jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) {
        DocumentDownloadOptionEnum.validateJsonElement(jsonObj.get("documentDownloadOption"));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
      if ((jsonObj.get("downloadFileName") != null && !jsonObj.get("downloadFileName").isJsonNull()) && !jsonObj.get("downloadFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadFileName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentProperties>() {
           @Override
           public void write(JsonWriter out, DocumentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentProperties
   * @throws IOException if the JSON string is invalid with respect to DocumentProperties
   */
  public static DocumentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentProperties.class);
  }

  /**
   * Convert an instance of DocumentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

