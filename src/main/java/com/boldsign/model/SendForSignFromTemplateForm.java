/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.DocumentCC;
import com.boldsign.model.DocumentInfo;
import com.boldsign.model.FormGroup;
import com.boldsign.model.RecipientNotificationSettings;
import com.boldsign.model.ReminderSettings;
import com.boldsign.model.Role;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * SendForSignFromTemplateForm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class SendForSignFromTemplateForm {
  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<File> files;

  public static final String SERIALIZED_NAME_FILE_URLS = "fileUrls";
  @SerializedName(SERIALIZED_NAME_FILE_URLS)
  private List<URI> fileUrls;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Role> roles;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_DISABLE_EMAILS = "disableEmails";
  @SerializedName(SERIALIZED_NAME_DISABLE_EMAILS)
  private Boolean disableEmails;

  public static final String SERIALIZED_NAME_DISABLE_S_M_S = "disableSMS";
  @SerializedName(SERIALIZED_NAME_DISABLE_S_M_S)
  private Boolean disableSMS = false;

  public static final String SERIALIZED_NAME_HIDE_DOCUMENT_ID = "hideDocumentId";
  @SerializedName(SERIALIZED_NAME_HIDE_DOCUMENT_ID)
  private Boolean hideDocumentId;

  public static final String SERIALIZED_NAME_REMINDER_SETTINGS = "reminderSettings";
  @SerializedName(SERIALIZED_NAME_REMINDER_SETTINGS)
  private ReminderSettings reminderSettings;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<DocumentCC> cc;

  public static final String SERIALIZED_NAME_EXPIRY_DAYS = "expiryDays";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EXPIRY_DAYS)
  private Integer expiryDays;

  /**
   * Gets or Sets expiryDateType
   */
  @JsonAdapter(ExpiryDateTypeEnum.Adapter.class)
  public enum ExpiryDateTypeEnum {
    DAYS("Days"),
    
    HOURS("Hours"),
    
    SPECIFIC_DATE_TIME("SpecificDateTime");

    private String value;

    ExpiryDateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpiryDateTypeEnum fromValue(String value) {
      for (ExpiryDateTypeEnum b : ExpiryDateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ExpiryDateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpiryDateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpiryDateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpiryDateTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpiryDateTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRY_DATE_TYPE = "expiryDateType";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_TYPE)
  private ExpiryDateTypeEnum expiryDateType;

  public static final String SERIALIZED_NAME_EXPIRY_VALUE = "expiryValue";
  @SerializedName(SERIALIZED_NAME_EXPIRY_VALUE)
  private Long expiryValue = 60l;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN = "enablePrintAndSign";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_AND_SIGN)
  private Boolean enablePrintAndSign;

  public static final String SERIALIZED_NAME_ENABLE_REASSIGN = "enableReassign";
  @SerializedName(SERIALIZED_NAME_ENABLE_REASSIGN)
  private Boolean enableReassign;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder;

  public static final String SERIALIZED_NAME_DISABLE_EXPIRY_ALERT = "disableExpiryAlert";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXPIRY_ALERT)
  private Boolean disableExpiryAlert;

  public static final String SERIALIZED_NAME_DOCUMENT_INFO = "documentInfo";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INFO)
  private List<DocumentInfo> documentInfo;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private String onBehalfOf;

  public static final String SERIALIZED_NAME_IS_SANDBOX = "isSandbox";
  @SerializedName(SERIALIZED_NAME_IS_SANDBOX)
  private Boolean isSandbox;

  public static final String SERIALIZED_NAME_ROLE_REMOVAL_INDICES = "roleRemovalIndices";
  @SerializedName(SERIALIZED_NAME_ROLE_REMOVAL_INDICES)
  private List<Integer> roleRemovalIndices;

  /**
   * Gets or Sets documentDownloadOption
   */
  @JsonAdapter(DocumentDownloadOptionEnum.Adapter.class)
  public enum DocumentDownloadOptionEnum {
    COMBINED("Combined"),
    
    INDIVIDUALLY("Individually");

    private String value;

    DocumentDownloadOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentDownloadOptionEnum fromValue(String value) {
      for (DocumentDownloadOptionEnum b : DocumentDownloadOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DocumentDownloadOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentDownloadOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentDownloadOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentDownloadOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentDownloadOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION = "documentDownloadOption";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DOWNLOAD_OPTION)
  private DocumentDownloadOptionEnum documentDownloadOption;

  public static final String SERIALIZED_NAME_META_DATA = "metaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Map<String, String> metaData;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_FORM_GROUPS = "formGroups";
  @SerializedName(SERIALIZED_NAME_FORM_GROUPS)
  private List<FormGroup> formGroups;

  public static final String SERIALIZED_NAME_REMOVE_FORM_FIELDS = "removeFormFields";
  @SerializedName(SERIALIZED_NAME_REMOVE_FORM_FIELDS)
  private List<String> removeFormFields;

  public static final String SERIALIZED_NAME_ENABLE_AUDIT_TRAIL_LOCALIZATION = "enableAuditTrailLocalization";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUDIT_TRAIL_LOCALIZATION)
  private Boolean enableAuditTrailLocalization;

  public static final String SERIALIZED_NAME_DOWNLOAD_FILE_NAME = "downloadFileName";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_FILE_NAME)
  private String downloadFileName;

  public static final String SERIALIZED_NAME_SCHEDULED_SEND_TIME = "scheduledSendTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_SEND_TIME)
  private Long scheduledSendTime;

  public static final String SERIALIZED_NAME_ALLOW_SCHEDULED_SEND = "allowScheduledSend";
  @SerializedName(SERIALIZED_NAME_ALLOW_SCHEDULED_SEND)
  private Boolean allowScheduledSend = false;

  public SendForSignFromTemplateForm() {
  }

  public SendForSignFromTemplateForm files(List<File> files) {
    this.files = files;
    return this;
  }

  public SendForSignFromTemplateForm addFilesItem(File filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<File> getFiles() {
    return files;
  }

  public void setFiles(List<File> files) {
    this.files = files;
  }


  public SendForSignFromTemplateForm fileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
    return this;
  }

  public SendForSignFromTemplateForm addFileUrlsItem(URI fileUrlsItem) {
    if (this.fileUrls == null) {
      this.fileUrls = new ArrayList<>();
    }
    this.fileUrls.add(fileUrlsItem);
    return this;
  }

  /**
   * Get fileUrls
   * @return fileUrls
   */
  @javax.annotation.Nullable
  public List<URI> getFileUrls() {
    return fileUrls;
  }

  public void setFileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
  }


  public SendForSignFromTemplateForm documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public SendForSignFromTemplateForm title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SendForSignFromTemplateForm message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public SendForSignFromTemplateForm roles(List<Role> roles) {
    this.roles = roles;
    return this;
  }

  public SendForSignFromTemplateForm addRolesItem(Role rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List<Role> getRoles() {
    return roles;
  }

  public void setRoles(List<Role> roles) {
    this.roles = roles;
  }


  public SendForSignFromTemplateForm brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public SendForSignFromTemplateForm labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public SendForSignFromTemplateForm addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public SendForSignFromTemplateForm disableEmails(Boolean disableEmails) {
    this.disableEmails = disableEmails;
    return this;
  }

  /**
   * Get disableEmails
   * @return disableEmails
   */
  @javax.annotation.Nullable
  public Boolean getDisableEmails() {
    return disableEmails;
  }

  public void setDisableEmails(Boolean disableEmails) {
    this.disableEmails = disableEmails;
  }


  public SendForSignFromTemplateForm disableSMS(Boolean disableSMS) {
    this.disableSMS = disableSMS;
    return this;
  }

  /**
   * Get disableSMS
   * @return disableSMS
   */
  @javax.annotation.Nullable
  public Boolean getDisableSMS() {
    return disableSMS;
  }

  public void setDisableSMS(Boolean disableSMS) {
    this.disableSMS = disableSMS;
  }


  public SendForSignFromTemplateForm hideDocumentId(Boolean hideDocumentId) {
    this.hideDocumentId = hideDocumentId;
    return this;
  }

  /**
   * Get hideDocumentId
   * @return hideDocumentId
   */
  @javax.annotation.Nullable
  public Boolean getHideDocumentId() {
    return hideDocumentId;
  }

  public void setHideDocumentId(Boolean hideDocumentId) {
    this.hideDocumentId = hideDocumentId;
  }


  public SendForSignFromTemplateForm reminderSettings(ReminderSettings reminderSettings) {
    this.reminderSettings = reminderSettings;
    return this;
  }

  /**
   * Get reminderSettings
   * @return reminderSettings
   */
  @javax.annotation.Nullable
  public ReminderSettings getReminderSettings() {
    return reminderSettings;
  }

  public void setReminderSettings(ReminderSettings reminderSettings) {
    this.reminderSettings = reminderSettings;
  }


  public SendForSignFromTemplateForm cc(List<DocumentCC> cc) {
    this.cc = cc;
    return this;
  }

  public SendForSignFromTemplateForm addCcItem(DocumentCC ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<DocumentCC> getCc() {
    return cc;
  }

  public void setCc(List<DocumentCC> cc) {
    this.cc = cc;
  }


  @Deprecated
  public SendForSignFromTemplateForm expiryDays(Integer expiryDays) {
    this.expiryDays = expiryDays;
    return this;
  }

  /**
   * Get expiryDays
   * @return expiryDays
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getExpiryDays() {
    return expiryDays;
  }

  @Deprecated
  public void setExpiryDays(Integer expiryDays) {
    this.expiryDays = expiryDays;
  }


  public SendForSignFromTemplateForm expiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
    return this;
  }

  /**
   * Get expiryDateType
   * @return expiryDateType
   */
  @javax.annotation.Nullable
  public ExpiryDateTypeEnum getExpiryDateType() {
    return expiryDateType;
  }

  public void setExpiryDateType(ExpiryDateTypeEnum expiryDateType) {
    this.expiryDateType = expiryDateType;
  }


  public SendForSignFromTemplateForm expiryValue(Long expiryValue) {
    this.expiryValue = expiryValue;
    return this;
  }

  /**
   * Get expiryValue
   * @return expiryValue
   */
  @javax.annotation.Nullable
  public Long getExpiryValue() {
    return expiryValue;
  }

  public void setExpiryValue(Long expiryValue) {
    this.expiryValue = expiryValue;
  }


  public SendForSignFromTemplateForm enablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
    return this;
  }

  /**
   * Get enablePrintAndSign
   * @return enablePrintAndSign
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrintAndSign() {
    return enablePrintAndSign;
  }

  public void setEnablePrintAndSign(Boolean enablePrintAndSign) {
    this.enablePrintAndSign = enablePrintAndSign;
  }


  public SendForSignFromTemplateForm enableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
    return this;
  }

  /**
   * Get enableReassign
   * @return enableReassign
   */
  @javax.annotation.Nullable
  public Boolean getEnableReassign() {
    return enableReassign;
  }

  public void setEnableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
  }


  public SendForSignFromTemplateForm enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public SendForSignFromTemplateForm disableExpiryAlert(Boolean disableExpiryAlert) {
    this.disableExpiryAlert = disableExpiryAlert;
    return this;
  }

  /**
   * Get disableExpiryAlert
   * @return disableExpiryAlert
   */
  @javax.annotation.Nullable
  public Boolean getDisableExpiryAlert() {
    return disableExpiryAlert;
  }

  public void setDisableExpiryAlert(Boolean disableExpiryAlert) {
    this.disableExpiryAlert = disableExpiryAlert;
  }


  public SendForSignFromTemplateForm documentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
    return this;
  }

  public SendForSignFromTemplateForm addDocumentInfoItem(DocumentInfo documentInfoItem) {
    if (this.documentInfo == null) {
      this.documentInfo = new ArrayList<>();
    }
    this.documentInfo.add(documentInfoItem);
    return this;
  }

  /**
   * Get documentInfo
   * @return documentInfo
   */
  @javax.annotation.Nullable
  public List<DocumentInfo> getDocumentInfo() {
    return documentInfo;
  }

  public void setDocumentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
  }


  public SendForSignFromTemplateForm onBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public String getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public SendForSignFromTemplateForm isSandbox(Boolean isSandbox) {
    this.isSandbox = isSandbox;
    return this;
  }

  /**
   * Get isSandbox
   * @return isSandbox
   */
  @javax.annotation.Nullable
  public Boolean getIsSandbox() {
    return isSandbox;
  }

  public void setIsSandbox(Boolean isSandbox) {
    this.isSandbox = isSandbox;
  }


  public SendForSignFromTemplateForm roleRemovalIndices(List<Integer> roleRemovalIndices) {
    this.roleRemovalIndices = roleRemovalIndices;
    return this;
  }

  public SendForSignFromTemplateForm addRoleRemovalIndicesItem(Integer roleRemovalIndicesItem) {
    if (this.roleRemovalIndices == null) {
      this.roleRemovalIndices = new ArrayList<>();
    }
    this.roleRemovalIndices.add(roleRemovalIndicesItem);
    return this;
  }

  /**
   * Get roleRemovalIndices
   * @return roleRemovalIndices
   */
  @javax.annotation.Nullable
  public List<Integer> getRoleRemovalIndices() {
    return roleRemovalIndices;
  }

  public void setRoleRemovalIndices(List<Integer> roleRemovalIndices) {
    this.roleRemovalIndices = roleRemovalIndices;
  }


  public SendForSignFromTemplateForm documentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
    return this;
  }

  /**
   * Get documentDownloadOption
   * @return documentDownloadOption
   */
  @javax.annotation.Nullable
  public DocumentDownloadOptionEnum getDocumentDownloadOption() {
    return documentDownloadOption;
  }

  public void setDocumentDownloadOption(DocumentDownloadOptionEnum documentDownloadOption) {
    this.documentDownloadOption = documentDownloadOption;
  }


  public SendForSignFromTemplateForm metaData(Map<String, String> metaData) {
    this.metaData = metaData;
    return this;
  }

  public SendForSignFromTemplateForm putMetaDataItem(String key, String metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new HashMap<>();
    }
    this.metaData.put(key, metaDataItem);
    return this;
  }

  /**
   * Get metaData
   * @return metaData
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetaData() {
    return metaData;
  }

  public void setMetaData(Map<String, String> metaData) {
    this.metaData = metaData;
  }


  public SendForSignFromTemplateForm recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public SendForSignFromTemplateForm formGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
    return this;
  }

  public SendForSignFromTemplateForm addFormGroupsItem(FormGroup formGroupsItem) {
    if (this.formGroups == null) {
      this.formGroups = new ArrayList<>();
    }
    this.formGroups.add(formGroupsItem);
    return this;
  }

  /**
   * Get formGroups
   * @return formGroups
   */
  @javax.annotation.Nullable
  public List<FormGroup> getFormGroups() {
    return formGroups;
  }

  public void setFormGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
  }


  public SendForSignFromTemplateForm removeFormFields(List<String> removeFormFields) {
    this.removeFormFields = removeFormFields;
    return this;
  }

  public SendForSignFromTemplateForm addRemoveFormFieldsItem(String removeFormFieldsItem) {
    if (this.removeFormFields == null) {
      this.removeFormFields = new ArrayList<>();
    }
    this.removeFormFields.add(removeFormFieldsItem);
    return this;
  }

  /**
   * Get removeFormFields
   * @return removeFormFields
   */
  @javax.annotation.Nullable
  public List<String> getRemoveFormFields() {
    return removeFormFields;
  }

  public void setRemoveFormFields(List<String> removeFormFields) {
    this.removeFormFields = removeFormFields;
  }


  public SendForSignFromTemplateForm enableAuditTrailLocalization(Boolean enableAuditTrailLocalization) {
    this.enableAuditTrailLocalization = enableAuditTrailLocalization;
    return this;
  }

  /**
   * Get enableAuditTrailLocalization
   * @return enableAuditTrailLocalization
   */
  @javax.annotation.Nullable
  public Boolean getEnableAuditTrailLocalization() {
    return enableAuditTrailLocalization;
  }

  public void setEnableAuditTrailLocalization(Boolean enableAuditTrailLocalization) {
    this.enableAuditTrailLocalization = enableAuditTrailLocalization;
  }


  public SendForSignFromTemplateForm downloadFileName(String downloadFileName) {
    this.downloadFileName = downloadFileName;
    return this;
  }

  /**
   * Get downloadFileName
   * @return downloadFileName
   */
  @javax.annotation.Nullable
  public String getDownloadFileName() {
    return downloadFileName;
  }

  public void setDownloadFileName(String downloadFileName) {
    this.downloadFileName = downloadFileName;
  }


  public SendForSignFromTemplateForm scheduledSendTime(Long scheduledSendTime) {
    this.scheduledSendTime = scheduledSendTime;
    return this;
  }

  /**
   * Get scheduledSendTime
   * @return scheduledSendTime
   */
  @javax.annotation.Nullable
  public Long getScheduledSendTime() {
    return scheduledSendTime;
  }

  public void setScheduledSendTime(Long scheduledSendTime) {
    this.scheduledSendTime = scheduledSendTime;
  }


  public SendForSignFromTemplateForm allowScheduledSend(Boolean allowScheduledSend) {
    this.allowScheduledSend = allowScheduledSend;
    return this;
  }

  /**
   * Get allowScheduledSend
   * @return allowScheduledSend
   */
  @javax.annotation.Nullable
  public Boolean getAllowScheduledSend() {
    return allowScheduledSend;
  }

  public void setAllowScheduledSend(Boolean allowScheduledSend) {
    this.allowScheduledSend = allowScheduledSend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendForSignFromTemplateForm sendForSignFromTemplateForm = (SendForSignFromTemplateForm) o;
    return Objects.equals(this.files, sendForSignFromTemplateForm.files) &&
        Objects.equals(this.fileUrls, sendForSignFromTemplateForm.fileUrls) &&
        Objects.equals(this.documentId, sendForSignFromTemplateForm.documentId) &&
        Objects.equals(this.title, sendForSignFromTemplateForm.title) &&
        Objects.equals(this.message, sendForSignFromTemplateForm.message) &&
        Objects.equals(this.roles, sendForSignFromTemplateForm.roles) &&
        Objects.equals(this.brandId, sendForSignFromTemplateForm.brandId) &&
        Objects.equals(this.labels, sendForSignFromTemplateForm.labels) &&
        Objects.equals(this.disableEmails, sendForSignFromTemplateForm.disableEmails) &&
        Objects.equals(this.disableSMS, sendForSignFromTemplateForm.disableSMS) &&
        Objects.equals(this.hideDocumentId, sendForSignFromTemplateForm.hideDocumentId) &&
        Objects.equals(this.reminderSettings, sendForSignFromTemplateForm.reminderSettings) &&
        Objects.equals(this.cc, sendForSignFromTemplateForm.cc) &&
        Objects.equals(this.expiryDays, sendForSignFromTemplateForm.expiryDays) &&
        Objects.equals(this.expiryDateType, sendForSignFromTemplateForm.expiryDateType) &&
        Objects.equals(this.expiryValue, sendForSignFromTemplateForm.expiryValue) &&
        Objects.equals(this.enablePrintAndSign, sendForSignFromTemplateForm.enablePrintAndSign) &&
        Objects.equals(this.enableReassign, sendForSignFromTemplateForm.enableReassign) &&
        Objects.equals(this.enableSigningOrder, sendForSignFromTemplateForm.enableSigningOrder) &&
        Objects.equals(this.disableExpiryAlert, sendForSignFromTemplateForm.disableExpiryAlert) &&
        Objects.equals(this.documentInfo, sendForSignFromTemplateForm.documentInfo) &&
        Objects.equals(this.onBehalfOf, sendForSignFromTemplateForm.onBehalfOf) &&
        Objects.equals(this.isSandbox, sendForSignFromTemplateForm.isSandbox) &&
        Objects.equals(this.roleRemovalIndices, sendForSignFromTemplateForm.roleRemovalIndices) &&
        Objects.equals(this.documentDownloadOption, sendForSignFromTemplateForm.documentDownloadOption) &&
        Objects.equals(this.metaData, sendForSignFromTemplateForm.metaData) &&
        Objects.equals(this.recipientNotificationSettings, sendForSignFromTemplateForm.recipientNotificationSettings) &&
        Objects.equals(this.formGroups, sendForSignFromTemplateForm.formGroups) &&
        Objects.equals(this.removeFormFields, sendForSignFromTemplateForm.removeFormFields) &&
        Objects.equals(this.enableAuditTrailLocalization, sendForSignFromTemplateForm.enableAuditTrailLocalization) &&
        Objects.equals(this.downloadFileName, sendForSignFromTemplateForm.downloadFileName) &&
        Objects.equals(this.scheduledSendTime, sendForSignFromTemplateForm.scheduledSendTime) &&
        Objects.equals(this.allowScheduledSend, sendForSignFromTemplateForm.allowScheduledSend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(files, fileUrls, documentId, title, message, roles, brandId, labels, disableEmails, disableSMS, hideDocumentId, reminderSettings, cc, expiryDays, expiryDateType, expiryValue, enablePrintAndSign, enableReassign, enableSigningOrder, disableExpiryAlert, documentInfo, onBehalfOf, isSandbox, roleRemovalIndices, documentDownloadOption, metaData, recipientNotificationSettings, formGroups, removeFormFields, enableAuditTrailLocalization, downloadFileName, scheduledSendTime, allowScheduledSend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendForSignFromTemplateForm {\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    fileUrls: ").append(toIndentedString(fileUrls)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    disableEmails: ").append(toIndentedString(disableEmails)).append("\n");
    sb.append("    disableSMS: ").append(toIndentedString(disableSMS)).append("\n");
    sb.append("    hideDocumentId: ").append(toIndentedString(hideDocumentId)).append("\n");
    sb.append("    reminderSettings: ").append(toIndentedString(reminderSettings)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    expiryDays: ").append(toIndentedString(expiryDays)).append("\n");
    sb.append("    expiryDateType: ").append(toIndentedString(expiryDateType)).append("\n");
    sb.append("    expiryValue: ").append(toIndentedString(expiryValue)).append("\n");
    sb.append("    enablePrintAndSign: ").append(toIndentedString(enablePrintAndSign)).append("\n");
    sb.append("    enableReassign: ").append(toIndentedString(enableReassign)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    disableExpiryAlert: ").append(toIndentedString(disableExpiryAlert)).append("\n");
    sb.append("    documentInfo: ").append(toIndentedString(documentInfo)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    isSandbox: ").append(toIndentedString(isSandbox)).append("\n");
    sb.append("    roleRemovalIndices: ").append(toIndentedString(roleRemovalIndices)).append("\n");
    sb.append("    documentDownloadOption: ").append(toIndentedString(documentDownloadOption)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    formGroups: ").append(toIndentedString(formGroups)).append("\n");
    sb.append("    removeFormFields: ").append(toIndentedString(removeFormFields)).append("\n");
    sb.append("    enableAuditTrailLocalization: ").append(toIndentedString(enableAuditTrailLocalization)).append("\n");
    sb.append("    downloadFileName: ").append(toIndentedString(downloadFileName)).append("\n");
    sb.append("    scheduledSendTime: ").append(toIndentedString(scheduledSendTime)).append("\n");
    sb.append("    allowScheduledSend: ").append(toIndentedString(allowScheduledSend)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (files != null) {
        if (isFileTypeOrListOfFiles(files)) {
            fileTypeFound = true;
        }

        if (files.getClass().equals(java.io.File.class) ||
            files.getClass().equals(Integer.class) ||
            files.getClass().equals(String.class) ||
            files.getClass().isEnum()) {
            map.put("files", files);
        } else if (isListOfFile(files)) {
            for(int i = 0; i< getListSize(files); i++) {
                map.put("files", files);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : files) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("files", objectList);
        }
    }
    if (fileUrls != null) {
        if (isFileTypeOrListOfFiles(fileUrls)) {
            fileTypeFound = true;
        }

        if (fileUrls.getClass().equals(java.io.File.class) ||
            fileUrls.getClass().equals(Integer.class) ||
            fileUrls.getClass().equals(String.class) ||
            fileUrls.getClass().isEnum()) {
            map.put("fileUrls", fileUrls);
        } else if (isListOfFile(fileUrls)) {
            for(int i = 0; i< getListSize(fileUrls); i++) {
                map.put("fileUrls", fileUrls);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : fileUrls) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("fileUrls", objectList);
        }
    }
    if (documentId != null) {
        if (isFileTypeOrListOfFiles(documentId)) {
            fileTypeFound = true;
        }

        if (documentId.getClass().equals(java.io.File.class) ||
            documentId.getClass().equals(Integer.class) ||
            documentId.getClass().equals(String.class) ||
            documentId.getClass().isEnum()) {
            map.put("documentId", documentId);
        } else if (isListOfFile(documentId)) {
            for(int i = 0; i< getListSize(documentId); i++) {
                map.put("documentId", documentId);
            }
        }
        else {
          map.put("documentId", documentId);
        }
    }
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title", title);
            }
        }
        else {
          map.put("title", title);
        }
    }
    if (message != null) {
        if (isFileTypeOrListOfFiles(message)) {
            fileTypeFound = true;
        }

        if (message.getClass().equals(java.io.File.class) ||
            message.getClass().equals(Integer.class) ||
            message.getClass().equals(String.class) ||
            message.getClass().isEnum()) {
            map.put("message", message);
        } else if (isListOfFile(message)) {
            for(int i = 0; i< getListSize(message); i++) {
                map.put("message", message);
            }
        }
        else {
          map.put("message", message);
        }
    }
    if (roles != null) {
        if (isFileTypeOrListOfFiles(roles)) {
            fileTypeFound = true;
        }

        if (roles.getClass().equals(java.io.File.class) ||
            roles.getClass().equals(Integer.class) ||
            roles.getClass().equals(String.class) ||
            roles.getClass().isEnum()) {
            map.put("roles", roles);
        } else if (isListOfFile(roles)) {
            for(int i = 0; i< getListSize(roles); i++) {
                map.put("roles", roles);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : roles) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("roles", objectList);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (disableEmails != null) {
        if (isFileTypeOrListOfFiles(disableEmails)) {
            fileTypeFound = true;
        }

        if (disableEmails.getClass().equals(java.io.File.class) ||
            disableEmails.getClass().equals(Integer.class) ||
            disableEmails.getClass().equals(String.class) ||
            disableEmails.getClass().isEnum()) {
            map.put("disableEmails", disableEmails);
        } else if (isListOfFile(disableEmails)) {
            for(int i = 0; i< getListSize(disableEmails); i++) {
                map.put("disableEmails", disableEmails);
            }
        }
        else {
          map.put("disableEmails", disableEmails);
        }
    }
    if (disableSMS != null) {
        if (isFileTypeOrListOfFiles(disableSMS)) {
            fileTypeFound = true;
        }

        if (disableSMS.getClass().equals(java.io.File.class) ||
            disableSMS.getClass().equals(Integer.class) ||
            disableSMS.getClass().equals(String.class) ||
            disableSMS.getClass().isEnum()) {
            map.put("disableSMS", disableSMS);
        } else if (isListOfFile(disableSMS)) {
            for(int i = 0; i< getListSize(disableSMS); i++) {
                map.put("disableSMS", disableSMS);
            }
        }
        else {
          map.put("disableSMS", disableSMS);
        }
    }
    if (hideDocumentId != null) {
        if (isFileTypeOrListOfFiles(hideDocumentId)) {
            fileTypeFound = true;
        }

        if (hideDocumentId.getClass().equals(java.io.File.class) ||
            hideDocumentId.getClass().equals(Integer.class) ||
            hideDocumentId.getClass().equals(String.class) ||
            hideDocumentId.getClass().isEnum()) {
            map.put("hideDocumentId", hideDocumentId);
        } else if (isListOfFile(hideDocumentId)) {
            for(int i = 0; i< getListSize(hideDocumentId); i++) {
                map.put("hideDocumentId", hideDocumentId);
            }
        }
        else {
          map.put("hideDocumentId", hideDocumentId);
        }
    }
    if (reminderSettings != null) {
        if (isFileTypeOrListOfFiles(reminderSettings)) {
            fileTypeFound = true;
        }

        if (reminderSettings.getClass().equals(java.io.File.class) ||
            reminderSettings.getClass().equals(Integer.class) ||
            reminderSettings.getClass().equals(String.class) ||
            reminderSettings.getClass().isEnum()) {
            map.put("reminderSettings", reminderSettings);
        } else if (isListOfFile(reminderSettings)) {
            for(int i = 0; i< getListSize(reminderSettings); i++) {
                map.put("reminderSettings", reminderSettings);
            }
        }
        else {
          map.put("reminderSettings", reminderSettings);
        }
    }
    if (cc != null) {
        if (isFileTypeOrListOfFiles(cc)) {
            fileTypeFound = true;
        }

        if (cc.getClass().equals(java.io.File.class) ||
            cc.getClass().equals(Integer.class) ||
            cc.getClass().equals(String.class) ||
            cc.getClass().isEnum()) {
            map.put("cc", cc);
        } else if (isListOfFile(cc)) {
            for(int i = 0; i< getListSize(cc); i++) {
                map.put("cc", cc);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : cc) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("cc", objectList);
        }
    }
    if (expiryDays != null) {
        if (isFileTypeOrListOfFiles(expiryDays)) {
            fileTypeFound = true;
        }

        if (expiryDays.getClass().equals(java.io.File.class) ||
            expiryDays.getClass().equals(Integer.class) ||
            expiryDays.getClass().equals(String.class) ||
            expiryDays.getClass().isEnum()) {
            map.put("expiryDays", expiryDays);
        } else if (isListOfFile(expiryDays)) {
            for(int i = 0; i< getListSize(expiryDays); i++) {
                map.put("expiryDays", expiryDays);
            }
        }
        else {
          map.put("expiryDays", expiryDays);
        }
    }
    if (expiryDateType != null) {
        if (isFileTypeOrListOfFiles(expiryDateType)) {
            fileTypeFound = true;
        }

        if (expiryDateType.getClass().equals(java.io.File.class) ||
            expiryDateType.getClass().equals(Integer.class) ||
            expiryDateType.getClass().equals(String.class) ||
            expiryDateType.getClass().isEnum()) {
            map.put("expiryDateType", expiryDateType);
        } else if (isListOfFile(expiryDateType)) {
            for(int i = 0; i< getListSize(expiryDateType); i++) {
                map.put("expiryDateType", expiryDateType);
            }
        }
        else {
          map.put("expiryDateType", expiryDateType);
        }
    }
    if (expiryValue != null) {
        if (isFileTypeOrListOfFiles(expiryValue)) {
            fileTypeFound = true;
        }

        if (expiryValue.getClass().equals(java.io.File.class) ||
            expiryValue.getClass().equals(Integer.class) ||
            expiryValue.getClass().equals(String.class) ||
            expiryValue.getClass().isEnum()) {
            map.put("expiryValue", expiryValue);
        } else if (isListOfFile(expiryValue)) {
            for(int i = 0; i< getListSize(expiryValue); i++) {
                map.put("expiryValue", expiryValue);
            }
        }
        else {
          map.put("expiryValue", expiryValue);
        }
    }
    if (enablePrintAndSign != null) {
        if (isFileTypeOrListOfFiles(enablePrintAndSign)) {
            fileTypeFound = true;
        }

        if (enablePrintAndSign.getClass().equals(java.io.File.class) ||
            enablePrintAndSign.getClass().equals(Integer.class) ||
            enablePrintAndSign.getClass().equals(String.class) ||
            enablePrintAndSign.getClass().isEnum()) {
            map.put("enablePrintAndSign", enablePrintAndSign);
        } else if (isListOfFile(enablePrintAndSign)) {
            for(int i = 0; i< getListSize(enablePrintAndSign); i++) {
                map.put("enablePrintAndSign", enablePrintAndSign);
            }
        }
        else {
          map.put("enablePrintAndSign", enablePrintAndSign);
        }
    }
    if (enableReassign != null) {
        if (isFileTypeOrListOfFiles(enableReassign)) {
            fileTypeFound = true;
        }

        if (enableReassign.getClass().equals(java.io.File.class) ||
            enableReassign.getClass().equals(Integer.class) ||
            enableReassign.getClass().equals(String.class) ||
            enableReassign.getClass().isEnum()) {
            map.put("enableReassign", enableReassign);
        } else if (isListOfFile(enableReassign)) {
            for(int i = 0; i< getListSize(enableReassign); i++) {
                map.put("enableReassign", enableReassign);
            }
        }
        else {
          map.put("enableReassign", enableReassign);
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", enableSigningOrder);
        }
    }
    if (disableExpiryAlert != null) {
        if (isFileTypeOrListOfFiles(disableExpiryAlert)) {
            fileTypeFound = true;
        }

        if (disableExpiryAlert.getClass().equals(java.io.File.class) ||
            disableExpiryAlert.getClass().equals(Integer.class) ||
            disableExpiryAlert.getClass().equals(String.class) ||
            disableExpiryAlert.getClass().isEnum()) {
            map.put("disableExpiryAlert", disableExpiryAlert);
        } else if (isListOfFile(disableExpiryAlert)) {
            for(int i = 0; i< getListSize(disableExpiryAlert); i++) {
                map.put("disableExpiryAlert", disableExpiryAlert);
            }
        }
        else {
          map.put("disableExpiryAlert", disableExpiryAlert);
        }
    }
    if (documentInfo != null) {
        if (isFileTypeOrListOfFiles(documentInfo)) {
            fileTypeFound = true;
        }

        if (documentInfo.getClass().equals(java.io.File.class) ||
            documentInfo.getClass().equals(Integer.class) ||
            documentInfo.getClass().equals(String.class) ||
            documentInfo.getClass().isEnum()) {
            map.put("documentInfo", documentInfo);
        } else if (isListOfFile(documentInfo)) {
            for(int i = 0; i< getListSize(documentInfo); i++) {
                map.put("documentInfo", documentInfo);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentInfo) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentInfo", objectList);
        }
    }
    if (onBehalfOf != null) {
        if (isFileTypeOrListOfFiles(onBehalfOf)) {
            fileTypeFound = true;
        }

        if (onBehalfOf.getClass().equals(java.io.File.class) ||
            onBehalfOf.getClass().equals(Integer.class) ||
            onBehalfOf.getClass().equals(String.class) ||
            onBehalfOf.getClass().isEnum()) {
            map.put("onBehalfOf", onBehalfOf);
        } else if (isListOfFile(onBehalfOf)) {
            for(int i = 0; i< getListSize(onBehalfOf); i++) {
                map.put("onBehalfOf", onBehalfOf);
            }
        }
        else {
          map.put("onBehalfOf", onBehalfOf);
        }
    }
    if (isSandbox != null) {
        if (isFileTypeOrListOfFiles(isSandbox)) {
            fileTypeFound = true;
        }

        if (isSandbox.getClass().equals(java.io.File.class) ||
            isSandbox.getClass().equals(Integer.class) ||
            isSandbox.getClass().equals(String.class) ||
            isSandbox.getClass().isEnum()) {
            map.put("isSandbox", isSandbox);
        } else if (isListOfFile(isSandbox)) {
            for(int i = 0; i< getListSize(isSandbox); i++) {
                map.put("isSandbox", isSandbox);
            }
        }
        else {
          map.put("isSandbox", isSandbox);
        }
    }
    if (roleRemovalIndices != null) {
        if (isFileTypeOrListOfFiles(roleRemovalIndices)) {
            fileTypeFound = true;
        }

        if (roleRemovalIndices.getClass().equals(java.io.File.class) ||
            roleRemovalIndices.getClass().equals(Integer.class) ||
            roleRemovalIndices.getClass().equals(String.class) ||
            roleRemovalIndices.getClass().isEnum()) {
            map.put("roleRemovalIndices", roleRemovalIndices);
        } else if (isListOfFile(roleRemovalIndices)) {
            for(int i = 0; i< getListSize(roleRemovalIndices); i++) {
                map.put("roleRemovalIndices", roleRemovalIndices);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : roleRemovalIndices) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("roleRemovalIndices", objectList);
        }
    }
    if (documentDownloadOption != null) {
        if (isFileTypeOrListOfFiles(documentDownloadOption)) {
            fileTypeFound = true;
        }

        if (documentDownloadOption.getClass().equals(java.io.File.class) ||
            documentDownloadOption.getClass().equals(Integer.class) ||
            documentDownloadOption.getClass().equals(String.class) ||
            documentDownloadOption.getClass().isEnum()) {
            map.put("documentDownloadOption", documentDownloadOption);
        } else if (isListOfFile(documentDownloadOption)) {
            for(int i = 0; i< getListSize(documentDownloadOption); i++) {
                map.put("documentDownloadOption", documentDownloadOption);
            }
        }
        else {
          map.put("documentDownloadOption", documentDownloadOption);
        }
    }
    if (metaData != null) {
        if (isFileTypeOrListOfFiles(metaData)) {
            fileTypeFound = true;
        }

        if (metaData.getClass().equals(java.io.File.class) ||
            metaData.getClass().equals(Integer.class) ||
            metaData.getClass().equals(String.class) ||
            metaData.getClass().isEnum()) {
            map.put("metaData", metaData);
        } else if (isListOfFile(metaData)) {
            for(int i = 0; i< getListSize(metaData); i++) {
                map.put("metaData", metaData);
            }
        }
        else {
          map.put("metaData", metaData);
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", recipientNotificationSettings);
        }
    }
    if (formGroups != null) {
        if (isFileTypeOrListOfFiles(formGroups)) {
            fileTypeFound = true;
        }

        if (formGroups.getClass().equals(java.io.File.class) ||
            formGroups.getClass().equals(Integer.class) ||
            formGroups.getClass().equals(String.class) ||
            formGroups.getClass().isEnum()) {
            map.put("formGroups", formGroups);
        } else if (isListOfFile(formGroups)) {
            for(int i = 0; i< getListSize(formGroups); i++) {
                map.put("formGroups", formGroups);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formGroups) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formGroups", objectList);
        }
    }
    if (removeFormFields != null) {
        if (isFileTypeOrListOfFiles(removeFormFields)) {
            fileTypeFound = true;
        }

        if (removeFormFields.getClass().equals(java.io.File.class) ||
            removeFormFields.getClass().equals(Integer.class) ||
            removeFormFields.getClass().equals(String.class) ||
            removeFormFields.getClass().isEnum()) {
            map.put("removeFormFields", removeFormFields);
        } else if (isListOfFile(removeFormFields)) {
            for(int i = 0; i< getListSize(removeFormFields); i++) {
                map.put("removeFormFields", removeFormFields);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : removeFormFields) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("removeFormFields", objectList);
        }
    }
    if (enableAuditTrailLocalization != null) {
        if (isFileTypeOrListOfFiles(enableAuditTrailLocalization)) {
            fileTypeFound = true;
        }

        if (enableAuditTrailLocalization.getClass().equals(java.io.File.class) ||
            enableAuditTrailLocalization.getClass().equals(Integer.class) ||
            enableAuditTrailLocalization.getClass().equals(String.class) ||
            enableAuditTrailLocalization.getClass().isEnum()) {
            map.put("enableAuditTrailLocalization", enableAuditTrailLocalization);
        } else if (isListOfFile(enableAuditTrailLocalization)) {
            for(int i = 0; i< getListSize(enableAuditTrailLocalization); i++) {
                map.put("enableAuditTrailLocalization", enableAuditTrailLocalization);
            }
        }
        else {
          map.put("enableAuditTrailLocalization", enableAuditTrailLocalization);
        }
    }
    if (downloadFileName != null) {
        if (isFileTypeOrListOfFiles(downloadFileName)) {
            fileTypeFound = true;
        }

        if (downloadFileName.getClass().equals(java.io.File.class) ||
            downloadFileName.getClass().equals(Integer.class) ||
            downloadFileName.getClass().equals(String.class) ||
            downloadFileName.getClass().isEnum()) {
            map.put("downloadFileName", downloadFileName);
        } else if (isListOfFile(downloadFileName)) {
            for(int i = 0; i< getListSize(downloadFileName); i++) {
                map.put("downloadFileName", downloadFileName);
            }
        }
        else {
          map.put("downloadFileName", downloadFileName);
        }
    }
    if (scheduledSendTime != null) {
        if (isFileTypeOrListOfFiles(scheduledSendTime)) {
            fileTypeFound = true;
        }

        if (scheduledSendTime.getClass().equals(java.io.File.class) ||
            scheduledSendTime.getClass().equals(Integer.class) ||
            scheduledSendTime.getClass().equals(String.class) ||
            scheduledSendTime.getClass().isEnum()) {
            map.put("scheduledSendTime", scheduledSendTime);
        } else if (isListOfFile(scheduledSendTime)) {
            for(int i = 0; i< getListSize(scheduledSendTime); i++) {
                map.put("scheduledSendTime", scheduledSendTime);
            }
        }
        else {
          map.put("scheduledSendTime", scheduledSendTime);
        }
    }
    if (allowScheduledSend != null) {
        if (isFileTypeOrListOfFiles(allowScheduledSend)) {
            fileTypeFound = true;
        }

        if (allowScheduledSend.getClass().equals(java.io.File.class) ||
            allowScheduledSend.getClass().equals(Integer.class) ||
            allowScheduledSend.getClass().equals(String.class) ||
            allowScheduledSend.getClass().isEnum()) {
            map.put("allowScheduledSend", allowScheduledSend);
        } else if (isListOfFile(allowScheduledSend)) {
            for(int i = 0; i< getListSize(allowScheduledSend); i++) {
                map.put("allowScheduledSend", allowScheduledSend);
            }
        }
        else {
          map.put("allowScheduledSend", allowScheduledSend);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("files");
    openapiFields.add("fileUrls");
    openapiFields.add("documentId");
    openapiFields.add("title");
    openapiFields.add("message");
    openapiFields.add("roles");
    openapiFields.add("brandId");
    openapiFields.add("labels");
    openapiFields.add("disableEmails");
    openapiFields.add("disableSMS");
    openapiFields.add("hideDocumentId");
    openapiFields.add("reminderSettings");
    openapiFields.add("cc");
    openapiFields.add("expiryDays");
    openapiFields.add("expiryDateType");
    openapiFields.add("expiryValue");
    openapiFields.add("enablePrintAndSign");
    openapiFields.add("enableReassign");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("disableExpiryAlert");
    openapiFields.add("documentInfo");
    openapiFields.add("onBehalfOf");
    openapiFields.add("isSandbox");
    openapiFields.add("roleRemovalIndices");
    openapiFields.add("documentDownloadOption");
    openapiFields.add("metaData");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("formGroups");
    openapiFields.add("removeFormFields");
    openapiFields.add("enableAuditTrailLocalization");
    openapiFields.add("downloadFileName");
    openapiFields.add("scheduledSendTime");
    openapiFields.add("allowScheduledSend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendForSignFromTemplateForm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendForSignFromTemplateForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendForSignFromTemplateForm is not found in the empty JSON string", SendForSignFromTemplateForm.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull() && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileUrls") != null && !jsonObj.get("fileUrls").isJsonNull() && !jsonObj.get("fileUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrls` to be an array in the JSON string but got `%s`", jsonObj.get("fileUrls").toString()));
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            Role.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `reminderSettings`
      if (jsonObj.get("reminderSettings") != null && !jsonObj.get("reminderSettings").isJsonNull()) {
        ReminderSettings.validateJsonElement(jsonObj.get("reminderSettings"));
      }
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
          }

          // validate the optional field `cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            DocumentCC.validateJsonElement(jsonArraycc.get(i));
          };
        }
      }
      if ((jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) && !jsonObj.get("expiryDateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDateType").toString()));
      }
      // validate the optional field `expiryDateType`
      if (jsonObj.get("expiryDateType") != null && !jsonObj.get("expiryDateType").isJsonNull()) {
        ExpiryDateTypeEnum.validateJsonElement(jsonObj.get("expiryDateType"));
      }
      if (jsonObj.get("documentInfo") != null && !jsonObj.get("documentInfo").isJsonNull()) {
        JsonArray jsonArraydocumentInfo = jsonObj.getAsJsonArray("documentInfo");
        if (jsonArraydocumentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("documentInfo").toString()));
          }

          // validate the optional field `documentInfo` (array)
          for (int i = 0; i < jsonArraydocumentInfo.size(); i++) {
            DocumentInfo.validateJsonElement(jsonArraydocumentInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) && !jsonObj.get("onBehalfOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onBehalfOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onBehalfOf").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roleRemovalIndices") != null && !jsonObj.get("roleRemovalIndices").isJsonNull() && !jsonObj.get("roleRemovalIndices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleRemovalIndices` to be an array in the JSON string but got `%s`", jsonObj.get("roleRemovalIndices").toString()));
      }
      if ((jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) && !jsonObj.get("documentDownloadOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentDownloadOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentDownloadOption").toString()));
      }
      // validate the optional field `documentDownloadOption`
      if (jsonObj.get("documentDownloadOption") != null && !jsonObj.get("documentDownloadOption").isJsonNull()) {
        DocumentDownloadOptionEnum.validateJsonElement(jsonObj.get("documentDownloadOption"));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
      if (jsonObj.get("formGroups") != null && !jsonObj.get("formGroups").isJsonNull()) {
        JsonArray jsonArrayformGroups = jsonObj.getAsJsonArray("formGroups");
        if (jsonArrayformGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formGroups` to be an array in the JSON string but got `%s`", jsonObj.get("formGroups").toString()));
          }

          // validate the optional field `formGroups` (array)
          for (int i = 0; i < jsonArrayformGroups.size(); i++) {
            FormGroup.validateJsonElement(jsonArrayformGroups.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removeFormFields") != null && !jsonObj.get("removeFormFields").isJsonNull() && !jsonObj.get("removeFormFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeFormFields` to be an array in the JSON string but got `%s`", jsonObj.get("removeFormFields").toString()));
      }
      if ((jsonObj.get("downloadFileName") != null && !jsonObj.get("downloadFileName").isJsonNull()) && !jsonObj.get("downloadFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadFileName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendForSignFromTemplateForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendForSignFromTemplateForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendForSignFromTemplateForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendForSignFromTemplateForm.class));

       return (TypeAdapter<T>) new TypeAdapter<SendForSignFromTemplateForm>() {
           @Override
           public void write(JsonWriter out, SendForSignFromTemplateForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendForSignFromTemplateForm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendForSignFromTemplateForm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendForSignFromTemplateForm
   * @throws IOException if the JSON string is invalid with respect to SendForSignFromTemplateForm
   */
  public static SendForSignFromTemplateForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendForSignFromTemplateForm.class);
  }

  /**
   * Convert an instance of SendForSignFromTemplateForm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

