/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * NotificationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class NotificationSettings {
  public static final String SERIALIZED_NAME_VIEWED = "viewed";
  @SerializedName(SERIALIZED_NAME_VIEWED)
  private Boolean viewed = true;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Boolean sent = false;

  public static final String SERIALIZED_NAME_DELIVERY_FAILED = "deliveryFailed";
  @SerializedName(SERIALIZED_NAME_DELIVERY_FAILED)
  private Boolean deliveryFailed = true;

  public static final String SERIALIZED_NAME_DECLINED = "declined";
  @SerializedName(SERIALIZED_NAME_DECLINED)
  private Boolean declined = true;

  public static final String SERIALIZED_NAME_REVOKED = "revoked";
  @SerializedName(SERIALIZED_NAME_REVOKED)
  private Boolean revoked = true;

  public static final String SERIALIZED_NAME_REASSIGNED = "reassigned";
  @SerializedName(SERIALIZED_NAME_REASSIGNED)
  private Boolean reassigned = true;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed = true;

  public static final String SERIALIZED_NAME_SIGNED = "signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  private Boolean signed = true;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired = true;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FAILED = "authenticationFailed";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FAILED)
  private Boolean authenticationFailed = true;

  public static final String SERIALIZED_NAME_REMINDERS = "reminders";
  @SerializedName(SERIALIZED_NAME_REMINDERS)
  private Boolean reminders = true;

  public NotificationSettings() {
  }

  public NotificationSettings viewed(Boolean viewed) {
    this.viewed = viewed;
    return this;
  }

  /**
   * Get viewed
   * @return viewed
   */
  @javax.annotation.Nullable
  public Boolean getViewed() {
    return viewed;
  }

  public void setViewed(Boolean viewed) {
    this.viewed = viewed;
  }


  public NotificationSettings sent(Boolean sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public Boolean getSent() {
    return sent;
  }

  public void setSent(Boolean sent) {
    this.sent = sent;
  }


  public NotificationSettings deliveryFailed(Boolean deliveryFailed) {
    this.deliveryFailed = deliveryFailed;
    return this;
  }

  /**
   * Get deliveryFailed
   * @return deliveryFailed
   */
  @javax.annotation.Nullable
  public Boolean getDeliveryFailed() {
    return deliveryFailed;
  }

  public void setDeliveryFailed(Boolean deliveryFailed) {
    this.deliveryFailed = deliveryFailed;
  }


  public NotificationSettings declined(Boolean declined) {
    this.declined = declined;
    return this;
  }

  /**
   * Get declined
   * @return declined
   */
  @javax.annotation.Nullable
  public Boolean getDeclined() {
    return declined;
  }

  public void setDeclined(Boolean declined) {
    this.declined = declined;
  }


  public NotificationSettings revoked(Boolean revoked) {
    this.revoked = revoked;
    return this;
  }

  /**
   * Get revoked
   * @return revoked
   */
  @javax.annotation.Nullable
  public Boolean getRevoked() {
    return revoked;
  }

  public void setRevoked(Boolean revoked) {
    this.revoked = revoked;
  }


  public NotificationSettings reassigned(Boolean reassigned) {
    this.reassigned = reassigned;
    return this;
  }

  /**
   * Get reassigned
   * @return reassigned
   */
  @javax.annotation.Nullable
  public Boolean getReassigned() {
    return reassigned;
  }

  public void setReassigned(Boolean reassigned) {
    this.reassigned = reassigned;
  }


  public NotificationSettings completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Get completed
   * @return completed
   */
  @javax.annotation.Nullable
  public Boolean getCompleted() {
    return completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public NotificationSettings signed(Boolean signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Get signed
   * @return signed
   */
  @javax.annotation.Nullable
  public Boolean getSigned() {
    return signed;
  }

  public void setSigned(Boolean signed) {
    this.signed = signed;
  }


  public NotificationSettings expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public NotificationSettings authenticationFailed(Boolean authenticationFailed) {
    this.authenticationFailed = authenticationFailed;
    return this;
  }

  /**
   * Get authenticationFailed
   * @return authenticationFailed
   */
  @javax.annotation.Nullable
  public Boolean getAuthenticationFailed() {
    return authenticationFailed;
  }

  public void setAuthenticationFailed(Boolean authenticationFailed) {
    this.authenticationFailed = authenticationFailed;
  }


  public NotificationSettings reminders(Boolean reminders) {
    this.reminders = reminders;
    return this;
  }

  /**
   * Get reminders
   * @return reminders
   */
  @javax.annotation.Nullable
  public Boolean getReminders() {
    return reminders;
  }

  public void setReminders(Boolean reminders) {
    this.reminders = reminders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationSettings notificationSettings = (NotificationSettings) o;
    return Objects.equals(this.viewed, notificationSettings.viewed) &&
        Objects.equals(this.sent, notificationSettings.sent) &&
        Objects.equals(this.deliveryFailed, notificationSettings.deliveryFailed) &&
        Objects.equals(this.declined, notificationSettings.declined) &&
        Objects.equals(this.revoked, notificationSettings.revoked) &&
        Objects.equals(this.reassigned, notificationSettings.reassigned) &&
        Objects.equals(this.completed, notificationSettings.completed) &&
        Objects.equals(this.signed, notificationSettings.signed) &&
        Objects.equals(this.expired, notificationSettings.expired) &&
        Objects.equals(this.authenticationFailed, notificationSettings.authenticationFailed) &&
        Objects.equals(this.reminders, notificationSettings.reminders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewed, sent, deliveryFailed, declined, revoked, reassigned, completed, signed, expired, authenticationFailed, reminders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationSettings {\n");
    sb.append("    viewed: ").append(toIndentedString(viewed)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    deliveryFailed: ").append(toIndentedString(deliveryFailed)).append("\n");
    sb.append("    declined: ").append(toIndentedString(declined)).append("\n");
    sb.append("    revoked: ").append(toIndentedString(revoked)).append("\n");
    sb.append("    reassigned: ").append(toIndentedString(reassigned)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    authenticationFailed: ").append(toIndentedString(authenticationFailed)).append("\n");
    sb.append("    reminders: ").append(toIndentedString(reminders)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (viewed != null) {
        if (isFileTypeOrListOfFiles(viewed)) {
            fileTypeFound = true;
        }

        if (viewed.getClass().equals(java.io.File.class) ||
            viewed.getClass().equals(Integer.class) ||
            viewed.getClass().equals(String.class) ||
            viewed.getClass().isEnum()) {
            map.put("viewed", viewed);
        } else if (isListOfFile(viewed)) {
            for(int i = 0; i< getListSize(viewed); i++) {
                map.put("viewed", viewed);
            }
        }
        else {
          map.put("viewed", viewed);
        }
    }
    if (sent != null) {
        if (isFileTypeOrListOfFiles(sent)) {
            fileTypeFound = true;
        }

        if (sent.getClass().equals(java.io.File.class) ||
            sent.getClass().equals(Integer.class) ||
            sent.getClass().equals(String.class) ||
            sent.getClass().isEnum()) {
            map.put("sent", sent);
        } else if (isListOfFile(sent)) {
            for(int i = 0; i< getListSize(sent); i++) {
                map.put("sent", sent);
            }
        }
        else {
          map.put("sent", sent);
        }
    }
    if (deliveryFailed != null) {
        if (isFileTypeOrListOfFiles(deliveryFailed)) {
            fileTypeFound = true;
        }

        if (deliveryFailed.getClass().equals(java.io.File.class) ||
            deliveryFailed.getClass().equals(Integer.class) ||
            deliveryFailed.getClass().equals(String.class) ||
            deliveryFailed.getClass().isEnum()) {
            map.put("deliveryFailed", deliveryFailed);
        } else if (isListOfFile(deliveryFailed)) {
            for(int i = 0; i< getListSize(deliveryFailed); i++) {
                map.put("deliveryFailed", deliveryFailed);
            }
        }
        else {
          map.put("deliveryFailed", deliveryFailed);
        }
    }
    if (declined != null) {
        if (isFileTypeOrListOfFiles(declined)) {
            fileTypeFound = true;
        }

        if (declined.getClass().equals(java.io.File.class) ||
            declined.getClass().equals(Integer.class) ||
            declined.getClass().equals(String.class) ||
            declined.getClass().isEnum()) {
            map.put("declined", declined);
        } else if (isListOfFile(declined)) {
            for(int i = 0; i< getListSize(declined); i++) {
                map.put("declined", declined);
            }
        }
        else {
          map.put("declined", declined);
        }
    }
    if (revoked != null) {
        if (isFileTypeOrListOfFiles(revoked)) {
            fileTypeFound = true;
        }

        if (revoked.getClass().equals(java.io.File.class) ||
            revoked.getClass().equals(Integer.class) ||
            revoked.getClass().equals(String.class) ||
            revoked.getClass().isEnum()) {
            map.put("revoked", revoked);
        } else if (isListOfFile(revoked)) {
            for(int i = 0; i< getListSize(revoked); i++) {
                map.put("revoked", revoked);
            }
        }
        else {
          map.put("revoked", revoked);
        }
    }
    if (reassigned != null) {
        if (isFileTypeOrListOfFiles(reassigned)) {
            fileTypeFound = true;
        }

        if (reassigned.getClass().equals(java.io.File.class) ||
            reassigned.getClass().equals(Integer.class) ||
            reassigned.getClass().equals(String.class) ||
            reassigned.getClass().isEnum()) {
            map.put("reassigned", reassigned);
        } else if (isListOfFile(reassigned)) {
            for(int i = 0; i< getListSize(reassigned); i++) {
                map.put("reassigned", reassigned);
            }
        }
        else {
          map.put("reassigned", reassigned);
        }
    }
    if (completed != null) {
        if (isFileTypeOrListOfFiles(completed)) {
            fileTypeFound = true;
        }

        if (completed.getClass().equals(java.io.File.class) ||
            completed.getClass().equals(Integer.class) ||
            completed.getClass().equals(String.class) ||
            completed.getClass().isEnum()) {
            map.put("completed", completed);
        } else if (isListOfFile(completed)) {
            for(int i = 0; i< getListSize(completed); i++) {
                map.put("completed", completed);
            }
        }
        else {
          map.put("completed", completed);
        }
    }
    if (signed != null) {
        if (isFileTypeOrListOfFiles(signed)) {
            fileTypeFound = true;
        }

        if (signed.getClass().equals(java.io.File.class) ||
            signed.getClass().equals(Integer.class) ||
            signed.getClass().equals(String.class) ||
            signed.getClass().isEnum()) {
            map.put("signed", signed);
        } else if (isListOfFile(signed)) {
            for(int i = 0; i< getListSize(signed); i++) {
                map.put("signed", signed);
            }
        }
        else {
          map.put("signed", signed);
        }
    }
    if (expired != null) {
        if (isFileTypeOrListOfFiles(expired)) {
            fileTypeFound = true;
        }

        if (expired.getClass().equals(java.io.File.class) ||
            expired.getClass().equals(Integer.class) ||
            expired.getClass().equals(String.class) ||
            expired.getClass().isEnum()) {
            map.put("expired", expired);
        } else if (isListOfFile(expired)) {
            for(int i = 0; i< getListSize(expired); i++) {
                map.put("expired", expired);
            }
        }
        else {
          map.put("expired", expired);
        }
    }
    if (authenticationFailed != null) {
        if (isFileTypeOrListOfFiles(authenticationFailed)) {
            fileTypeFound = true;
        }

        if (authenticationFailed.getClass().equals(java.io.File.class) ||
            authenticationFailed.getClass().equals(Integer.class) ||
            authenticationFailed.getClass().equals(String.class) ||
            authenticationFailed.getClass().isEnum()) {
            map.put("authenticationFailed", authenticationFailed);
        } else if (isListOfFile(authenticationFailed)) {
            for(int i = 0; i< getListSize(authenticationFailed); i++) {
                map.put("authenticationFailed", authenticationFailed);
            }
        }
        else {
          map.put("authenticationFailed", authenticationFailed);
        }
    }
    if (reminders != null) {
        if (isFileTypeOrListOfFiles(reminders)) {
            fileTypeFound = true;
        }

        if (reminders.getClass().equals(java.io.File.class) ||
            reminders.getClass().equals(Integer.class) ||
            reminders.getClass().equals(String.class) ||
            reminders.getClass().isEnum()) {
            map.put("reminders", reminders);
        } else if (isListOfFile(reminders)) {
            for(int i = 0; i< getListSize(reminders); i++) {
                map.put("reminders", reminders);
            }
        }
        else {
          map.put("reminders", reminders);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("viewed");
    openapiFields.add("sent");
    openapiFields.add("deliveryFailed");
    openapiFields.add("declined");
    openapiFields.add("revoked");
    openapiFields.add("reassigned");
    openapiFields.add("completed");
    openapiFields.add("signed");
    openapiFields.add("expired");
    openapiFields.add("authenticationFailed");
    openapiFields.add("reminders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationSettings is not found in the empty JSON string", NotificationSettings.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationSettings>() {
           @Override
           public void write(JsonWriter out, NotificationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationSettings
   * @throws IOException if the JSON string is invalid with respect to NotificationSettings
   */
  public static NotificationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationSettings.class);
  }

  /**
   * Convert an instance of NotificationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

