/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.DocumentCC;
import com.boldsign.model.DocumentInfo;
import com.boldsign.model.FormGroup;
import com.boldsign.model.RecipientNotificationSettings;
import com.boldsign.model.TemplateRole;
import com.boldsign.model.TextTagDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * CreateTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class CreateTemplateRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE = "documentTitle";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE)
  private String documentTitle;

  public static final String SERIALIZED_NAME_DOCUMENT_MESSAGE = "documentMessage";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_MESSAGE)
  private String documentMessage;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<File> files;

  public static final String SERIALIZED_NAME_FILE_URLS = "fileUrls";
  @SerializedName(SERIALIZED_NAME_FILE_URLS)
  private List<URI> fileUrls;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<TemplateRole> roles;

  public static final String SERIALIZED_NAME_ALLOW_MODIFY_FILES = "allowModifyFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_MODIFY_FILES)
  private Boolean allowModifyFiles = true;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<DocumentCC> cc;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_ALLOW_MESSAGE_EDITING = "allowMessageEditing";
  @SerializedName(SERIALIZED_NAME_ALLOW_MESSAGE_EDITING)
  private Boolean allowMessageEditing = true;

  public static final String SERIALIZED_NAME_ALLOW_NEW_ROLES = "allowNewRoles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_ROLES)
  private Boolean allowNewRoles = true;

  public static final String SERIALIZED_NAME_ALLOW_NEW_FILES = "allowNewFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_FILES)
  private Boolean allowNewFiles = true;

  public static final String SERIALIZED_NAME_ENABLE_REASSIGN = "enableReassign";
  @SerializedName(SERIALIZED_NAME_ENABLE_REASSIGN)
  private Boolean enableReassign = true;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_AND_ASSIGN = "enablePrintAndAssign";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_AND_ASSIGN)
  private Boolean enablePrintAndAssign = false;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder = false;

  public static final String SERIALIZED_NAME_DOCUMENT_INFO = "documentInfo";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INFO)
  private List<DocumentInfo> documentInfo;

  public static final String SERIALIZED_NAME_USE_TEXT_TAGS = "useTextTags";
  @SerializedName(SERIALIZED_NAME_USE_TEXT_TAGS)
  private Boolean useTextTags = false;

  public static final String SERIALIZED_NAME_TEXT_TAG_DEFINITIONS = "textTagDefinitions";
  @SerializedName(SERIALIZED_NAME_TEXT_TAG_DEFINITIONS)
  private List<TextTagDefinition> textTagDefinitions;

  public static final String SERIALIZED_NAME_AUTO_DETECT_FIELDS = "autoDetectFields";
  @SerializedName(SERIALIZED_NAME_AUTO_DETECT_FIELDS)
  private Boolean autoDetectFields = false;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private String onBehalfOf;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_TEMPLATE_LABELS = "templateLabels";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LABELS)
  private List<String> templateLabels;

  public static final String SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS = "recipientNotificationSettings";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_NOTIFICATION_SETTINGS)
  private RecipientNotificationSettings recipientNotificationSettings;

  public static final String SERIALIZED_NAME_FORM_GROUPS = "formGroups";
  @SerializedName(SERIALIZED_NAME_FORM_GROUPS)
  private List<FormGroup> formGroups;

  public CreateTemplateRequest() {
  }

  public CreateTemplateRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CreateTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateTemplateRequest documentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  /**
   * Get documentTitle
   * @return documentTitle
   */
  @javax.annotation.Nullable
  public String getDocumentTitle() {
    return documentTitle;
  }

  public void setDocumentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
  }


  public CreateTemplateRequest documentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
    return this;
  }

  /**
   * Get documentMessage
   * @return documentMessage
   */
  @javax.annotation.Nullable
  public String getDocumentMessage() {
    return documentMessage;
  }

  public void setDocumentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
  }


  public CreateTemplateRequest files(List<File> files) {
    this.files = files;
    return this;
  }

  public CreateTemplateRequest addFilesItem(File filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<File> getFiles() {
    return files;
  }

  public void setFiles(List<File> files) {
    this.files = files;
  }


  public CreateTemplateRequest fileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
    return this;
  }

  public CreateTemplateRequest addFileUrlsItem(URI fileUrlsItem) {
    if (this.fileUrls == null) {
      this.fileUrls = new ArrayList<>();
    }
    this.fileUrls.add(fileUrlsItem);
    return this;
  }

  /**
   * Get fileUrls
   * @return fileUrls
   */
  @javax.annotation.Nullable
  public List<URI> getFileUrls() {
    return fileUrls;
  }

  public void setFileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
  }


  public CreateTemplateRequest roles(List<TemplateRole> roles) {
    this.roles = roles;
    return this;
  }

  public CreateTemplateRequest addRolesItem(TemplateRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List<TemplateRole> getRoles() {
    return roles;
  }

  public void setRoles(List<TemplateRole> roles) {
    this.roles = roles;
  }


  public CreateTemplateRequest allowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
    return this;
  }

  /**
   * Get allowModifyFiles
   * @return allowModifyFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowModifyFiles() {
    return allowModifyFiles;
  }

  public void setAllowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
  }


  public CreateTemplateRequest cc(List<DocumentCC> cc) {
    this.cc = cc;
    return this;
  }

  public CreateTemplateRequest addCcItem(DocumentCC ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<DocumentCC> getCc() {
    return cc;
  }

  public void setCc(List<DocumentCC> cc) {
    this.cc = cc;
  }


  public CreateTemplateRequest brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public CreateTemplateRequest allowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
    return this;
  }

  /**
   * Get allowMessageEditing
   * @return allowMessageEditing
   */
  @javax.annotation.Nullable
  public Boolean getAllowMessageEditing() {
    return allowMessageEditing;
  }

  public void setAllowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
  }


  public CreateTemplateRequest allowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
    return this;
  }

  /**
   * Get allowNewRoles
   * @return allowNewRoles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewRoles() {
    return allowNewRoles;
  }

  public void setAllowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
  }


  public CreateTemplateRequest allowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
    return this;
  }

  /**
   * Get allowNewFiles
   * @return allowNewFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewFiles() {
    return allowNewFiles;
  }

  public void setAllowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
  }


  public CreateTemplateRequest enableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
    return this;
  }

  /**
   * Get enableReassign
   * @return enableReassign
   */
  @javax.annotation.Nullable
  public Boolean getEnableReassign() {
    return enableReassign;
  }

  public void setEnableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
  }


  public CreateTemplateRequest enablePrintAndAssign(Boolean enablePrintAndAssign) {
    this.enablePrintAndAssign = enablePrintAndAssign;
    return this;
  }

  /**
   * Get enablePrintAndAssign
   * @return enablePrintAndAssign
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrintAndAssign() {
    return enablePrintAndAssign;
  }

  public void setEnablePrintAndAssign(Boolean enablePrintAndAssign) {
    this.enablePrintAndAssign = enablePrintAndAssign;
  }


  public CreateTemplateRequest enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public CreateTemplateRequest documentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
    return this;
  }

  public CreateTemplateRequest addDocumentInfoItem(DocumentInfo documentInfoItem) {
    if (this.documentInfo == null) {
      this.documentInfo = new ArrayList<>();
    }
    this.documentInfo.add(documentInfoItem);
    return this;
  }

  /**
   * Get documentInfo
   * @return documentInfo
   */
  @javax.annotation.Nullable
  public List<DocumentInfo> getDocumentInfo() {
    return documentInfo;
  }

  public void setDocumentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
  }


  public CreateTemplateRequest useTextTags(Boolean useTextTags) {
    this.useTextTags = useTextTags;
    return this;
  }

  /**
   * Get useTextTags
   * @return useTextTags
   */
  @javax.annotation.Nullable
  public Boolean getUseTextTags() {
    return useTextTags;
  }

  public void setUseTextTags(Boolean useTextTags) {
    this.useTextTags = useTextTags;
  }


  public CreateTemplateRequest textTagDefinitions(List<TextTagDefinition> textTagDefinitions) {
    this.textTagDefinitions = textTagDefinitions;
    return this;
  }

  public CreateTemplateRequest addTextTagDefinitionsItem(TextTagDefinition textTagDefinitionsItem) {
    if (this.textTagDefinitions == null) {
      this.textTagDefinitions = new ArrayList<>();
    }
    this.textTagDefinitions.add(textTagDefinitionsItem);
    return this;
  }

  /**
   * Get textTagDefinitions
   * @return textTagDefinitions
   */
  @javax.annotation.Nullable
  public List<TextTagDefinition> getTextTagDefinitions() {
    return textTagDefinitions;
  }

  public void setTextTagDefinitions(List<TextTagDefinition> textTagDefinitions) {
    this.textTagDefinitions = textTagDefinitions;
  }


  public CreateTemplateRequest autoDetectFields(Boolean autoDetectFields) {
    this.autoDetectFields = autoDetectFields;
    return this;
  }

  /**
   * Get autoDetectFields
   * @return autoDetectFields
   */
  @javax.annotation.Nullable
  public Boolean getAutoDetectFields() {
    return autoDetectFields;
  }

  public void setAutoDetectFields(Boolean autoDetectFields) {
    this.autoDetectFields = autoDetectFields;
  }


  public CreateTemplateRequest onBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public String getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public CreateTemplateRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public CreateTemplateRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public CreateTemplateRequest templateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
    return this;
  }

  public CreateTemplateRequest addTemplateLabelsItem(String templateLabelsItem) {
    if (this.templateLabels == null) {
      this.templateLabels = new ArrayList<>();
    }
    this.templateLabels.add(templateLabelsItem);
    return this;
  }

  /**
   * Get templateLabels
   * @return templateLabels
   */
  @javax.annotation.Nullable
  public List<String> getTemplateLabels() {
    return templateLabels;
  }

  public void setTemplateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
  }


  public CreateTemplateRequest recipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
    return this;
  }

  /**
   * Get recipientNotificationSettings
   * @return recipientNotificationSettings
   */
  @javax.annotation.Nullable
  public RecipientNotificationSettings getRecipientNotificationSettings() {
    return recipientNotificationSettings;
  }

  public void setRecipientNotificationSettings(RecipientNotificationSettings recipientNotificationSettings) {
    this.recipientNotificationSettings = recipientNotificationSettings;
  }


  public CreateTemplateRequest formGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
    return this;
  }

  public CreateTemplateRequest addFormGroupsItem(FormGroup formGroupsItem) {
    if (this.formGroups == null) {
      this.formGroups = new ArrayList<>();
    }
    this.formGroups.add(formGroupsItem);
    return this;
  }

  /**
   * Get formGroups
   * @return formGroups
   */
  @javax.annotation.Nullable
  public List<FormGroup> getFormGroups() {
    return formGroups;
  }

  public void setFormGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTemplateRequest createTemplateRequest = (CreateTemplateRequest) o;
    return Objects.equals(this.title, createTemplateRequest.title) &&
        Objects.equals(this.description, createTemplateRequest.description) &&
        Objects.equals(this.documentTitle, createTemplateRequest.documentTitle) &&
        Objects.equals(this.documentMessage, createTemplateRequest.documentMessage) &&
        Objects.equals(this.files, createTemplateRequest.files) &&
        Objects.equals(this.fileUrls, createTemplateRequest.fileUrls) &&
        Objects.equals(this.roles, createTemplateRequest.roles) &&
        Objects.equals(this.allowModifyFiles, createTemplateRequest.allowModifyFiles) &&
        Objects.equals(this.cc, createTemplateRequest.cc) &&
        Objects.equals(this.brandId, createTemplateRequest.brandId) &&
        Objects.equals(this.allowMessageEditing, createTemplateRequest.allowMessageEditing) &&
        Objects.equals(this.allowNewRoles, createTemplateRequest.allowNewRoles) &&
        Objects.equals(this.allowNewFiles, createTemplateRequest.allowNewFiles) &&
        Objects.equals(this.enableReassign, createTemplateRequest.enableReassign) &&
        Objects.equals(this.enablePrintAndAssign, createTemplateRequest.enablePrintAndAssign) &&
        Objects.equals(this.enableSigningOrder, createTemplateRequest.enableSigningOrder) &&
        Objects.equals(this.documentInfo, createTemplateRequest.documentInfo) &&
        Objects.equals(this.useTextTags, createTemplateRequest.useTextTags) &&
        Objects.equals(this.textTagDefinitions, createTemplateRequest.textTagDefinitions) &&
        Objects.equals(this.autoDetectFields, createTemplateRequest.autoDetectFields) &&
        Objects.equals(this.onBehalfOf, createTemplateRequest.onBehalfOf) &&
        Objects.equals(this.labels, createTemplateRequest.labels) &&
        Objects.equals(this.templateLabels, createTemplateRequest.templateLabels) &&
        Objects.equals(this.recipientNotificationSettings, createTemplateRequest.recipientNotificationSettings) &&
        Objects.equals(this.formGroups, createTemplateRequest.formGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, documentTitle, documentMessage, files, fileUrls, roles, allowModifyFiles, cc, brandId, allowMessageEditing, allowNewRoles, allowNewFiles, enableReassign, enablePrintAndAssign, enableSigningOrder, documentInfo, useTextTags, textTagDefinitions, autoDetectFields, onBehalfOf, labels, templateLabels, recipientNotificationSettings, formGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTemplateRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentTitle: ").append(toIndentedString(documentTitle)).append("\n");
    sb.append("    documentMessage: ").append(toIndentedString(documentMessage)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    fileUrls: ").append(toIndentedString(fileUrls)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    allowModifyFiles: ").append(toIndentedString(allowModifyFiles)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    allowMessageEditing: ").append(toIndentedString(allowMessageEditing)).append("\n");
    sb.append("    allowNewRoles: ").append(toIndentedString(allowNewRoles)).append("\n");
    sb.append("    allowNewFiles: ").append(toIndentedString(allowNewFiles)).append("\n");
    sb.append("    enableReassign: ").append(toIndentedString(enableReassign)).append("\n");
    sb.append("    enablePrintAndAssign: ").append(toIndentedString(enablePrintAndAssign)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    documentInfo: ").append(toIndentedString(documentInfo)).append("\n");
    sb.append("    useTextTags: ").append(toIndentedString(useTextTags)).append("\n");
    sb.append("    textTagDefinitions: ").append(toIndentedString(textTagDefinitions)).append("\n");
    sb.append("    autoDetectFields: ").append(toIndentedString(autoDetectFields)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    templateLabels: ").append(toIndentedString(templateLabels)).append("\n");
    sb.append("    recipientNotificationSettings: ").append(toIndentedString(recipientNotificationSettings)).append("\n");
    sb.append("    formGroups: ").append(toIndentedString(formGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title", title);
            }
        }
        else {
          map.put("title", title);
        }
    }
    if (description != null) {
        if (isFileTypeOrListOfFiles(description)) {
            fileTypeFound = true;
        }

        if (description.getClass().equals(java.io.File.class) ||
            description.getClass().equals(Integer.class) ||
            description.getClass().equals(String.class) ||
            description.getClass().isEnum()) {
            map.put("description", description);
        } else if (isListOfFile(description)) {
            for(int i = 0; i< getListSize(description); i++) {
                map.put("description", description);
            }
        }
        else {
          map.put("description", description);
        }
    }
    if (documentTitle != null) {
        if (isFileTypeOrListOfFiles(documentTitle)) {
            fileTypeFound = true;
        }

        if (documentTitle.getClass().equals(java.io.File.class) ||
            documentTitle.getClass().equals(Integer.class) ||
            documentTitle.getClass().equals(String.class) ||
            documentTitle.getClass().isEnum()) {
            map.put("documentTitle", documentTitle);
        } else if (isListOfFile(documentTitle)) {
            for(int i = 0; i< getListSize(documentTitle); i++) {
                map.put("documentTitle", documentTitle);
            }
        }
        else {
          map.put("documentTitle", documentTitle);
        }
    }
    if (documentMessage != null) {
        if (isFileTypeOrListOfFiles(documentMessage)) {
            fileTypeFound = true;
        }

        if (documentMessage.getClass().equals(java.io.File.class) ||
            documentMessage.getClass().equals(Integer.class) ||
            documentMessage.getClass().equals(String.class) ||
            documentMessage.getClass().isEnum()) {
            map.put("documentMessage", documentMessage);
        } else if (isListOfFile(documentMessage)) {
            for(int i = 0; i< getListSize(documentMessage); i++) {
                map.put("documentMessage", documentMessage);
            }
        }
        else {
          map.put("documentMessage", documentMessage);
        }
    }
    if (files != null) {
        if (isFileTypeOrListOfFiles(files)) {
            fileTypeFound = true;
        }

        if (files.getClass().equals(java.io.File.class) ||
            files.getClass().equals(Integer.class) ||
            files.getClass().equals(String.class) ||
            files.getClass().isEnum()) {
            map.put("files", files);
        } else if (isListOfFile(files)) {
            for(int i = 0; i< getListSize(files); i++) {
                map.put("files", files);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : files) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("files", objectList);
        }
    }
    if (fileUrls != null) {
        if (isFileTypeOrListOfFiles(fileUrls)) {
            fileTypeFound = true;
        }

        if (fileUrls.getClass().equals(java.io.File.class) ||
            fileUrls.getClass().equals(Integer.class) ||
            fileUrls.getClass().equals(String.class) ||
            fileUrls.getClass().isEnum()) {
            map.put("fileUrls", fileUrls);
        } else if (isListOfFile(fileUrls)) {
            for(int i = 0; i< getListSize(fileUrls); i++) {
                map.put("fileUrls", fileUrls);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : fileUrls) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("fileUrls", objectList);
        }
    }
    if (roles != null) {
        if (isFileTypeOrListOfFiles(roles)) {
            fileTypeFound = true;
        }

        if (roles.getClass().equals(java.io.File.class) ||
            roles.getClass().equals(Integer.class) ||
            roles.getClass().equals(String.class) ||
            roles.getClass().isEnum()) {
            map.put("roles", roles);
        } else if (isListOfFile(roles)) {
            for(int i = 0; i< getListSize(roles); i++) {
                map.put("roles", roles);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : roles) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("roles", objectList);
        }
    }
    if (allowModifyFiles != null) {
        if (isFileTypeOrListOfFiles(allowModifyFiles)) {
            fileTypeFound = true;
        }

        if (allowModifyFiles.getClass().equals(java.io.File.class) ||
            allowModifyFiles.getClass().equals(Integer.class) ||
            allowModifyFiles.getClass().equals(String.class) ||
            allowModifyFiles.getClass().isEnum()) {
            map.put("allowModifyFiles", allowModifyFiles);
        } else if (isListOfFile(allowModifyFiles)) {
            for(int i = 0; i< getListSize(allowModifyFiles); i++) {
                map.put("allowModifyFiles", allowModifyFiles);
            }
        }
        else {
          map.put("allowModifyFiles", allowModifyFiles);
        }
    }
    if (cc != null) {
        if (isFileTypeOrListOfFiles(cc)) {
            fileTypeFound = true;
        }

        if (cc.getClass().equals(java.io.File.class) ||
            cc.getClass().equals(Integer.class) ||
            cc.getClass().equals(String.class) ||
            cc.getClass().isEnum()) {
            map.put("cc", cc);
        } else if (isListOfFile(cc)) {
            for(int i = 0; i< getListSize(cc); i++) {
                map.put("cc", cc);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : cc) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("cc", objectList);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    if (allowMessageEditing != null) {
        if (isFileTypeOrListOfFiles(allowMessageEditing)) {
            fileTypeFound = true;
        }

        if (allowMessageEditing.getClass().equals(java.io.File.class) ||
            allowMessageEditing.getClass().equals(Integer.class) ||
            allowMessageEditing.getClass().equals(String.class) ||
            allowMessageEditing.getClass().isEnum()) {
            map.put("allowMessageEditing", allowMessageEditing);
        } else if (isListOfFile(allowMessageEditing)) {
            for(int i = 0; i< getListSize(allowMessageEditing); i++) {
                map.put("allowMessageEditing", allowMessageEditing);
            }
        }
        else {
          map.put("allowMessageEditing", allowMessageEditing);
        }
    }
    if (allowNewRoles != null) {
        if (isFileTypeOrListOfFiles(allowNewRoles)) {
            fileTypeFound = true;
        }

        if (allowNewRoles.getClass().equals(java.io.File.class) ||
            allowNewRoles.getClass().equals(Integer.class) ||
            allowNewRoles.getClass().equals(String.class) ||
            allowNewRoles.getClass().isEnum()) {
            map.put("allowNewRoles", allowNewRoles);
        } else if (isListOfFile(allowNewRoles)) {
            for(int i = 0; i< getListSize(allowNewRoles); i++) {
                map.put("allowNewRoles", allowNewRoles);
            }
        }
        else {
          map.put("allowNewRoles", allowNewRoles);
        }
    }
    if (allowNewFiles != null) {
        if (isFileTypeOrListOfFiles(allowNewFiles)) {
            fileTypeFound = true;
        }

        if (allowNewFiles.getClass().equals(java.io.File.class) ||
            allowNewFiles.getClass().equals(Integer.class) ||
            allowNewFiles.getClass().equals(String.class) ||
            allowNewFiles.getClass().isEnum()) {
            map.put("allowNewFiles", allowNewFiles);
        } else if (isListOfFile(allowNewFiles)) {
            for(int i = 0; i< getListSize(allowNewFiles); i++) {
                map.put("allowNewFiles", allowNewFiles);
            }
        }
        else {
          map.put("allowNewFiles", allowNewFiles);
        }
    }
    if (enableReassign != null) {
        if (isFileTypeOrListOfFiles(enableReassign)) {
            fileTypeFound = true;
        }

        if (enableReassign.getClass().equals(java.io.File.class) ||
            enableReassign.getClass().equals(Integer.class) ||
            enableReassign.getClass().equals(String.class) ||
            enableReassign.getClass().isEnum()) {
            map.put("enableReassign", enableReassign);
        } else if (isListOfFile(enableReassign)) {
            for(int i = 0; i< getListSize(enableReassign); i++) {
                map.put("enableReassign", enableReassign);
            }
        }
        else {
          map.put("enableReassign", enableReassign);
        }
    }
    if (enablePrintAndAssign != null) {
        if (isFileTypeOrListOfFiles(enablePrintAndAssign)) {
            fileTypeFound = true;
        }

        if (enablePrintAndAssign.getClass().equals(java.io.File.class) ||
            enablePrintAndAssign.getClass().equals(Integer.class) ||
            enablePrintAndAssign.getClass().equals(String.class) ||
            enablePrintAndAssign.getClass().isEnum()) {
            map.put("enablePrintAndAssign", enablePrintAndAssign);
        } else if (isListOfFile(enablePrintAndAssign)) {
            for(int i = 0; i< getListSize(enablePrintAndAssign); i++) {
                map.put("enablePrintAndAssign", enablePrintAndAssign);
            }
        }
        else {
          map.put("enablePrintAndAssign", enablePrintAndAssign);
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", enableSigningOrder);
        }
    }
    if (documentInfo != null) {
        if (isFileTypeOrListOfFiles(documentInfo)) {
            fileTypeFound = true;
        }

        if (documentInfo.getClass().equals(java.io.File.class) ||
            documentInfo.getClass().equals(Integer.class) ||
            documentInfo.getClass().equals(String.class) ||
            documentInfo.getClass().isEnum()) {
            map.put("documentInfo", documentInfo);
        } else if (isListOfFile(documentInfo)) {
            for(int i = 0; i< getListSize(documentInfo); i++) {
                map.put("documentInfo", documentInfo);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentInfo) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentInfo", objectList);
        }
    }
    if (useTextTags != null) {
        if (isFileTypeOrListOfFiles(useTextTags)) {
            fileTypeFound = true;
        }

        if (useTextTags.getClass().equals(java.io.File.class) ||
            useTextTags.getClass().equals(Integer.class) ||
            useTextTags.getClass().equals(String.class) ||
            useTextTags.getClass().isEnum()) {
            map.put("useTextTags", useTextTags);
        } else if (isListOfFile(useTextTags)) {
            for(int i = 0; i< getListSize(useTextTags); i++) {
                map.put("useTextTags", useTextTags);
            }
        }
        else {
          map.put("useTextTags", useTextTags);
        }
    }
    if (textTagDefinitions != null) {
        if (isFileTypeOrListOfFiles(textTagDefinitions)) {
            fileTypeFound = true;
        }

        if (textTagDefinitions.getClass().equals(java.io.File.class) ||
            textTagDefinitions.getClass().equals(Integer.class) ||
            textTagDefinitions.getClass().equals(String.class) ||
            textTagDefinitions.getClass().isEnum()) {
            map.put("textTagDefinitions", textTagDefinitions);
        } else if (isListOfFile(textTagDefinitions)) {
            for(int i = 0; i< getListSize(textTagDefinitions); i++) {
                map.put("textTagDefinitions", textTagDefinitions);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : textTagDefinitions) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("textTagDefinitions", objectList);
        }
    }
    if (autoDetectFields != null) {
        if (isFileTypeOrListOfFiles(autoDetectFields)) {
            fileTypeFound = true;
        }

        if (autoDetectFields.getClass().equals(java.io.File.class) ||
            autoDetectFields.getClass().equals(Integer.class) ||
            autoDetectFields.getClass().equals(String.class) ||
            autoDetectFields.getClass().isEnum()) {
            map.put("autoDetectFields", autoDetectFields);
        } else if (isListOfFile(autoDetectFields)) {
            for(int i = 0; i< getListSize(autoDetectFields); i++) {
                map.put("autoDetectFields", autoDetectFields);
            }
        }
        else {
          map.put("autoDetectFields", autoDetectFields);
        }
    }
    if (onBehalfOf != null) {
        if (isFileTypeOrListOfFiles(onBehalfOf)) {
            fileTypeFound = true;
        }

        if (onBehalfOf.getClass().equals(java.io.File.class) ||
            onBehalfOf.getClass().equals(Integer.class) ||
            onBehalfOf.getClass().equals(String.class) ||
            onBehalfOf.getClass().isEnum()) {
            map.put("onBehalfOf", onBehalfOf);
        } else if (isListOfFile(onBehalfOf)) {
            for(int i = 0; i< getListSize(onBehalfOf); i++) {
                map.put("onBehalfOf", onBehalfOf);
            }
        }
        else {
          map.put("onBehalfOf", onBehalfOf);
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (templateLabels != null) {
        if (isFileTypeOrListOfFiles(templateLabels)) {
            fileTypeFound = true;
        }

        if (templateLabels.getClass().equals(java.io.File.class) ||
            templateLabels.getClass().equals(Integer.class) ||
            templateLabels.getClass().equals(String.class) ||
            templateLabels.getClass().isEnum()) {
            map.put("templateLabels", templateLabels);
        } else if (isListOfFile(templateLabels)) {
            for(int i = 0; i< getListSize(templateLabels); i++) {
                map.put("templateLabels", templateLabels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : templateLabels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("templateLabels", objectList);
        }
    }
    if (recipientNotificationSettings != null) {
        if (isFileTypeOrListOfFiles(recipientNotificationSettings)) {
            fileTypeFound = true;
        }

        if (recipientNotificationSettings.getClass().equals(java.io.File.class) ||
            recipientNotificationSettings.getClass().equals(Integer.class) ||
            recipientNotificationSettings.getClass().equals(String.class) ||
            recipientNotificationSettings.getClass().isEnum()) {
            map.put("recipientNotificationSettings", recipientNotificationSettings);
        } else if (isListOfFile(recipientNotificationSettings)) {
            for(int i = 0; i< getListSize(recipientNotificationSettings); i++) {
                map.put("recipientNotificationSettings", recipientNotificationSettings);
            }
        }
        else {
          map.put("recipientNotificationSettings", recipientNotificationSettings);
        }
    }
    if (formGroups != null) {
        if (isFileTypeOrListOfFiles(formGroups)) {
            fileTypeFound = true;
        }

        if (formGroups.getClass().equals(java.io.File.class) ||
            formGroups.getClass().equals(Integer.class) ||
            formGroups.getClass().equals(String.class) ||
            formGroups.getClass().isEnum()) {
            map.put("formGroups", formGroups);
        } else if (isListOfFile(formGroups)) {
            for(int i = 0; i< getListSize(formGroups); i++) {
                map.put("formGroups", formGroups);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formGroups) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formGroups", objectList);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("documentTitle");
    openapiFields.add("documentMessage");
    openapiFields.add("files");
    openapiFields.add("fileUrls");
    openapiFields.add("roles");
    openapiFields.add("allowModifyFiles");
    openapiFields.add("cc");
    openapiFields.add("brandId");
    openapiFields.add("allowMessageEditing");
    openapiFields.add("allowNewRoles");
    openapiFields.add("allowNewFiles");
    openapiFields.add("enableReassign");
    openapiFields.add("enablePrintAndAssign");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("documentInfo");
    openapiFields.add("useTextTags");
    openapiFields.add("textTagDefinitions");
    openapiFields.add("autoDetectFields");
    openapiFields.add("onBehalfOf");
    openapiFields.add("labels");
    openapiFields.add("templateLabels");
    openapiFields.add("recipientNotificationSettings");
    openapiFields.add("formGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTemplateRequest is not found in the empty JSON string", CreateTemplateRequest.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("documentTitle") != null && !jsonObj.get("documentTitle").isJsonNull()) && !jsonObj.get("documentTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTitle").toString()));
      }
      if ((jsonObj.get("documentMessage") != null && !jsonObj.get("documentMessage").isJsonNull()) && !jsonObj.get("documentMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull() && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileUrls") != null && !jsonObj.get("fileUrls").isJsonNull() && !jsonObj.get("fileUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrls` to be an array in the JSON string but got `%s`", jsonObj.get("fileUrls").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            TemplateRole.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
          }

          // validate the optional field `cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            DocumentCC.validateJsonElement(jsonArraycc.get(i));
          };
        }
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if (jsonObj.get("documentInfo") != null && !jsonObj.get("documentInfo").isJsonNull()) {
        JsonArray jsonArraydocumentInfo = jsonObj.getAsJsonArray("documentInfo");
        if (jsonArraydocumentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("documentInfo").toString()));
          }

          // validate the optional field `documentInfo` (array)
          for (int i = 0; i < jsonArraydocumentInfo.size(); i++) {
            DocumentInfo.validateJsonElement(jsonArraydocumentInfo.get(i));
          };
        }
      }
      if (jsonObj.get("textTagDefinitions") != null && !jsonObj.get("textTagDefinitions").isJsonNull()) {
        JsonArray jsonArraytextTagDefinitions = jsonObj.getAsJsonArray("textTagDefinitions");
        if (jsonArraytextTagDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textTagDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textTagDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("textTagDefinitions").toString()));
          }

          // validate the optional field `textTagDefinitions` (array)
          for (int i = 0; i < jsonArraytextTagDefinitions.size(); i++) {
            TextTagDefinition.validateJsonElement(jsonArraytextTagDefinitions.get(i));
          };
        }
      }
      if ((jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) && !jsonObj.get("onBehalfOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onBehalfOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onBehalfOf").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("templateLabels") != null && !jsonObj.get("templateLabels").isJsonNull() && !jsonObj.get("templateLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateLabels` to be an array in the JSON string but got `%s`", jsonObj.get("templateLabels").toString()));
      }
      // validate the optional field `recipientNotificationSettings`
      if (jsonObj.get("recipientNotificationSettings") != null && !jsonObj.get("recipientNotificationSettings").isJsonNull()) {
        RecipientNotificationSettings.validateJsonElement(jsonObj.get("recipientNotificationSettings"));
      }
      if (jsonObj.get("formGroups") != null && !jsonObj.get("formGroups").isJsonNull()) {
        JsonArray jsonArrayformGroups = jsonObj.getAsJsonArray("formGroups");
        if (jsonArrayformGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formGroups` to be an array in the JSON string but got `%s`", jsonObj.get("formGroups").toString()));
          }

          // validate the optional field `formGroups` (array)
          for (int i = 0; i < jsonArrayformGroups.size(); i++) {
            FormGroup.validateJsonElement(jsonArrayformGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateTemplateRequest
   */
  public static CreateTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

