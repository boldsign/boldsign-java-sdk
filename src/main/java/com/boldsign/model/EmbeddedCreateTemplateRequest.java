/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.DocumentCC;
import com.boldsign.model.DocumentInfo;
import com.boldsign.model.FormGroup;
import com.boldsign.model.TemplateRole;
import com.boldsign.model.TextTagDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * EmbeddedCreateTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class EmbeddedCreateTemplateRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirectUrl";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private URI redirectUrl;

  public static final String SERIALIZED_NAME_SHOW_TOOLBAR = "showToolbar";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOLBAR)
  private Boolean showToolbar = false;

  /**
   * Gets or Sets viewOption
   */
  @JsonAdapter(ViewOptionEnum.Adapter.class)
  public enum ViewOptionEnum {
    PREPARE_PAGE("PreparePage"),
    
    FILLING_PAGE("FillingPage");

    private String value;

    ViewOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewOptionEnum fromValue(String value) {
      for (ViewOptionEnum b : ViewOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW_OPTION = "viewOption";
  @SerializedName(SERIALIZED_NAME_VIEW_OPTION)
  private ViewOptionEnum viewOption = ViewOptionEnum.PREPARE_PAGE;

  public static final String SERIALIZED_NAME_SHOW_SAVE_BUTTON = "showSaveButton";
  @SerializedName(SERIALIZED_NAME_SHOW_SAVE_BUTTON)
  private Boolean showSaveButton = true;

  /**
   * Gets or Sets locale
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    EN("EN"),
    
    NO("NO"),
    
    FR("FR"),
    
    DE("DE"),
    
    ES("ES"),
    
    BG("BG"),
    
    CS("CS"),
    
    DA("DA"),
    
    IT("IT"),
    
    NL("NL"),
    
    PL("PL"),
    
    PT("PT"),
    
    RO("RO"),
    
    RU("RU"),
    
    SV("SV"),
    
    DEFAULT("Default");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private LocaleEnum locale = LocaleEnum.EN;

  public static final String SERIALIZED_NAME_SHOW_SEND_BUTTON = "showSendButton";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHOW_SEND_BUTTON)
  private Boolean showSendButton;

  public static final String SERIALIZED_NAME_SHOW_CREATE_BUTTON = "showCreateButton";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATE_BUTTON)
  private Boolean showCreateButton = true;

  public static final String SERIALIZED_NAME_SHOW_PREVIEW_BUTTON = "showPreviewButton";
  @SerializedName(SERIALIZED_NAME_SHOW_PREVIEW_BUTTON)
  private Boolean showPreviewButton = true;

  public static final String SERIALIZED_NAME_SHOW_NAVIGATION_BUTTONS = "showNavigationButtons";
  @SerializedName(SERIALIZED_NAME_SHOW_NAVIGATION_BUTTONS)
  private Boolean showNavigationButtons = true;

  public static final String SERIALIZED_NAME_LINK_VALID_TILL = "linkValidTill";
  @SerializedName(SERIALIZED_NAME_LINK_VALID_TILL)
  private OffsetDateTime linkValidTill;

  public static final String SERIALIZED_NAME_SHOW_TOOLTIP = "showTooltip";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOLTIP)
  private Boolean showTooltip = false;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_TITLE = "documentTitle";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TITLE)
  private String documentTitle;

  public static final String SERIALIZED_NAME_DOCUMENT_MESSAGE = "documentMessage";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_MESSAGE)
  private String documentMessage;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<File> files;

  public static final String SERIALIZED_NAME_FILE_URLS = "fileUrls";
  @SerializedName(SERIALIZED_NAME_FILE_URLS)
  private List<URI> fileUrls;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<TemplateRole> roles;

  public static final String SERIALIZED_NAME_ALLOW_MODIFY_FILES = "allowModifyFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_MODIFY_FILES)
  private Boolean allowModifyFiles = true;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<DocumentCC> cc;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_ALLOW_MESSAGE_EDITING = "allowMessageEditing";
  @SerializedName(SERIALIZED_NAME_ALLOW_MESSAGE_EDITING)
  private Boolean allowMessageEditing = true;

  public static final String SERIALIZED_NAME_ALLOW_NEW_ROLES = "allowNewRoles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_ROLES)
  private Boolean allowNewRoles = true;

  public static final String SERIALIZED_NAME_ALLOW_NEW_FILES = "allowNewFiles";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEW_FILES)
  private Boolean allowNewFiles = true;

  public static final String SERIALIZED_NAME_ENABLE_REASSIGN = "enableReassign";
  @SerializedName(SERIALIZED_NAME_ENABLE_REASSIGN)
  private Boolean enableReassign = true;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_AND_ASSIGN = "enablePrintAndAssign";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_AND_ASSIGN)
  private Boolean enablePrintAndAssign = false;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder = false;

  public static final String SERIALIZED_NAME_DOCUMENT_INFO = "documentInfo";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_INFO)
  private List<DocumentInfo> documentInfo;

  public static final String SERIALIZED_NAME_USE_TEXT_TAGS = "useTextTags";
  @SerializedName(SERIALIZED_NAME_USE_TEXT_TAGS)
  private Boolean useTextTags = false;

  public static final String SERIALIZED_NAME_TEXT_TAG_DEFINITIONS = "textTagDefinitions";
  @SerializedName(SERIALIZED_NAME_TEXT_TAG_DEFINITIONS)
  private List<TextTagDefinition> textTagDefinitions;

  public static final String SERIALIZED_NAME_AUTO_DETECT_FIELDS = "autoDetectFields";
  @SerializedName(SERIALIZED_NAME_AUTO_DETECT_FIELDS)
  private Boolean autoDetectFields = false;

  public static final String SERIALIZED_NAME_ON_BEHALF_OF = "onBehalfOf";
  @SerializedName(SERIALIZED_NAME_ON_BEHALF_OF)
  private String onBehalfOf;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_TEMPLATE_LABELS = "templateLabels";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LABELS)
  private List<String> templateLabels;

  public static final String SERIALIZED_NAME_FORM_GROUPS = "formGroups";
  @SerializedName(SERIALIZED_NAME_FORM_GROUPS)
  private List<FormGroup> formGroups;

  public EmbeddedCreateTemplateRequest() {
  }

  public EmbeddedCreateTemplateRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EmbeddedCreateTemplateRequest redirectUrl(URI redirectUrl) {
    this.redirectUrl = redirectUrl;
    return this;
  }

  /**
   * Get redirectUrl
   * @return redirectUrl
   */
  @javax.annotation.Nullable
  public URI getRedirectUrl() {
    return redirectUrl;
  }

  public void setRedirectUrl(URI redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public EmbeddedCreateTemplateRequest showToolbar(Boolean showToolbar) {
    this.showToolbar = showToolbar;
    return this;
  }

  /**
   * Get showToolbar
   * @return showToolbar
   */
  @javax.annotation.Nullable
  public Boolean getShowToolbar() {
    return showToolbar;
  }

  public void setShowToolbar(Boolean showToolbar) {
    this.showToolbar = showToolbar;
  }


  public EmbeddedCreateTemplateRequest viewOption(ViewOptionEnum viewOption) {
    this.viewOption = viewOption;
    return this;
  }

  /**
   * Get viewOption
   * @return viewOption
   */
  @javax.annotation.Nullable
  public ViewOptionEnum getViewOption() {
    return viewOption;
  }

  public void setViewOption(ViewOptionEnum viewOption) {
    this.viewOption = viewOption;
  }


  public EmbeddedCreateTemplateRequest showSaveButton(Boolean showSaveButton) {
    this.showSaveButton = showSaveButton;
    return this;
  }

  /**
   * Get showSaveButton
   * @return showSaveButton
   */
  @javax.annotation.Nullable
  public Boolean getShowSaveButton() {
    return showSaveButton;
  }

  public void setShowSaveButton(Boolean showSaveButton) {
    this.showSaveButton = showSaveButton;
  }


  public EmbeddedCreateTemplateRequest locale(LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(LocaleEnum locale) {
    this.locale = locale;
  }


  @Deprecated
  public EmbeddedCreateTemplateRequest showSendButton(Boolean showSendButton) {
    this.showSendButton = showSendButton;
    return this;
  }

  /**
   * Get showSendButton
   * @return showSendButton
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getShowSendButton() {
    return showSendButton;
  }

  @Deprecated
  public void setShowSendButton(Boolean showSendButton) {
    this.showSendButton = showSendButton;
  }


  public EmbeddedCreateTemplateRequest showCreateButton(Boolean showCreateButton) {
    this.showCreateButton = showCreateButton;
    return this;
  }

  /**
   * Get showCreateButton
   * @return showCreateButton
   */
  @javax.annotation.Nullable
  public Boolean getShowCreateButton() {
    return showCreateButton;
  }

  public void setShowCreateButton(Boolean showCreateButton) {
    this.showCreateButton = showCreateButton;
  }


  public EmbeddedCreateTemplateRequest showPreviewButton(Boolean showPreviewButton) {
    this.showPreviewButton = showPreviewButton;
    return this;
  }

  /**
   * Get showPreviewButton
   * @return showPreviewButton
   */
  @javax.annotation.Nullable
  public Boolean getShowPreviewButton() {
    return showPreviewButton;
  }

  public void setShowPreviewButton(Boolean showPreviewButton) {
    this.showPreviewButton = showPreviewButton;
  }


  public EmbeddedCreateTemplateRequest showNavigationButtons(Boolean showNavigationButtons) {
    this.showNavigationButtons = showNavigationButtons;
    return this;
  }

  /**
   * Get showNavigationButtons
   * @return showNavigationButtons
   */
  @javax.annotation.Nullable
  public Boolean getShowNavigationButtons() {
    return showNavigationButtons;
  }

  public void setShowNavigationButtons(Boolean showNavigationButtons) {
    this.showNavigationButtons = showNavigationButtons;
  }


  public EmbeddedCreateTemplateRequest linkValidTill(OffsetDateTime linkValidTill) {
    this.linkValidTill = linkValidTill;
    return this;
  }

  /**
   * Get linkValidTill
   * @return linkValidTill
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLinkValidTill() {
    return linkValidTill;
  }

  public void setLinkValidTill(OffsetDateTime linkValidTill) {
    this.linkValidTill = linkValidTill;
  }


  public EmbeddedCreateTemplateRequest showTooltip(Boolean showTooltip) {
    this.showTooltip = showTooltip;
    return this;
  }

  /**
   * Get showTooltip
   * @return showTooltip
   */
  @javax.annotation.Nullable
  public Boolean getShowTooltip() {
    return showTooltip;
  }

  public void setShowTooltip(Boolean showTooltip) {
    this.showTooltip = showTooltip;
  }


  public EmbeddedCreateTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EmbeddedCreateTemplateRequest documentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
    return this;
  }

  /**
   * Get documentTitle
   * @return documentTitle
   */
  @javax.annotation.Nullable
  public String getDocumentTitle() {
    return documentTitle;
  }

  public void setDocumentTitle(String documentTitle) {
    this.documentTitle = documentTitle;
  }


  public EmbeddedCreateTemplateRequest documentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
    return this;
  }

  /**
   * Get documentMessage
   * @return documentMessage
   */
  @javax.annotation.Nullable
  public String getDocumentMessage() {
    return documentMessage;
  }

  public void setDocumentMessage(String documentMessage) {
    this.documentMessage = documentMessage;
  }


  public EmbeddedCreateTemplateRequest files(List<File> files) {
    this.files = files;
    return this;
  }

  public EmbeddedCreateTemplateRequest addFilesItem(File filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public List<File> getFiles() {
    return files;
  }

  public void setFiles(List<File> files) {
    this.files = files;
  }


  public EmbeddedCreateTemplateRequest fileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
    return this;
  }

  public EmbeddedCreateTemplateRequest addFileUrlsItem(URI fileUrlsItem) {
    if (this.fileUrls == null) {
      this.fileUrls = new ArrayList<>();
    }
    this.fileUrls.add(fileUrlsItem);
    return this;
  }

  /**
   * Get fileUrls
   * @return fileUrls
   */
  @javax.annotation.Nullable
  public List<URI> getFileUrls() {
    return fileUrls;
  }

  public void setFileUrls(List<URI> fileUrls) {
    this.fileUrls = fileUrls;
  }


  public EmbeddedCreateTemplateRequest roles(List<TemplateRole> roles) {
    this.roles = roles;
    return this;
  }

  public EmbeddedCreateTemplateRequest addRolesItem(TemplateRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   * @return roles
   */
  @javax.annotation.Nullable
  public List<TemplateRole> getRoles() {
    return roles;
  }

  public void setRoles(List<TemplateRole> roles) {
    this.roles = roles;
  }


  public EmbeddedCreateTemplateRequest allowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
    return this;
  }

  /**
   * Get allowModifyFiles
   * @return allowModifyFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowModifyFiles() {
    return allowModifyFiles;
  }

  public void setAllowModifyFiles(Boolean allowModifyFiles) {
    this.allowModifyFiles = allowModifyFiles;
  }


  public EmbeddedCreateTemplateRequest cc(List<DocumentCC> cc) {
    this.cc = cc;
    return this;
  }

  public EmbeddedCreateTemplateRequest addCcItem(DocumentCC ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<DocumentCC> getCc() {
    return cc;
  }

  public void setCc(List<DocumentCC> cc) {
    this.cc = cc;
  }


  public EmbeddedCreateTemplateRequest brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public EmbeddedCreateTemplateRequest allowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
    return this;
  }

  /**
   * Get allowMessageEditing
   * @return allowMessageEditing
   */
  @javax.annotation.Nullable
  public Boolean getAllowMessageEditing() {
    return allowMessageEditing;
  }

  public void setAllowMessageEditing(Boolean allowMessageEditing) {
    this.allowMessageEditing = allowMessageEditing;
  }


  public EmbeddedCreateTemplateRequest allowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
    return this;
  }

  /**
   * Get allowNewRoles
   * @return allowNewRoles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewRoles() {
    return allowNewRoles;
  }

  public void setAllowNewRoles(Boolean allowNewRoles) {
    this.allowNewRoles = allowNewRoles;
  }


  public EmbeddedCreateTemplateRequest allowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
    return this;
  }

  /**
   * Get allowNewFiles
   * @return allowNewFiles
   */
  @javax.annotation.Nullable
  public Boolean getAllowNewFiles() {
    return allowNewFiles;
  }

  public void setAllowNewFiles(Boolean allowNewFiles) {
    this.allowNewFiles = allowNewFiles;
  }


  public EmbeddedCreateTemplateRequest enableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
    return this;
  }

  /**
   * Get enableReassign
   * @return enableReassign
   */
  @javax.annotation.Nullable
  public Boolean getEnableReassign() {
    return enableReassign;
  }

  public void setEnableReassign(Boolean enableReassign) {
    this.enableReassign = enableReassign;
  }


  public EmbeddedCreateTemplateRequest enablePrintAndAssign(Boolean enablePrintAndAssign) {
    this.enablePrintAndAssign = enablePrintAndAssign;
    return this;
  }

  /**
   * Get enablePrintAndAssign
   * @return enablePrintAndAssign
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrintAndAssign() {
    return enablePrintAndAssign;
  }

  public void setEnablePrintAndAssign(Boolean enablePrintAndAssign) {
    this.enablePrintAndAssign = enablePrintAndAssign;
  }


  public EmbeddedCreateTemplateRequest enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public EmbeddedCreateTemplateRequest documentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
    return this;
  }

  public EmbeddedCreateTemplateRequest addDocumentInfoItem(DocumentInfo documentInfoItem) {
    if (this.documentInfo == null) {
      this.documentInfo = new ArrayList<>();
    }
    this.documentInfo.add(documentInfoItem);
    return this;
  }

  /**
   * Get documentInfo
   * @return documentInfo
   */
  @javax.annotation.Nullable
  public List<DocumentInfo> getDocumentInfo() {
    return documentInfo;
  }

  public void setDocumentInfo(List<DocumentInfo> documentInfo) {
    this.documentInfo = documentInfo;
  }


  public EmbeddedCreateTemplateRequest useTextTags(Boolean useTextTags) {
    this.useTextTags = useTextTags;
    return this;
  }

  /**
   * Get useTextTags
   * @return useTextTags
   */
  @javax.annotation.Nullable
  public Boolean getUseTextTags() {
    return useTextTags;
  }

  public void setUseTextTags(Boolean useTextTags) {
    this.useTextTags = useTextTags;
  }


  public EmbeddedCreateTemplateRequest textTagDefinitions(List<TextTagDefinition> textTagDefinitions) {
    this.textTagDefinitions = textTagDefinitions;
    return this;
  }

  public EmbeddedCreateTemplateRequest addTextTagDefinitionsItem(TextTagDefinition textTagDefinitionsItem) {
    if (this.textTagDefinitions == null) {
      this.textTagDefinitions = new ArrayList<>();
    }
    this.textTagDefinitions.add(textTagDefinitionsItem);
    return this;
  }

  /**
   * Get textTagDefinitions
   * @return textTagDefinitions
   */
  @javax.annotation.Nullable
  public List<TextTagDefinition> getTextTagDefinitions() {
    return textTagDefinitions;
  }

  public void setTextTagDefinitions(List<TextTagDefinition> textTagDefinitions) {
    this.textTagDefinitions = textTagDefinitions;
  }


  public EmbeddedCreateTemplateRequest autoDetectFields(Boolean autoDetectFields) {
    this.autoDetectFields = autoDetectFields;
    return this;
  }

  /**
   * Get autoDetectFields
   * @return autoDetectFields
   */
  @javax.annotation.Nullable
  public Boolean getAutoDetectFields() {
    return autoDetectFields;
  }

  public void setAutoDetectFields(Boolean autoDetectFields) {
    this.autoDetectFields = autoDetectFields;
  }


  public EmbeddedCreateTemplateRequest onBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
    return this;
  }

  /**
   * Get onBehalfOf
   * @return onBehalfOf
   */
  @javax.annotation.Nullable
  public String getOnBehalfOf() {
    return onBehalfOf;
  }

  public void setOnBehalfOf(String onBehalfOf) {
    this.onBehalfOf = onBehalfOf;
  }


  public EmbeddedCreateTemplateRequest labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public EmbeddedCreateTemplateRequest addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public EmbeddedCreateTemplateRequest templateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
    return this;
  }

  public EmbeddedCreateTemplateRequest addTemplateLabelsItem(String templateLabelsItem) {
    if (this.templateLabels == null) {
      this.templateLabels = new ArrayList<>();
    }
    this.templateLabels.add(templateLabelsItem);
    return this;
  }

  /**
   * Get templateLabels
   * @return templateLabels
   */
  @javax.annotation.Nullable
  public List<String> getTemplateLabels() {
    return templateLabels;
  }

  public void setTemplateLabels(List<String> templateLabels) {
    this.templateLabels = templateLabels;
  }


  public EmbeddedCreateTemplateRequest formGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
    return this;
  }

  public EmbeddedCreateTemplateRequest addFormGroupsItem(FormGroup formGroupsItem) {
    if (this.formGroups == null) {
      this.formGroups = new ArrayList<>();
    }
    this.formGroups.add(formGroupsItem);
    return this;
  }

  /**
   * Get formGroups
   * @return formGroups
   */
  @javax.annotation.Nullable
  public List<FormGroup> getFormGroups() {
    return formGroups;
  }

  public void setFormGroups(List<FormGroup> formGroups) {
    this.formGroups = formGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest = (EmbeddedCreateTemplateRequest) o;
    return Objects.equals(this.title, embeddedCreateTemplateRequest.title) &&
        Objects.equals(this.redirectUrl, embeddedCreateTemplateRequest.redirectUrl) &&
        Objects.equals(this.showToolbar, embeddedCreateTemplateRequest.showToolbar) &&
        Objects.equals(this.viewOption, embeddedCreateTemplateRequest.viewOption) &&
        Objects.equals(this.showSaveButton, embeddedCreateTemplateRequest.showSaveButton) &&
        Objects.equals(this.locale, embeddedCreateTemplateRequest.locale) &&
        Objects.equals(this.showSendButton, embeddedCreateTemplateRequest.showSendButton) &&
        Objects.equals(this.showCreateButton, embeddedCreateTemplateRequest.showCreateButton) &&
        Objects.equals(this.showPreviewButton, embeddedCreateTemplateRequest.showPreviewButton) &&
        Objects.equals(this.showNavigationButtons, embeddedCreateTemplateRequest.showNavigationButtons) &&
        Objects.equals(this.linkValidTill, embeddedCreateTemplateRequest.linkValidTill) &&
        Objects.equals(this.showTooltip, embeddedCreateTemplateRequest.showTooltip) &&
        Objects.equals(this.description, embeddedCreateTemplateRequest.description) &&
        Objects.equals(this.documentTitle, embeddedCreateTemplateRequest.documentTitle) &&
        Objects.equals(this.documentMessage, embeddedCreateTemplateRequest.documentMessage) &&
        Objects.equals(this.files, embeddedCreateTemplateRequest.files) &&
        Objects.equals(this.fileUrls, embeddedCreateTemplateRequest.fileUrls) &&
        Objects.equals(this.roles, embeddedCreateTemplateRequest.roles) &&
        Objects.equals(this.allowModifyFiles, embeddedCreateTemplateRequest.allowModifyFiles) &&
        Objects.equals(this.cc, embeddedCreateTemplateRequest.cc) &&
        Objects.equals(this.brandId, embeddedCreateTemplateRequest.brandId) &&
        Objects.equals(this.allowMessageEditing, embeddedCreateTemplateRequest.allowMessageEditing) &&
        Objects.equals(this.allowNewRoles, embeddedCreateTemplateRequest.allowNewRoles) &&
        Objects.equals(this.allowNewFiles, embeddedCreateTemplateRequest.allowNewFiles) &&
        Objects.equals(this.enableReassign, embeddedCreateTemplateRequest.enableReassign) &&
        Objects.equals(this.enablePrintAndAssign, embeddedCreateTemplateRequest.enablePrintAndAssign) &&
        Objects.equals(this.enableSigningOrder, embeddedCreateTemplateRequest.enableSigningOrder) &&
        Objects.equals(this.documentInfo, embeddedCreateTemplateRequest.documentInfo) &&
        Objects.equals(this.useTextTags, embeddedCreateTemplateRequest.useTextTags) &&
        Objects.equals(this.textTagDefinitions, embeddedCreateTemplateRequest.textTagDefinitions) &&
        Objects.equals(this.autoDetectFields, embeddedCreateTemplateRequest.autoDetectFields) &&
        Objects.equals(this.onBehalfOf, embeddedCreateTemplateRequest.onBehalfOf) &&
        Objects.equals(this.labels, embeddedCreateTemplateRequest.labels) &&
        Objects.equals(this.templateLabels, embeddedCreateTemplateRequest.templateLabels) &&
        Objects.equals(this.formGroups, embeddedCreateTemplateRequest.formGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, redirectUrl, showToolbar, viewOption, showSaveButton, locale, showSendButton, showCreateButton, showPreviewButton, showNavigationButtons, linkValidTill, showTooltip, description, documentTitle, documentMessage, files, fileUrls, roles, allowModifyFiles, cc, brandId, allowMessageEditing, allowNewRoles, allowNewFiles, enableReassign, enablePrintAndAssign, enableSigningOrder, documentInfo, useTextTags, textTagDefinitions, autoDetectFields, onBehalfOf, labels, templateLabels, formGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmbeddedCreateTemplateRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    showToolbar: ").append(toIndentedString(showToolbar)).append("\n");
    sb.append("    viewOption: ").append(toIndentedString(viewOption)).append("\n");
    sb.append("    showSaveButton: ").append(toIndentedString(showSaveButton)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    showSendButton: ").append(toIndentedString(showSendButton)).append("\n");
    sb.append("    showCreateButton: ").append(toIndentedString(showCreateButton)).append("\n");
    sb.append("    showPreviewButton: ").append(toIndentedString(showPreviewButton)).append("\n");
    sb.append("    showNavigationButtons: ").append(toIndentedString(showNavigationButtons)).append("\n");
    sb.append("    linkValidTill: ").append(toIndentedString(linkValidTill)).append("\n");
    sb.append("    showTooltip: ").append(toIndentedString(showTooltip)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentTitle: ").append(toIndentedString(documentTitle)).append("\n");
    sb.append("    documentMessage: ").append(toIndentedString(documentMessage)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    fileUrls: ").append(toIndentedString(fileUrls)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    allowModifyFiles: ").append(toIndentedString(allowModifyFiles)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    allowMessageEditing: ").append(toIndentedString(allowMessageEditing)).append("\n");
    sb.append("    allowNewRoles: ").append(toIndentedString(allowNewRoles)).append("\n");
    sb.append("    allowNewFiles: ").append(toIndentedString(allowNewFiles)).append("\n");
    sb.append("    enableReassign: ").append(toIndentedString(enableReassign)).append("\n");
    sb.append("    enablePrintAndAssign: ").append(toIndentedString(enablePrintAndAssign)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    documentInfo: ").append(toIndentedString(documentInfo)).append("\n");
    sb.append("    useTextTags: ").append(toIndentedString(useTextTags)).append("\n");
    sb.append("    textTagDefinitions: ").append(toIndentedString(textTagDefinitions)).append("\n");
    sb.append("    autoDetectFields: ").append(toIndentedString(autoDetectFields)).append("\n");
    sb.append("    onBehalfOf: ").append(toIndentedString(onBehalfOf)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    templateLabels: ").append(toIndentedString(templateLabels)).append("\n");
    sb.append("    formGroups: ").append(toIndentedString(formGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (title != null) {
        if (isFileTypeOrListOfFiles(title)) {
            fileTypeFound = true;
        }

        if (title.getClass().equals(java.io.File.class) ||
            title.getClass().equals(Integer.class) ||
            title.getClass().equals(String.class) ||
            title.getClass().isEnum()) {
            map.put("title", title);
        } else if (isListOfFile(title)) {
            for(int i = 0; i< getListSize(title); i++) {
                map.put("title", title);
            }
        }
        else {
          map.put("title", title);
        }
    }
    if (redirectUrl != null) {
        if (isFileTypeOrListOfFiles(redirectUrl)) {
            fileTypeFound = true;
        }

        if (redirectUrl.getClass().equals(java.io.File.class) ||
            redirectUrl.getClass().equals(Integer.class) ||
            redirectUrl.getClass().equals(String.class) ||
            redirectUrl.getClass().isEnum()) {
            map.put("redirectUrl", redirectUrl);
        } else if (isListOfFile(redirectUrl)) {
            for(int i = 0; i< getListSize(redirectUrl); i++) {
                map.put("redirectUrl", redirectUrl);
            }
        }
        else {
          map.put("redirectUrl", redirectUrl);
        }
    }
    if (showToolbar != null) {
        if (isFileTypeOrListOfFiles(showToolbar)) {
            fileTypeFound = true;
        }

        if (showToolbar.getClass().equals(java.io.File.class) ||
            showToolbar.getClass().equals(Integer.class) ||
            showToolbar.getClass().equals(String.class) ||
            showToolbar.getClass().isEnum()) {
            map.put("showToolbar", showToolbar);
        } else if (isListOfFile(showToolbar)) {
            for(int i = 0; i< getListSize(showToolbar); i++) {
                map.put("showToolbar", showToolbar);
            }
        }
        else {
          map.put("showToolbar", showToolbar);
        }
    }
    if (viewOption != null) {
        if (isFileTypeOrListOfFiles(viewOption)) {
            fileTypeFound = true;
        }

        if (viewOption.getClass().equals(java.io.File.class) ||
            viewOption.getClass().equals(Integer.class) ||
            viewOption.getClass().equals(String.class) ||
            viewOption.getClass().isEnum()) {
            map.put("viewOption", viewOption);
        } else if (isListOfFile(viewOption)) {
            for(int i = 0; i< getListSize(viewOption); i++) {
                map.put("viewOption", viewOption);
            }
        }
        else {
          map.put("viewOption", viewOption);
        }
    }
    if (showSaveButton != null) {
        if (isFileTypeOrListOfFiles(showSaveButton)) {
            fileTypeFound = true;
        }

        if (showSaveButton.getClass().equals(java.io.File.class) ||
            showSaveButton.getClass().equals(Integer.class) ||
            showSaveButton.getClass().equals(String.class) ||
            showSaveButton.getClass().isEnum()) {
            map.put("showSaveButton", showSaveButton);
        } else if (isListOfFile(showSaveButton)) {
            for(int i = 0; i< getListSize(showSaveButton); i++) {
                map.put("showSaveButton", showSaveButton);
            }
        }
        else {
          map.put("showSaveButton", showSaveButton);
        }
    }
    if (locale != null) {
        if (isFileTypeOrListOfFiles(locale)) {
            fileTypeFound = true;
        }

        if (locale.getClass().equals(java.io.File.class) ||
            locale.getClass().equals(Integer.class) ||
            locale.getClass().equals(String.class) ||
            locale.getClass().isEnum()) {
            map.put("locale", locale);
        } else if (isListOfFile(locale)) {
            for(int i = 0; i< getListSize(locale); i++) {
                map.put("locale", locale);
            }
        }
        else {
          map.put("locale", locale);
        }
    }
    if (showSendButton != null) {
        if (isFileTypeOrListOfFiles(showSendButton)) {
            fileTypeFound = true;
        }

        if (showSendButton.getClass().equals(java.io.File.class) ||
            showSendButton.getClass().equals(Integer.class) ||
            showSendButton.getClass().equals(String.class) ||
            showSendButton.getClass().isEnum()) {
            map.put("showSendButton", showSendButton);
        } else if (isListOfFile(showSendButton)) {
            for(int i = 0; i< getListSize(showSendButton); i++) {
                map.put("showSendButton", showSendButton);
            }
        }
        else {
          map.put("showSendButton", showSendButton);
        }
    }
    if (showCreateButton != null) {
        if (isFileTypeOrListOfFiles(showCreateButton)) {
            fileTypeFound = true;
        }

        if (showCreateButton.getClass().equals(java.io.File.class) ||
            showCreateButton.getClass().equals(Integer.class) ||
            showCreateButton.getClass().equals(String.class) ||
            showCreateButton.getClass().isEnum()) {
            map.put("showCreateButton", showCreateButton);
        } else if (isListOfFile(showCreateButton)) {
            for(int i = 0; i< getListSize(showCreateButton); i++) {
                map.put("showCreateButton", showCreateButton);
            }
        }
        else {
          map.put("showCreateButton", showCreateButton);
        }
    }
    if (showPreviewButton != null) {
        if (isFileTypeOrListOfFiles(showPreviewButton)) {
            fileTypeFound = true;
        }

        if (showPreviewButton.getClass().equals(java.io.File.class) ||
            showPreviewButton.getClass().equals(Integer.class) ||
            showPreviewButton.getClass().equals(String.class) ||
            showPreviewButton.getClass().isEnum()) {
            map.put("showPreviewButton", showPreviewButton);
        } else if (isListOfFile(showPreviewButton)) {
            for(int i = 0; i< getListSize(showPreviewButton); i++) {
                map.put("showPreviewButton", showPreviewButton);
            }
        }
        else {
          map.put("showPreviewButton", showPreviewButton);
        }
    }
    if (showNavigationButtons != null) {
        if (isFileTypeOrListOfFiles(showNavigationButtons)) {
            fileTypeFound = true;
        }

        if (showNavigationButtons.getClass().equals(java.io.File.class) ||
            showNavigationButtons.getClass().equals(Integer.class) ||
            showNavigationButtons.getClass().equals(String.class) ||
            showNavigationButtons.getClass().isEnum()) {
            map.put("showNavigationButtons", showNavigationButtons);
        } else if (isListOfFile(showNavigationButtons)) {
            for(int i = 0; i< getListSize(showNavigationButtons); i++) {
                map.put("showNavigationButtons", showNavigationButtons);
            }
        }
        else {
          map.put("showNavigationButtons", showNavigationButtons);
        }
    }
    if (linkValidTill != null) {
        if (isFileTypeOrListOfFiles(linkValidTill)) {
            fileTypeFound = true;
        }

        if (linkValidTill.getClass().equals(java.io.File.class) ||
            linkValidTill.getClass().equals(Integer.class) ||
            linkValidTill.getClass().equals(String.class) ||
            linkValidTill.getClass().isEnum()) {
            map.put("linkValidTill", linkValidTill);
        } else if (isListOfFile(linkValidTill)) {
            for(int i = 0; i< getListSize(linkValidTill); i++) {
                map.put("linkValidTill", linkValidTill);
            }
        }
        else {
          map.put("linkValidTill", linkValidTill);
        }
    }
    if (showTooltip != null) {
        if (isFileTypeOrListOfFiles(showTooltip)) {
            fileTypeFound = true;
        }

        if (showTooltip.getClass().equals(java.io.File.class) ||
            showTooltip.getClass().equals(Integer.class) ||
            showTooltip.getClass().equals(String.class) ||
            showTooltip.getClass().isEnum()) {
            map.put("showTooltip", showTooltip);
        } else if (isListOfFile(showTooltip)) {
            for(int i = 0; i< getListSize(showTooltip); i++) {
                map.put("showTooltip", showTooltip);
            }
        }
        else {
          map.put("showTooltip", showTooltip);
        }
    }
    if (description != null) {
        if (isFileTypeOrListOfFiles(description)) {
            fileTypeFound = true;
        }

        if (description.getClass().equals(java.io.File.class) ||
            description.getClass().equals(Integer.class) ||
            description.getClass().equals(String.class) ||
            description.getClass().isEnum()) {
            map.put("description", description);
        } else if (isListOfFile(description)) {
            for(int i = 0; i< getListSize(description); i++) {
                map.put("description", description);
            }
        }
        else {
          map.put("description", description);
        }
    }
    if (documentTitle != null) {
        if (isFileTypeOrListOfFiles(documentTitle)) {
            fileTypeFound = true;
        }

        if (documentTitle.getClass().equals(java.io.File.class) ||
            documentTitle.getClass().equals(Integer.class) ||
            documentTitle.getClass().equals(String.class) ||
            documentTitle.getClass().isEnum()) {
            map.put("documentTitle", documentTitle);
        } else if (isListOfFile(documentTitle)) {
            for(int i = 0; i< getListSize(documentTitle); i++) {
                map.put("documentTitle", documentTitle);
            }
        }
        else {
          map.put("documentTitle", documentTitle);
        }
    }
    if (documentMessage != null) {
        if (isFileTypeOrListOfFiles(documentMessage)) {
            fileTypeFound = true;
        }

        if (documentMessage.getClass().equals(java.io.File.class) ||
            documentMessage.getClass().equals(Integer.class) ||
            documentMessage.getClass().equals(String.class) ||
            documentMessage.getClass().isEnum()) {
            map.put("documentMessage", documentMessage);
        } else if (isListOfFile(documentMessage)) {
            for(int i = 0; i< getListSize(documentMessage); i++) {
                map.put("documentMessage", documentMessage);
            }
        }
        else {
          map.put("documentMessage", documentMessage);
        }
    }
    if (files != null) {
        if (isFileTypeOrListOfFiles(files)) {
            fileTypeFound = true;
        }

        if (files.getClass().equals(java.io.File.class) ||
            files.getClass().equals(Integer.class) ||
            files.getClass().equals(String.class) ||
            files.getClass().isEnum()) {
            map.put("files", files);
        } else if (isListOfFile(files)) {
            for(int i = 0; i< getListSize(files); i++) {
                map.put("files", files);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : files) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("files", objectList);
        }
    }
    if (fileUrls != null) {
        if (isFileTypeOrListOfFiles(fileUrls)) {
            fileTypeFound = true;
        }

        if (fileUrls.getClass().equals(java.io.File.class) ||
            fileUrls.getClass().equals(Integer.class) ||
            fileUrls.getClass().equals(String.class) ||
            fileUrls.getClass().isEnum()) {
            map.put("fileUrls", fileUrls);
        } else if (isListOfFile(fileUrls)) {
            for(int i = 0; i< getListSize(fileUrls); i++) {
                map.put("fileUrls", fileUrls);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : fileUrls) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("fileUrls", objectList);
        }
    }
    if (roles != null) {
        if (isFileTypeOrListOfFiles(roles)) {
            fileTypeFound = true;
        }

        if (roles.getClass().equals(java.io.File.class) ||
            roles.getClass().equals(Integer.class) ||
            roles.getClass().equals(String.class) ||
            roles.getClass().isEnum()) {
            map.put("roles", roles);
        } else if (isListOfFile(roles)) {
            for(int i = 0; i< getListSize(roles); i++) {
                map.put("roles", roles);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : roles) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("roles", objectList);
        }
    }
    if (allowModifyFiles != null) {
        if (isFileTypeOrListOfFiles(allowModifyFiles)) {
            fileTypeFound = true;
        }

        if (allowModifyFiles.getClass().equals(java.io.File.class) ||
            allowModifyFiles.getClass().equals(Integer.class) ||
            allowModifyFiles.getClass().equals(String.class) ||
            allowModifyFiles.getClass().isEnum()) {
            map.put("allowModifyFiles", allowModifyFiles);
        } else if (isListOfFile(allowModifyFiles)) {
            for(int i = 0; i< getListSize(allowModifyFiles); i++) {
                map.put("allowModifyFiles", allowModifyFiles);
            }
        }
        else {
          map.put("allowModifyFiles", allowModifyFiles);
        }
    }
    if (cc != null) {
        if (isFileTypeOrListOfFiles(cc)) {
            fileTypeFound = true;
        }

        if (cc.getClass().equals(java.io.File.class) ||
            cc.getClass().equals(Integer.class) ||
            cc.getClass().equals(String.class) ||
            cc.getClass().isEnum()) {
            map.put("cc", cc);
        } else if (isListOfFile(cc)) {
            for(int i = 0; i< getListSize(cc); i++) {
                map.put("cc", cc);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : cc) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("cc", objectList);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    if (allowMessageEditing != null) {
        if (isFileTypeOrListOfFiles(allowMessageEditing)) {
            fileTypeFound = true;
        }

        if (allowMessageEditing.getClass().equals(java.io.File.class) ||
            allowMessageEditing.getClass().equals(Integer.class) ||
            allowMessageEditing.getClass().equals(String.class) ||
            allowMessageEditing.getClass().isEnum()) {
            map.put("allowMessageEditing", allowMessageEditing);
        } else if (isListOfFile(allowMessageEditing)) {
            for(int i = 0; i< getListSize(allowMessageEditing); i++) {
                map.put("allowMessageEditing", allowMessageEditing);
            }
        }
        else {
          map.put("allowMessageEditing", allowMessageEditing);
        }
    }
    if (allowNewRoles != null) {
        if (isFileTypeOrListOfFiles(allowNewRoles)) {
            fileTypeFound = true;
        }

        if (allowNewRoles.getClass().equals(java.io.File.class) ||
            allowNewRoles.getClass().equals(Integer.class) ||
            allowNewRoles.getClass().equals(String.class) ||
            allowNewRoles.getClass().isEnum()) {
            map.put("allowNewRoles", allowNewRoles);
        } else if (isListOfFile(allowNewRoles)) {
            for(int i = 0; i< getListSize(allowNewRoles); i++) {
                map.put("allowNewRoles", allowNewRoles);
            }
        }
        else {
          map.put("allowNewRoles", allowNewRoles);
        }
    }
    if (allowNewFiles != null) {
        if (isFileTypeOrListOfFiles(allowNewFiles)) {
            fileTypeFound = true;
        }

        if (allowNewFiles.getClass().equals(java.io.File.class) ||
            allowNewFiles.getClass().equals(Integer.class) ||
            allowNewFiles.getClass().equals(String.class) ||
            allowNewFiles.getClass().isEnum()) {
            map.put("allowNewFiles", allowNewFiles);
        } else if (isListOfFile(allowNewFiles)) {
            for(int i = 0; i< getListSize(allowNewFiles); i++) {
                map.put("allowNewFiles", allowNewFiles);
            }
        }
        else {
          map.put("allowNewFiles", allowNewFiles);
        }
    }
    if (enableReassign != null) {
        if (isFileTypeOrListOfFiles(enableReassign)) {
            fileTypeFound = true;
        }

        if (enableReassign.getClass().equals(java.io.File.class) ||
            enableReassign.getClass().equals(Integer.class) ||
            enableReassign.getClass().equals(String.class) ||
            enableReassign.getClass().isEnum()) {
            map.put("enableReassign", enableReassign);
        } else if (isListOfFile(enableReassign)) {
            for(int i = 0; i< getListSize(enableReassign); i++) {
                map.put("enableReassign", enableReassign);
            }
        }
        else {
          map.put("enableReassign", enableReassign);
        }
    }
    if (enablePrintAndAssign != null) {
        if (isFileTypeOrListOfFiles(enablePrintAndAssign)) {
            fileTypeFound = true;
        }

        if (enablePrintAndAssign.getClass().equals(java.io.File.class) ||
            enablePrintAndAssign.getClass().equals(Integer.class) ||
            enablePrintAndAssign.getClass().equals(String.class) ||
            enablePrintAndAssign.getClass().isEnum()) {
            map.put("enablePrintAndAssign", enablePrintAndAssign);
        } else if (isListOfFile(enablePrintAndAssign)) {
            for(int i = 0; i< getListSize(enablePrintAndAssign); i++) {
                map.put("enablePrintAndAssign", enablePrintAndAssign);
            }
        }
        else {
          map.put("enablePrintAndAssign", enablePrintAndAssign);
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", enableSigningOrder);
        }
    }
    if (documentInfo != null) {
        if (isFileTypeOrListOfFiles(documentInfo)) {
            fileTypeFound = true;
        }

        if (documentInfo.getClass().equals(java.io.File.class) ||
            documentInfo.getClass().equals(Integer.class) ||
            documentInfo.getClass().equals(String.class) ||
            documentInfo.getClass().isEnum()) {
            map.put("documentInfo", documentInfo);
        } else if (isListOfFile(documentInfo)) {
            for(int i = 0; i< getListSize(documentInfo); i++) {
                map.put("documentInfo", documentInfo);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : documentInfo) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("documentInfo", objectList);
        }
    }
    if (useTextTags != null) {
        if (isFileTypeOrListOfFiles(useTextTags)) {
            fileTypeFound = true;
        }

        if (useTextTags.getClass().equals(java.io.File.class) ||
            useTextTags.getClass().equals(Integer.class) ||
            useTextTags.getClass().equals(String.class) ||
            useTextTags.getClass().isEnum()) {
            map.put("useTextTags", useTextTags);
        } else if (isListOfFile(useTextTags)) {
            for(int i = 0; i< getListSize(useTextTags); i++) {
                map.put("useTextTags", useTextTags);
            }
        }
        else {
          map.put("useTextTags", useTextTags);
        }
    }
    if (textTagDefinitions != null) {
        if (isFileTypeOrListOfFiles(textTagDefinitions)) {
            fileTypeFound = true;
        }

        if (textTagDefinitions.getClass().equals(java.io.File.class) ||
            textTagDefinitions.getClass().equals(Integer.class) ||
            textTagDefinitions.getClass().equals(String.class) ||
            textTagDefinitions.getClass().isEnum()) {
            map.put("textTagDefinitions", textTagDefinitions);
        } else if (isListOfFile(textTagDefinitions)) {
            for(int i = 0; i< getListSize(textTagDefinitions); i++) {
                map.put("textTagDefinitions", textTagDefinitions);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : textTagDefinitions) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("textTagDefinitions", objectList);
        }
    }
    if (autoDetectFields != null) {
        if (isFileTypeOrListOfFiles(autoDetectFields)) {
            fileTypeFound = true;
        }

        if (autoDetectFields.getClass().equals(java.io.File.class) ||
            autoDetectFields.getClass().equals(Integer.class) ||
            autoDetectFields.getClass().equals(String.class) ||
            autoDetectFields.getClass().isEnum()) {
            map.put("autoDetectFields", autoDetectFields);
        } else if (isListOfFile(autoDetectFields)) {
            for(int i = 0; i< getListSize(autoDetectFields); i++) {
                map.put("autoDetectFields", autoDetectFields);
            }
        }
        else {
          map.put("autoDetectFields", autoDetectFields);
        }
    }
    if (onBehalfOf != null) {
        if (isFileTypeOrListOfFiles(onBehalfOf)) {
            fileTypeFound = true;
        }

        if (onBehalfOf.getClass().equals(java.io.File.class) ||
            onBehalfOf.getClass().equals(Integer.class) ||
            onBehalfOf.getClass().equals(String.class) ||
            onBehalfOf.getClass().isEnum()) {
            map.put("onBehalfOf", onBehalfOf);
        } else if (isListOfFile(onBehalfOf)) {
            for(int i = 0; i< getListSize(onBehalfOf); i++) {
                map.put("onBehalfOf", onBehalfOf);
            }
        }
        else {
          map.put("onBehalfOf", onBehalfOf);
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (templateLabels != null) {
        if (isFileTypeOrListOfFiles(templateLabels)) {
            fileTypeFound = true;
        }

        if (templateLabels.getClass().equals(java.io.File.class) ||
            templateLabels.getClass().equals(Integer.class) ||
            templateLabels.getClass().equals(String.class) ||
            templateLabels.getClass().isEnum()) {
            map.put("templateLabels", templateLabels);
        } else if (isListOfFile(templateLabels)) {
            for(int i = 0; i< getListSize(templateLabels); i++) {
                map.put("templateLabels", templateLabels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : templateLabels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("templateLabels", objectList);
        }
    }
    if (formGroups != null) {
        if (isFileTypeOrListOfFiles(formGroups)) {
            fileTypeFound = true;
        }

        if (formGroups.getClass().equals(java.io.File.class) ||
            formGroups.getClass().equals(Integer.class) ||
            formGroups.getClass().equals(String.class) ||
            formGroups.getClass().isEnum()) {
            map.put("formGroups", formGroups);
        } else if (isListOfFile(formGroups)) {
            for(int i = 0; i< getListSize(formGroups); i++) {
                map.put("formGroups", formGroups);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : formGroups) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("formGroups", objectList);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }

    if(!fileTypeFound) {
        Field[] fields = EmbeddedCreateTemplateRequest.class.getDeclaredFields();
        for (Field field : fields) {
            if ("files".equals(field.getName())) {
                fileTypeFound = true;
                break;
            }
        }
    }

    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("redirectUrl");
    openapiFields.add("showToolbar");
    openapiFields.add("viewOption");
    openapiFields.add("showSaveButton");
    openapiFields.add("locale");
    openapiFields.add("showSendButton");
    openapiFields.add("showCreateButton");
    openapiFields.add("showPreviewButton");
    openapiFields.add("showNavigationButtons");
    openapiFields.add("linkValidTill");
    openapiFields.add("showTooltip");
    openapiFields.add("description");
    openapiFields.add("documentTitle");
    openapiFields.add("documentMessage");
    openapiFields.add("files");
    openapiFields.add("fileUrls");
    openapiFields.add("roles");
    openapiFields.add("allowModifyFiles");
    openapiFields.add("cc");
    openapiFields.add("brandId");
    openapiFields.add("allowMessageEditing");
    openapiFields.add("allowNewRoles");
    openapiFields.add("allowNewFiles");
    openapiFields.add("enableReassign");
    openapiFields.add("enablePrintAndAssign");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("documentInfo");
    openapiFields.add("useTextTags");
    openapiFields.add("textTagDefinitions");
    openapiFields.add("autoDetectFields");
    openapiFields.add("onBehalfOf");
    openapiFields.add("labels");
    openapiFields.add("templateLabels");
    openapiFields.add("formGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmbeddedCreateTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmbeddedCreateTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmbeddedCreateTemplateRequest is not found in the empty JSON string", EmbeddedCreateTemplateRequest.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmbeddedCreateTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("redirectUrl") != null && !jsonObj.get("redirectUrl").isJsonNull()) && !jsonObj.get("redirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectUrl").toString()));
      }
      if ((jsonObj.get("viewOption") != null && !jsonObj.get("viewOption").isJsonNull()) && !jsonObj.get("viewOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewOption").toString()));
      }
      // validate the optional field `viewOption`
      if (jsonObj.get("viewOption") != null && !jsonObj.get("viewOption").isJsonNull()) {
        ViewOptionEnum.validateJsonElement(jsonObj.get("viewOption"));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("documentTitle") != null && !jsonObj.get("documentTitle").isJsonNull()) && !jsonObj.get("documentTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentTitle").toString()));
      }
      if ((jsonObj.get("documentMessage") != null && !jsonObj.get("documentMessage").isJsonNull()) && !jsonObj.get("documentMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull() && !jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fileUrls") != null && !jsonObj.get("fileUrls").isJsonNull() && !jsonObj.get("fileUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrls` to be an array in the JSON string but got `%s`", jsonObj.get("fileUrls").toString()));
      }
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            TemplateRole.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
          }

          // validate the optional field `cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            DocumentCC.validateJsonElement(jsonArraycc.get(i));
          };
        }
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if (jsonObj.get("documentInfo") != null && !jsonObj.get("documentInfo").isJsonNull()) {
        JsonArray jsonArraydocumentInfo = jsonObj.getAsJsonArray("documentInfo");
        if (jsonArraydocumentInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentInfo` to be an array in the JSON string but got `%s`", jsonObj.get("documentInfo").toString()));
          }

          // validate the optional field `documentInfo` (array)
          for (int i = 0; i < jsonArraydocumentInfo.size(); i++) {
            DocumentInfo.validateJsonElement(jsonArraydocumentInfo.get(i));
          };
        }
      }
      if (jsonObj.get("textTagDefinitions") != null && !jsonObj.get("textTagDefinitions").isJsonNull()) {
        JsonArray jsonArraytextTagDefinitions = jsonObj.getAsJsonArray("textTagDefinitions");
        if (jsonArraytextTagDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("textTagDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `textTagDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("textTagDefinitions").toString()));
          }

          // validate the optional field `textTagDefinitions` (array)
          for (int i = 0; i < jsonArraytextTagDefinitions.size(); i++) {
            TextTagDefinition.validateJsonElement(jsonArraytextTagDefinitions.get(i));
          };
        }
      }
      if ((jsonObj.get("onBehalfOf") != null && !jsonObj.get("onBehalfOf").isJsonNull()) && !jsonObj.get("onBehalfOf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onBehalfOf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onBehalfOf").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("templateLabels") != null && !jsonObj.get("templateLabels").isJsonNull() && !jsonObj.get("templateLabels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateLabels` to be an array in the JSON string but got `%s`", jsonObj.get("templateLabels").toString()));
      }
      if (jsonObj.get("formGroups") != null && !jsonObj.get("formGroups").isJsonNull()) {
        JsonArray jsonArrayformGroups = jsonObj.getAsJsonArray("formGroups");
        if (jsonArrayformGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("formGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `formGroups` to be an array in the JSON string but got `%s`", jsonObj.get("formGroups").toString()));
          }

          // validate the optional field `formGroups` (array)
          for (int i = 0; i < jsonArrayformGroups.size(); i++) {
            FormGroup.validateJsonElement(jsonArrayformGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmbeddedCreateTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmbeddedCreateTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmbeddedCreateTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedCreateTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EmbeddedCreateTemplateRequest>() {
           @Override
           public void write(JsonWriter out, EmbeddedCreateTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmbeddedCreateTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmbeddedCreateTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmbeddedCreateTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to EmbeddedCreateTemplateRequest
   */
  public static EmbeddedCreateTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmbeddedCreateTemplateRequest.class);
  }

  /**
   * Convert an instance of EmbeddedCreateTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

