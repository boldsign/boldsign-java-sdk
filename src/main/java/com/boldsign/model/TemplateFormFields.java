/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.AttachmentInfo;
import com.boldsign.model.ConditionalRule;
import com.boldsign.model.EditableDateFieldSettings;
import com.boldsign.model.FormulaFieldSettings;
import com.boldsign.model.ImageInfo;
import com.boldsign.model.Rectangle;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * TemplateFormFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class TemplateFormFields {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_FONT = "font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private String font;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_IS_READ_ONLY = "isReadOnly";
  @SerializedName(SERIALIZED_NAME_IS_READ_ONLY)
  private Boolean isReadOnly;

  public static final String SERIALIZED_NAME_LINE_HEIGHT = "lineHeight";
  @SerializedName(SERIALIZED_NAME_LINE_HEIGHT)
  private Integer lineHeight;

  public static final String SERIALIZED_NAME_FONT_SIZE = "fontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize;

  public static final String SERIALIZED_NAME_FONT_HEX_COLOR = "fontHexColor";
  @SerializedName(SERIALIZED_NAME_FONT_HEX_COLOR)
  private String fontHexColor;

  public static final String SERIALIZED_NAME_IS_UNDER_LINE_FONT = "isUnderLineFont";
  @SerializedName(SERIALIZED_NAME_IS_UNDER_LINE_FONT)
  private Boolean isUnderLineFont;

  public static final String SERIALIZED_NAME_IS_ITALIC_FONT = "isItalicFont";
  @SerializedName(SERIALIZED_NAME_IS_ITALIC_FONT)
  private Boolean isItalicFont;

  public static final String SERIALIZED_NAME_IS_BOLD_FONT = "isBoldFont";
  @SerializedName(SERIALIZED_NAME_IS_BOLD_FONT)
  private Boolean isBoldFont;

  public static final String SERIALIZED_NAME_GROUP_NAME = "groupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;

  /**
   * Gets or Sets validationtype
   */
  @JsonAdapter(ValidationtypeEnum.Adapter.class)
  public enum ValidationtypeEnum {
    NONE("None"),
    
    NUMBERS_ONLY("NumbersOnly"),
    
    EMAIL_ADDRESS("EmailAddress"),
    
    CURRENCY("Currency"),
    
    CUSTOM_REGEX("CustomRegex");

    private String value;

    ValidationtypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidationtypeEnum fromValue(String value) {
      for (ValidationtypeEnum b : ValidationtypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidationtypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidationtypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidationtypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidationtypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidationtypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATIONTYPE = "validationtype";
  @SerializedName(SERIALIZED_NAME_VALIDATIONTYPE)
  private ValidationtypeEnum validationtype;

  public static final String SERIALIZED_NAME_VALIDATION_CUSTOM_REGEX = "validationCustomRegex";
  @SerializedName(SERIALIZED_NAME_VALIDATION_CUSTOM_REGEX)
  private String validationCustomRegex;

  public static final String SERIALIZED_NAME_VALIDATION_CUSTOM_REGEX_MESSAGE = "validationCustomRegexMessage";
  @SerializedName(SERIALIZED_NAME_VALIDATION_CUSTOM_REGEX_MESSAGE)
  private String validationCustomRegexMessage;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  public static final String SERIALIZED_NAME_IMAGE_INFO = "imageInfo";
  @SerializedName(SERIALIZED_NAME_IMAGE_INFO)
  private ImageInfo imageInfo;

  public static final String SERIALIZED_NAME_ATTACHMENT_INFO = "attachmentInfo";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_INFO)
  private AttachmentInfo attachmentInfo;

  public static final String SERIALIZED_NAME_EDITABLE_DATE_FIELD_SETTINGS = "editableDateFieldSettings";
  @SerializedName(SERIALIZED_NAME_EDITABLE_DATE_FIELD_SETTINGS)
  private EditableDateFieldSettings editableDateFieldSettings;

  public static final String SERIALIZED_NAME_DROPDOWN_OPTIONS = "dropdownOptions";
  @SerializedName(SERIALIZED_NAME_DROPDOWN_OPTIONS)
  private List<String> dropdownOptions;

  public static final String SERIALIZED_NAME_BOUNDS = "bounds";
  @SerializedName(SERIALIZED_NAME_BOUNDS)
  private Rectangle bounds;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_CONDITIONAL_RULES = "conditionalRules";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_RULES)
  private List<ConditionalRule> conditionalRules;

  public static final String SERIALIZED_NAME_DATA_SYNC_TAG = "dataSyncTag";
  @SerializedName(SERIALIZED_NAME_DATA_SYNC_TAG)
  private String dataSyncTag;

  /**
   * Gets or Sets textAlign
   */
  @JsonAdapter(TextAlignEnum.Adapter.class)
  public enum TextAlignEnum {
    LEFT("Left"),
    
    CENTER("Center"),
    
    RIGHT("Right");

    private String value;

    TextAlignEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextAlignEnum fromValue(String value) {
      for (TextAlignEnum b : TextAlignEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextAlignEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextAlignEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextAlignEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextAlignEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextAlignEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_ALIGN = "textAlign";
  @SerializedName(SERIALIZED_NAME_TEXT_ALIGN)
  private TextAlignEnum textAlign;

  /**
   * Gets or Sets textDirection
   */
  @JsonAdapter(TextDirectionEnum.Adapter.class)
  public enum TextDirectionEnum {
    LTR("LTR"),
    
    RTL("RTL");

    private String value;

    TextDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextDirectionEnum fromValue(String value) {
      for (TextDirectionEnum b : TextDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_DIRECTION = "textDirection";
  @SerializedName(SERIALIZED_NAME_TEXT_DIRECTION)
  private TextDirectionEnum textDirection;

  public static final String SERIALIZED_NAME_CHARACTER_SPACING = "characterSpacing";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SPACING)
  private Float characterSpacing;

  public static final String SERIALIZED_NAME_CHARACTER_LIMIT = "characterLimit";
  @SerializedName(SERIALIZED_NAME_CHARACTER_LIMIT)
  private Integer characterLimit;

  public static final String SERIALIZED_NAME_HYPERLINK_TEXT = "hyperlinkText";
  @SerializedName(SERIALIZED_NAME_HYPERLINK_TEXT)
  private String hyperlinkText;

  public static final String SERIALIZED_NAME_BACKGROUND_HEX_COLOR = "backgroundHexColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_HEX_COLOR)
  private String backgroundHexColor;

  public static final String SERIALIZED_NAME_TAB_INDEX = "tabIndex";
  @SerializedName(SERIALIZED_NAME_TAB_INDEX)
  private Integer tabIndex;

  public static final String SERIALIZED_NAME_FORMULA_FIELD_SETTINGS = "formulaFieldSettings";
  @SerializedName(SERIALIZED_NAME_FORMULA_FIELD_SETTINGS)
  private FormulaFieldSettings formulaFieldSettings;

  /**
   * Gets or Sets resizeOption
   */
  @JsonAdapter(ResizeOptionEnum.Adapter.class)
  public enum ResizeOptionEnum {
    GROW_VERTICALLY("GrowVertically"),
    
    GROW_HORIZONTALLY("GrowHorizontally"),
    
    GROW_BOTH("GrowBoth"),
    
    FIXED("Fixed"),
    
    AUTO_RESIZE_FONT("AutoResizeFont");

    private String value;

    ResizeOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResizeOptionEnum fromValue(String value) {
      for (ResizeOptionEnum b : ResizeOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResizeOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResizeOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResizeOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResizeOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResizeOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESIZE_OPTION = "resizeOption";
  @SerializedName(SERIALIZED_NAME_RESIZE_OPTION)
  private ResizeOptionEnum resizeOption;

  public TemplateFormFields() {
  }

  public TemplateFormFields id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TemplateFormFields fieldType(String fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   * @return fieldType
   */
  @javax.annotation.Nullable
  public String getFieldType() {
    return fieldType;
  }

  public void setFieldType(String fieldType) {
    this.fieldType = fieldType;
  }


  public TemplateFormFields type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public TemplateFormFields value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public TemplateFormFields font(String font) {
    this.font = font;
    return this;
  }

  /**
   * Get font
   * @return font
   */
  @javax.annotation.Nullable
  public String getFont() {
    return font;
  }

  public void setFont(String font) {
    this.font = font;
  }


  public TemplateFormFields isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Get isRequired
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public TemplateFormFields isReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
    return this;
  }

  /**
   * Get isReadOnly
   * @return isReadOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsReadOnly() {
    return isReadOnly;
  }

  public void setIsReadOnly(Boolean isReadOnly) {
    this.isReadOnly = isReadOnly;
  }


  public TemplateFormFields lineHeight(Integer lineHeight) {
    this.lineHeight = lineHeight;
    return this;
  }

  /**
   * Get lineHeight
   * @return lineHeight
   */
  @javax.annotation.Nullable
  public Integer getLineHeight() {
    return lineHeight;
  }

  public void setLineHeight(Integer lineHeight) {
    this.lineHeight = lineHeight;
  }


  public TemplateFormFields fontSize(Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Get fontSize
   * @return fontSize
   */
  @javax.annotation.Nullable
  public Integer getFontSize() {
    return fontSize;
  }

  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  public TemplateFormFields fontHexColor(String fontHexColor) {
    this.fontHexColor = fontHexColor;
    return this;
  }

  /**
   * Get fontHexColor
   * @return fontHexColor
   */
  @javax.annotation.Nullable
  public String getFontHexColor() {
    return fontHexColor;
  }

  public void setFontHexColor(String fontHexColor) {
    this.fontHexColor = fontHexColor;
  }


  public TemplateFormFields isUnderLineFont(Boolean isUnderLineFont) {
    this.isUnderLineFont = isUnderLineFont;
    return this;
  }

  /**
   * Get isUnderLineFont
   * @return isUnderLineFont
   */
  @javax.annotation.Nullable
  public Boolean getIsUnderLineFont() {
    return isUnderLineFont;
  }

  public void setIsUnderLineFont(Boolean isUnderLineFont) {
    this.isUnderLineFont = isUnderLineFont;
  }


  public TemplateFormFields isItalicFont(Boolean isItalicFont) {
    this.isItalicFont = isItalicFont;
    return this;
  }

  /**
   * Get isItalicFont
   * @return isItalicFont
   */
  @javax.annotation.Nullable
  public Boolean getIsItalicFont() {
    return isItalicFont;
  }

  public void setIsItalicFont(Boolean isItalicFont) {
    this.isItalicFont = isItalicFont;
  }


  public TemplateFormFields isBoldFont(Boolean isBoldFont) {
    this.isBoldFont = isBoldFont;
    return this;
  }

  /**
   * Get isBoldFont
   * @return isBoldFont
   */
  @javax.annotation.Nullable
  public Boolean getIsBoldFont() {
    return isBoldFont;
  }

  public void setIsBoldFont(Boolean isBoldFont) {
    this.isBoldFont = isBoldFont;
  }


  public TemplateFormFields groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Get groupName
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public TemplateFormFields label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public TemplateFormFields placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

  /**
   * Get placeholder
   * @return placeholder
   */
  @javax.annotation.Nullable
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }


  public TemplateFormFields validationtype(ValidationtypeEnum validationtype) {
    this.validationtype = validationtype;
    return this;
  }

  /**
   * Get validationtype
   * @return validationtype
   */
  @javax.annotation.Nullable
  public ValidationtypeEnum getValidationtype() {
    return validationtype;
  }

  public void setValidationtype(ValidationtypeEnum validationtype) {
    this.validationtype = validationtype;
  }


  public TemplateFormFields validationCustomRegex(String validationCustomRegex) {
    this.validationCustomRegex = validationCustomRegex;
    return this;
  }

  /**
   * Get validationCustomRegex
   * @return validationCustomRegex
   */
  @javax.annotation.Nullable
  public String getValidationCustomRegex() {
    return validationCustomRegex;
  }

  public void setValidationCustomRegex(String validationCustomRegex) {
    this.validationCustomRegex = validationCustomRegex;
  }


  public TemplateFormFields validationCustomRegexMessage(String validationCustomRegexMessage) {
    this.validationCustomRegexMessage = validationCustomRegexMessage;
    return this;
  }

  /**
   * Get validationCustomRegexMessage
   * @return validationCustomRegexMessage
   */
  @javax.annotation.Nullable
  public String getValidationCustomRegexMessage() {
    return validationCustomRegexMessage;
  }

  public void setValidationCustomRegexMessage(String validationCustomRegexMessage) {
    this.validationCustomRegexMessage = validationCustomRegexMessage;
  }


  public TemplateFormFields dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public TemplateFormFields timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public TemplateFormFields imageInfo(ImageInfo imageInfo) {
    this.imageInfo = imageInfo;
    return this;
  }

  /**
   * Get imageInfo
   * @return imageInfo
   */
  @javax.annotation.Nullable
  public ImageInfo getImageInfo() {
    return imageInfo;
  }

  public void setImageInfo(ImageInfo imageInfo) {
    this.imageInfo = imageInfo;
  }


  public TemplateFormFields attachmentInfo(AttachmentInfo attachmentInfo) {
    this.attachmentInfo = attachmentInfo;
    return this;
  }

  /**
   * Get attachmentInfo
   * @return attachmentInfo
   */
  @javax.annotation.Nullable
  public AttachmentInfo getAttachmentInfo() {
    return attachmentInfo;
  }

  public void setAttachmentInfo(AttachmentInfo attachmentInfo) {
    this.attachmentInfo = attachmentInfo;
  }


  public TemplateFormFields editableDateFieldSettings(EditableDateFieldSettings editableDateFieldSettings) {
    this.editableDateFieldSettings = editableDateFieldSettings;
    return this;
  }

  /**
   * Get editableDateFieldSettings
   * @return editableDateFieldSettings
   */
  @javax.annotation.Nullable
  public EditableDateFieldSettings getEditableDateFieldSettings() {
    return editableDateFieldSettings;
  }

  public void setEditableDateFieldSettings(EditableDateFieldSettings editableDateFieldSettings) {
    this.editableDateFieldSettings = editableDateFieldSettings;
  }


  public TemplateFormFields dropdownOptions(List<String> dropdownOptions) {
    this.dropdownOptions = dropdownOptions;
    return this;
  }

  public TemplateFormFields addDropdownOptionsItem(String dropdownOptionsItem) {
    if (this.dropdownOptions == null) {
      this.dropdownOptions = new ArrayList<>();
    }
    this.dropdownOptions.add(dropdownOptionsItem);
    return this;
  }

  /**
   * Get dropdownOptions
   * @return dropdownOptions
   */
  @javax.annotation.Nullable
  public List<String> getDropdownOptions() {
    return dropdownOptions;
  }

  public void setDropdownOptions(List<String> dropdownOptions) {
    this.dropdownOptions = dropdownOptions;
  }


  public TemplateFormFields bounds(Rectangle bounds) {
    this.bounds = bounds;
    return this;
  }

  /**
   * Get bounds
   * @return bounds
   */
  @javax.annotation.Nullable
  public Rectangle getBounds() {
    return bounds;
  }

  public void setBounds(Rectangle bounds) {
    this.bounds = bounds;
  }


  public TemplateFormFields pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Get pageNumber
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public TemplateFormFields conditionalRules(List<ConditionalRule> conditionalRules) {
    this.conditionalRules = conditionalRules;
    return this;
  }

  public TemplateFormFields addConditionalRulesItem(ConditionalRule conditionalRulesItem) {
    if (this.conditionalRules == null) {
      this.conditionalRules = new ArrayList<>();
    }
    this.conditionalRules.add(conditionalRulesItem);
    return this;
  }

  /**
   * Get conditionalRules
   * @return conditionalRules
   */
  @javax.annotation.Nullable
  public List<ConditionalRule> getConditionalRules() {
    return conditionalRules;
  }

  public void setConditionalRules(List<ConditionalRule> conditionalRules) {
    this.conditionalRules = conditionalRules;
  }


  public TemplateFormFields dataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
    return this;
  }

  /**
   * Get dataSyncTag
   * @return dataSyncTag
   */
  @javax.annotation.Nullable
  public String getDataSyncTag() {
    return dataSyncTag;
  }

  public void setDataSyncTag(String dataSyncTag) {
    this.dataSyncTag = dataSyncTag;
  }


  public TemplateFormFields textAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
    return this;
  }

  /**
   * Get textAlign
   * @return textAlign
   */
  @javax.annotation.Nullable
  public TextAlignEnum getTextAlign() {
    return textAlign;
  }

  public void setTextAlign(TextAlignEnum textAlign) {
    this.textAlign = textAlign;
  }


  public TemplateFormFields textDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
    return this;
  }

  /**
   * Get textDirection
   * @return textDirection
   */
  @javax.annotation.Nullable
  public TextDirectionEnum getTextDirection() {
    return textDirection;
  }

  public void setTextDirection(TextDirectionEnum textDirection) {
    this.textDirection = textDirection;
  }


  public TemplateFormFields characterSpacing(Float characterSpacing) {
    this.characterSpacing = characterSpacing;
    return this;
  }

  /**
   * Get characterSpacing
   * @return characterSpacing
   */
  @javax.annotation.Nullable
  public Float getCharacterSpacing() {
    return characterSpacing;
  }

  public void setCharacterSpacing(Float characterSpacing) {
    this.characterSpacing = characterSpacing;
  }


  public TemplateFormFields characterLimit(Integer characterLimit) {
    this.characterLimit = characterLimit;
    return this;
  }

  /**
   * Get characterLimit
   * @return characterLimit
   */
  @javax.annotation.Nullable
  public Integer getCharacterLimit() {
    return characterLimit;
  }

  public void setCharacterLimit(Integer characterLimit) {
    this.characterLimit = characterLimit;
  }


  public TemplateFormFields hyperlinkText(String hyperlinkText) {
    this.hyperlinkText = hyperlinkText;
    return this;
  }

  /**
   * Get hyperlinkText
   * @return hyperlinkText
   */
  @javax.annotation.Nullable
  public String getHyperlinkText() {
    return hyperlinkText;
  }

  public void setHyperlinkText(String hyperlinkText) {
    this.hyperlinkText = hyperlinkText;
  }


  public TemplateFormFields backgroundHexColor(String backgroundHexColor) {
    this.backgroundHexColor = backgroundHexColor;
    return this;
  }

  /**
   * Get backgroundHexColor
   * @return backgroundHexColor
   */
  @javax.annotation.Nullable
  public String getBackgroundHexColor() {
    return backgroundHexColor;
  }

  public void setBackgroundHexColor(String backgroundHexColor) {
    this.backgroundHexColor = backgroundHexColor;
  }


  public TemplateFormFields tabIndex(Integer tabIndex) {
    this.tabIndex = tabIndex;
    return this;
  }

  /**
   * Get tabIndex
   * @return tabIndex
   */
  @javax.annotation.Nullable
  public Integer getTabIndex() {
    return tabIndex;
  }

  public void setTabIndex(Integer tabIndex) {
    this.tabIndex = tabIndex;
  }


  public TemplateFormFields formulaFieldSettings(FormulaFieldSettings formulaFieldSettings) {
    this.formulaFieldSettings = formulaFieldSettings;
    return this;
  }

  /**
   * Get formulaFieldSettings
   * @return formulaFieldSettings
   */
  @javax.annotation.Nullable
  public FormulaFieldSettings getFormulaFieldSettings() {
    return formulaFieldSettings;
  }

  public void setFormulaFieldSettings(FormulaFieldSettings formulaFieldSettings) {
    this.formulaFieldSettings = formulaFieldSettings;
  }


  public TemplateFormFields resizeOption(ResizeOptionEnum resizeOption) {
    this.resizeOption = resizeOption;
    return this;
  }

  /**
   * Get resizeOption
   * @return resizeOption
   */
  @javax.annotation.Nullable
  public ResizeOptionEnum getResizeOption() {
    return resizeOption;
  }

  public void setResizeOption(ResizeOptionEnum resizeOption) {
    this.resizeOption = resizeOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateFormFields templateFormFields = (TemplateFormFields) o;
    return Objects.equals(this.id, templateFormFields.id) &&
        Objects.equals(this.fieldType, templateFormFields.fieldType) &&
        Objects.equals(this.type, templateFormFields.type) &&
        Objects.equals(this.value, templateFormFields.value) &&
        Objects.equals(this.font, templateFormFields.font) &&
        Objects.equals(this.isRequired, templateFormFields.isRequired) &&
        Objects.equals(this.isReadOnly, templateFormFields.isReadOnly) &&
        Objects.equals(this.lineHeight, templateFormFields.lineHeight) &&
        Objects.equals(this.fontSize, templateFormFields.fontSize) &&
        Objects.equals(this.fontHexColor, templateFormFields.fontHexColor) &&
        Objects.equals(this.isUnderLineFont, templateFormFields.isUnderLineFont) &&
        Objects.equals(this.isItalicFont, templateFormFields.isItalicFont) &&
        Objects.equals(this.isBoldFont, templateFormFields.isBoldFont) &&
        Objects.equals(this.groupName, templateFormFields.groupName) &&
        Objects.equals(this.label, templateFormFields.label) &&
        Objects.equals(this.placeholder, templateFormFields.placeholder) &&
        Objects.equals(this.validationtype, templateFormFields.validationtype) &&
        Objects.equals(this.validationCustomRegex, templateFormFields.validationCustomRegex) &&
        Objects.equals(this.validationCustomRegexMessage, templateFormFields.validationCustomRegexMessage) &&
        Objects.equals(this.dateFormat, templateFormFields.dateFormat) &&
        Objects.equals(this.timeFormat, templateFormFields.timeFormat) &&
        Objects.equals(this.imageInfo, templateFormFields.imageInfo) &&
        Objects.equals(this.attachmentInfo, templateFormFields.attachmentInfo) &&
        Objects.equals(this.editableDateFieldSettings, templateFormFields.editableDateFieldSettings) &&
        Objects.equals(this.dropdownOptions, templateFormFields.dropdownOptions) &&
        Objects.equals(this.bounds, templateFormFields.bounds) &&
        Objects.equals(this.pageNumber, templateFormFields.pageNumber) &&
        Objects.equals(this.conditionalRules, templateFormFields.conditionalRules) &&
        Objects.equals(this.dataSyncTag, templateFormFields.dataSyncTag) &&
        Objects.equals(this.textAlign, templateFormFields.textAlign) &&
        Objects.equals(this.textDirection, templateFormFields.textDirection) &&
        Objects.equals(this.characterSpacing, templateFormFields.characterSpacing) &&
        Objects.equals(this.characterLimit, templateFormFields.characterLimit) &&
        Objects.equals(this.hyperlinkText, templateFormFields.hyperlinkText) &&
        Objects.equals(this.backgroundHexColor, templateFormFields.backgroundHexColor) &&
        Objects.equals(this.tabIndex, templateFormFields.tabIndex) &&
        Objects.equals(this.formulaFieldSettings, templateFormFields.formulaFieldSettings) &&
        Objects.equals(this.resizeOption, templateFormFields.resizeOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fieldType, type, value, font, isRequired, isReadOnly, lineHeight, fontSize, fontHexColor, isUnderLineFont, isItalicFont, isBoldFont, groupName, label, placeholder, validationtype, validationCustomRegex, validationCustomRegexMessage, dateFormat, timeFormat, imageInfo, attachmentInfo, editableDateFieldSettings, dropdownOptions, bounds, pageNumber, conditionalRules, dataSyncTag, textAlign, textDirection, characterSpacing, characterLimit, hyperlinkText, backgroundHexColor, tabIndex, formulaFieldSettings, resizeOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateFormFields {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
    sb.append("    lineHeight: ").append(toIndentedString(lineHeight)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontHexColor: ").append(toIndentedString(fontHexColor)).append("\n");
    sb.append("    isUnderLineFont: ").append(toIndentedString(isUnderLineFont)).append("\n");
    sb.append("    isItalicFont: ").append(toIndentedString(isItalicFont)).append("\n");
    sb.append("    isBoldFont: ").append(toIndentedString(isBoldFont)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    validationtype: ").append(toIndentedString(validationtype)).append("\n");
    sb.append("    validationCustomRegex: ").append(toIndentedString(validationCustomRegex)).append("\n");
    sb.append("    validationCustomRegexMessage: ").append(toIndentedString(validationCustomRegexMessage)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    imageInfo: ").append(toIndentedString(imageInfo)).append("\n");
    sb.append("    attachmentInfo: ").append(toIndentedString(attachmentInfo)).append("\n");
    sb.append("    editableDateFieldSettings: ").append(toIndentedString(editableDateFieldSettings)).append("\n");
    sb.append("    dropdownOptions: ").append(toIndentedString(dropdownOptions)).append("\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    conditionalRules: ").append(toIndentedString(conditionalRules)).append("\n");
    sb.append("    dataSyncTag: ").append(toIndentedString(dataSyncTag)).append("\n");
    sb.append("    textAlign: ").append(toIndentedString(textAlign)).append("\n");
    sb.append("    textDirection: ").append(toIndentedString(textDirection)).append("\n");
    sb.append("    characterSpacing: ").append(toIndentedString(characterSpacing)).append("\n");
    sb.append("    characterLimit: ").append(toIndentedString(characterLimit)).append("\n");
    sb.append("    hyperlinkText: ").append(toIndentedString(hyperlinkText)).append("\n");
    sb.append("    backgroundHexColor: ").append(toIndentedString(backgroundHexColor)).append("\n");
    sb.append("    tabIndex: ").append(toIndentedString(tabIndex)).append("\n");
    sb.append("    formulaFieldSettings: ").append(toIndentedString(formulaFieldSettings)).append("\n");
    sb.append("    resizeOption: ").append(toIndentedString(resizeOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (id != null) {
        if (isFileTypeOrListOfFiles(id)) {
            fileTypeFound = true;
        }

        if (id.getClass().equals(java.io.File.class) ||
            id.getClass().equals(Integer.class) ||
            id.getClass().equals(String.class) ||
            id.getClass().equals(java.net.URI.class)||
            id.getClass().isEnum()) {
            map.put("id", id);
        } else if (isListOfFile(id)) {
            for(int i = 0; i< getListSize(id); i++) {
                map.put("id", id);
            }
        }
        else {
          map.put("id", JSON.serialize(id));
        }
    }
    if (fieldType != null) {
        if (isFileTypeOrListOfFiles(fieldType)) {
            fileTypeFound = true;
        }

        if (fieldType.getClass().equals(java.io.File.class) ||
            fieldType.getClass().equals(Integer.class) ||
            fieldType.getClass().equals(String.class) ||
            fieldType.getClass().equals(java.net.URI.class)||
            fieldType.getClass().isEnum()) {
            map.put("fieldType", fieldType);
        } else if (isListOfFile(fieldType)) {
            for(int i = 0; i< getListSize(fieldType); i++) {
                map.put("fieldType", fieldType);
            }
        }
        else {
          map.put("fieldType", JSON.serialize(fieldType));
        }
    }
    if (type != null) {
        if (isFileTypeOrListOfFiles(type)) {
            fileTypeFound = true;
        }

        if (type.getClass().equals(java.io.File.class) ||
            type.getClass().equals(Integer.class) ||
            type.getClass().equals(String.class) ||
            type.getClass().equals(java.net.URI.class)||
            type.getClass().isEnum()) {
            map.put("type", type);
        } else if (isListOfFile(type)) {
            for(int i = 0; i< getListSize(type); i++) {
                map.put("type", type);
            }
        }
        else {
          map.put("type", JSON.serialize(type));
        }
    }
    if (value != null) {
        if (isFileTypeOrListOfFiles(value)) {
            fileTypeFound = true;
        }

        if (value.getClass().equals(java.io.File.class) ||
            value.getClass().equals(Integer.class) ||
            value.getClass().equals(String.class) ||
            value.getClass().equals(java.net.URI.class)||
            value.getClass().isEnum()) {
            map.put("value", value);
        } else if (isListOfFile(value)) {
            for(int i = 0; i< getListSize(value); i++) {
                map.put("value", value);
            }
        }
        else {
          map.put("value", JSON.serialize(value));
        }
    }
    if (font != null) {
        if (isFileTypeOrListOfFiles(font)) {
            fileTypeFound = true;
        }

        if (font.getClass().equals(java.io.File.class) ||
            font.getClass().equals(Integer.class) ||
            font.getClass().equals(String.class) ||
            font.getClass().equals(java.net.URI.class)||
            font.getClass().isEnum()) {
            map.put("font", font);
        } else if (isListOfFile(font)) {
            for(int i = 0; i< getListSize(font); i++) {
                map.put("font", font);
            }
        }
        else {
          map.put("font", JSON.serialize(font));
        }
    }
    if (isRequired != null) {
        if (isFileTypeOrListOfFiles(isRequired)) {
            fileTypeFound = true;
        }

        if (isRequired.getClass().equals(java.io.File.class) ||
            isRequired.getClass().equals(Integer.class) ||
            isRequired.getClass().equals(String.class) ||
            isRequired.getClass().equals(java.net.URI.class)||
            isRequired.getClass().isEnum()) {
            map.put("isRequired", isRequired);
        } else if (isListOfFile(isRequired)) {
            for(int i = 0; i< getListSize(isRequired); i++) {
                map.put("isRequired", isRequired);
            }
        }
        else {
          map.put("isRequired", JSON.serialize(isRequired));
        }
    }
    if (isReadOnly != null) {
        if (isFileTypeOrListOfFiles(isReadOnly)) {
            fileTypeFound = true;
        }

        if (isReadOnly.getClass().equals(java.io.File.class) ||
            isReadOnly.getClass().equals(Integer.class) ||
            isReadOnly.getClass().equals(String.class) ||
            isReadOnly.getClass().equals(java.net.URI.class)||
            isReadOnly.getClass().isEnum()) {
            map.put("isReadOnly", isReadOnly);
        } else if (isListOfFile(isReadOnly)) {
            for(int i = 0; i< getListSize(isReadOnly); i++) {
                map.put("isReadOnly", isReadOnly);
            }
        }
        else {
          map.put("isReadOnly", JSON.serialize(isReadOnly));
        }
    }
    if (lineHeight != null) {
        if (isFileTypeOrListOfFiles(lineHeight)) {
            fileTypeFound = true;
        }

        if (lineHeight.getClass().equals(java.io.File.class) ||
            lineHeight.getClass().equals(Integer.class) ||
            lineHeight.getClass().equals(String.class) ||
            lineHeight.getClass().equals(java.net.URI.class)||
            lineHeight.getClass().isEnum()) {
            map.put("lineHeight", lineHeight);
        } else if (isListOfFile(lineHeight)) {
            for(int i = 0; i< getListSize(lineHeight); i++) {
                map.put("lineHeight", lineHeight);
            }
        }
        else {
          map.put("lineHeight", JSON.serialize(lineHeight));
        }
    }
    if (fontSize != null) {
        if (isFileTypeOrListOfFiles(fontSize)) {
            fileTypeFound = true;
        }

        if (fontSize.getClass().equals(java.io.File.class) ||
            fontSize.getClass().equals(Integer.class) ||
            fontSize.getClass().equals(String.class) ||
            fontSize.getClass().equals(java.net.URI.class)||
            fontSize.getClass().isEnum()) {
            map.put("fontSize", fontSize);
        } else if (isListOfFile(fontSize)) {
            for(int i = 0; i< getListSize(fontSize); i++) {
                map.put("fontSize", fontSize);
            }
        }
        else {
          map.put("fontSize", JSON.serialize(fontSize));
        }
    }
    if (fontHexColor != null) {
        if (isFileTypeOrListOfFiles(fontHexColor)) {
            fileTypeFound = true;
        }

        if (fontHexColor.getClass().equals(java.io.File.class) ||
            fontHexColor.getClass().equals(Integer.class) ||
            fontHexColor.getClass().equals(String.class) ||
            fontHexColor.getClass().equals(java.net.URI.class)||
            fontHexColor.getClass().isEnum()) {
            map.put("fontHexColor", fontHexColor);
        } else if (isListOfFile(fontHexColor)) {
            for(int i = 0; i< getListSize(fontHexColor); i++) {
                map.put("fontHexColor", fontHexColor);
            }
        }
        else {
          map.put("fontHexColor", JSON.serialize(fontHexColor));
        }
    }
    if (isUnderLineFont != null) {
        if (isFileTypeOrListOfFiles(isUnderLineFont)) {
            fileTypeFound = true;
        }

        if (isUnderLineFont.getClass().equals(java.io.File.class) ||
            isUnderLineFont.getClass().equals(Integer.class) ||
            isUnderLineFont.getClass().equals(String.class) ||
            isUnderLineFont.getClass().equals(java.net.URI.class)||
            isUnderLineFont.getClass().isEnum()) {
            map.put("isUnderLineFont", isUnderLineFont);
        } else if (isListOfFile(isUnderLineFont)) {
            for(int i = 0; i< getListSize(isUnderLineFont); i++) {
                map.put("isUnderLineFont", isUnderLineFont);
            }
        }
        else {
          map.put("isUnderLineFont", JSON.serialize(isUnderLineFont));
        }
    }
    if (isItalicFont != null) {
        if (isFileTypeOrListOfFiles(isItalicFont)) {
            fileTypeFound = true;
        }

        if (isItalicFont.getClass().equals(java.io.File.class) ||
            isItalicFont.getClass().equals(Integer.class) ||
            isItalicFont.getClass().equals(String.class) ||
            isItalicFont.getClass().equals(java.net.URI.class)||
            isItalicFont.getClass().isEnum()) {
            map.put("isItalicFont", isItalicFont);
        } else if (isListOfFile(isItalicFont)) {
            for(int i = 0; i< getListSize(isItalicFont); i++) {
                map.put("isItalicFont", isItalicFont);
            }
        }
        else {
          map.put("isItalicFont", JSON.serialize(isItalicFont));
        }
    }
    if (isBoldFont != null) {
        if (isFileTypeOrListOfFiles(isBoldFont)) {
            fileTypeFound = true;
        }

        if (isBoldFont.getClass().equals(java.io.File.class) ||
            isBoldFont.getClass().equals(Integer.class) ||
            isBoldFont.getClass().equals(String.class) ||
            isBoldFont.getClass().equals(java.net.URI.class)||
            isBoldFont.getClass().isEnum()) {
            map.put("isBoldFont", isBoldFont);
        } else if (isListOfFile(isBoldFont)) {
            for(int i = 0; i< getListSize(isBoldFont); i++) {
                map.put("isBoldFont", isBoldFont);
            }
        }
        else {
          map.put("isBoldFont", JSON.serialize(isBoldFont));
        }
    }
    if (groupName != null) {
        if (isFileTypeOrListOfFiles(groupName)) {
            fileTypeFound = true;
        }

        if (groupName.getClass().equals(java.io.File.class) ||
            groupName.getClass().equals(Integer.class) ||
            groupName.getClass().equals(String.class) ||
            groupName.getClass().equals(java.net.URI.class)||
            groupName.getClass().isEnum()) {
            map.put("groupName", groupName);
        } else if (isListOfFile(groupName)) {
            for(int i = 0; i< getListSize(groupName); i++) {
                map.put("groupName", groupName);
            }
        }
        else {
          map.put("groupName", JSON.serialize(groupName));
        }
    }
    if (label != null) {
        if (isFileTypeOrListOfFiles(label)) {
            fileTypeFound = true;
        }

        if (label.getClass().equals(java.io.File.class) ||
            label.getClass().equals(Integer.class) ||
            label.getClass().equals(String.class) ||
            label.getClass().equals(java.net.URI.class)||
            label.getClass().isEnum()) {
            map.put("label", label);
        } else if (isListOfFile(label)) {
            for(int i = 0; i< getListSize(label); i++) {
                map.put("label", label);
            }
        }
        else {
          map.put("label", JSON.serialize(label));
        }
    }
    if (placeholder != null) {
        if (isFileTypeOrListOfFiles(placeholder)) {
            fileTypeFound = true;
        }

        if (placeholder.getClass().equals(java.io.File.class) ||
            placeholder.getClass().equals(Integer.class) ||
            placeholder.getClass().equals(String.class) ||
            placeholder.getClass().equals(java.net.URI.class)||
            placeholder.getClass().isEnum()) {
            map.put("placeholder", placeholder);
        } else if (isListOfFile(placeholder)) {
            for(int i = 0; i< getListSize(placeholder); i++) {
                map.put("placeholder", placeholder);
            }
        }
        else {
          map.put("placeholder", JSON.serialize(placeholder));
        }
    }
    if (validationtype != null) {
        if (isFileTypeOrListOfFiles(validationtype)) {
            fileTypeFound = true;
        }

        if (validationtype.getClass().equals(java.io.File.class) ||
            validationtype.getClass().equals(Integer.class) ||
            validationtype.getClass().equals(String.class) ||
            validationtype.getClass().equals(java.net.URI.class)||
            validationtype.getClass().isEnum()) {
            map.put("validationtype", validationtype);
        } else if (isListOfFile(validationtype)) {
            for(int i = 0; i< getListSize(validationtype); i++) {
                map.put("validationtype", validationtype);
            }
        }
        else {
          map.put("validationtype", JSON.serialize(validationtype));
        }
    }
    if (validationCustomRegex != null) {
        if (isFileTypeOrListOfFiles(validationCustomRegex)) {
            fileTypeFound = true;
        }

        if (validationCustomRegex.getClass().equals(java.io.File.class) ||
            validationCustomRegex.getClass().equals(Integer.class) ||
            validationCustomRegex.getClass().equals(String.class) ||
            validationCustomRegex.getClass().equals(java.net.URI.class)||
            validationCustomRegex.getClass().isEnum()) {
            map.put("validationCustomRegex", validationCustomRegex);
        } else if (isListOfFile(validationCustomRegex)) {
            for(int i = 0; i< getListSize(validationCustomRegex); i++) {
                map.put("validationCustomRegex", validationCustomRegex);
            }
        }
        else {
          map.put("validationCustomRegex", JSON.serialize(validationCustomRegex));
        }
    }
    if (validationCustomRegexMessage != null) {
        if (isFileTypeOrListOfFiles(validationCustomRegexMessage)) {
            fileTypeFound = true;
        }

        if (validationCustomRegexMessage.getClass().equals(java.io.File.class) ||
            validationCustomRegexMessage.getClass().equals(Integer.class) ||
            validationCustomRegexMessage.getClass().equals(String.class) ||
            validationCustomRegexMessage.getClass().equals(java.net.URI.class)||
            validationCustomRegexMessage.getClass().isEnum()) {
            map.put("validationCustomRegexMessage", validationCustomRegexMessage);
        } else if (isListOfFile(validationCustomRegexMessage)) {
            for(int i = 0; i< getListSize(validationCustomRegexMessage); i++) {
                map.put("validationCustomRegexMessage", validationCustomRegexMessage);
            }
        }
        else {
          map.put("validationCustomRegexMessage", JSON.serialize(validationCustomRegexMessage));
        }
    }
    if (dateFormat != null) {
        if (isFileTypeOrListOfFiles(dateFormat)) {
            fileTypeFound = true;
        }

        if (dateFormat.getClass().equals(java.io.File.class) ||
            dateFormat.getClass().equals(Integer.class) ||
            dateFormat.getClass().equals(String.class) ||
            dateFormat.getClass().equals(java.net.URI.class)||
            dateFormat.getClass().isEnum()) {
            map.put("dateFormat", dateFormat);
        } else if (isListOfFile(dateFormat)) {
            for(int i = 0; i< getListSize(dateFormat); i++) {
                map.put("dateFormat", dateFormat);
            }
        }
        else {
          map.put("dateFormat", JSON.serialize(dateFormat));
        }
    }
    if (timeFormat != null) {
        if (isFileTypeOrListOfFiles(timeFormat)) {
            fileTypeFound = true;
        }

        if (timeFormat.getClass().equals(java.io.File.class) ||
            timeFormat.getClass().equals(Integer.class) ||
            timeFormat.getClass().equals(String.class) ||
            timeFormat.getClass().equals(java.net.URI.class)||
            timeFormat.getClass().isEnum()) {
            map.put("timeFormat", timeFormat);
        } else if (isListOfFile(timeFormat)) {
            for(int i = 0; i< getListSize(timeFormat); i++) {
                map.put("timeFormat", timeFormat);
            }
        }
        else {
          map.put("timeFormat", JSON.serialize(timeFormat));
        }
    }
    if (imageInfo != null) {
        if (isFileTypeOrListOfFiles(imageInfo)) {
            fileTypeFound = true;
        }

        if (imageInfo.getClass().equals(java.io.File.class) ||
            imageInfo.getClass().equals(Integer.class) ||
            imageInfo.getClass().equals(String.class) ||
            imageInfo.getClass().equals(java.net.URI.class)||
            imageInfo.getClass().isEnum()) {
            map.put("imageInfo", imageInfo);
        } else if (isListOfFile(imageInfo)) {
            for(int i = 0; i< getListSize(imageInfo); i++) {
                map.put("imageInfo", imageInfo);
            }
        }
        else {
          map.put("imageInfo", JSON.serialize(imageInfo));
        }
    }
    if (attachmentInfo != null) {
        if (isFileTypeOrListOfFiles(attachmentInfo)) {
            fileTypeFound = true;
        }

        if (attachmentInfo.getClass().equals(java.io.File.class) ||
            attachmentInfo.getClass().equals(Integer.class) ||
            attachmentInfo.getClass().equals(String.class) ||
            attachmentInfo.getClass().equals(java.net.URI.class)||
            attachmentInfo.getClass().isEnum()) {
            map.put("attachmentInfo", attachmentInfo);
        } else if (isListOfFile(attachmentInfo)) {
            for(int i = 0; i< getListSize(attachmentInfo); i++) {
                map.put("attachmentInfo", attachmentInfo);
            }
        }
        else {
          map.put("attachmentInfo", JSON.serialize(attachmentInfo));
        }
    }
    if (editableDateFieldSettings != null) {
        if (isFileTypeOrListOfFiles(editableDateFieldSettings)) {
            fileTypeFound = true;
        }

        if (editableDateFieldSettings.getClass().equals(java.io.File.class) ||
            editableDateFieldSettings.getClass().equals(Integer.class) ||
            editableDateFieldSettings.getClass().equals(String.class) ||
            editableDateFieldSettings.getClass().equals(java.net.URI.class)||
            editableDateFieldSettings.getClass().isEnum()) {
            map.put("editableDateFieldSettings", editableDateFieldSettings);
        } else if (isListOfFile(editableDateFieldSettings)) {
            for(int i = 0; i< getListSize(editableDateFieldSettings); i++) {
                map.put("editableDateFieldSettings", editableDateFieldSettings);
            }
        }
        else {
          map.put("editableDateFieldSettings", JSON.serialize(editableDateFieldSettings));
        }
    }
    if (dropdownOptions != null) {
        if (isFileTypeOrListOfFiles(dropdownOptions)) {
            fileTypeFound = true;
        }

        if (dropdownOptions.getClass().equals(java.io.File.class) ||
            dropdownOptions.getClass().equals(Integer.class) ||
            dropdownOptions.getClass().equals(String.class) ||
            dropdownOptions.getClass().equals(java.net.URI.class)||
            dropdownOptions.getClass().isEnum()) {
            map.put("dropdownOptions", dropdownOptions);
        } else if (isListOfFile(dropdownOptions)) {
            for(int i = 0; i< getListSize(dropdownOptions); i++) {
                map.put("dropdownOptions", dropdownOptions);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : dropdownOptions) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("dropdownOptions", objectList);
        }
    }
    if (bounds != null) {
        if (isFileTypeOrListOfFiles(bounds)) {
            fileTypeFound = true;
        }

        if (bounds.getClass().equals(java.io.File.class) ||
            bounds.getClass().equals(Integer.class) ||
            bounds.getClass().equals(String.class) ||
            bounds.getClass().equals(java.net.URI.class)||
            bounds.getClass().isEnum()) {
            map.put("bounds", bounds);
        } else if (isListOfFile(bounds)) {
            for(int i = 0; i< getListSize(bounds); i++) {
                map.put("bounds", bounds);
            }
        }
        else {
          map.put("bounds", JSON.serialize(bounds));
        }
    }
    if (pageNumber != null) {
        if (isFileTypeOrListOfFiles(pageNumber)) {
            fileTypeFound = true;
        }

        if (pageNumber.getClass().equals(java.io.File.class) ||
            pageNumber.getClass().equals(Integer.class) ||
            pageNumber.getClass().equals(String.class) ||
            pageNumber.getClass().equals(java.net.URI.class)||
            pageNumber.getClass().isEnum()) {
            map.put("pageNumber", pageNumber);
        } else if (isListOfFile(pageNumber)) {
            for(int i = 0; i< getListSize(pageNumber); i++) {
                map.put("pageNumber", pageNumber);
            }
        }
        else {
          map.put("pageNumber", JSON.serialize(pageNumber));
        }
    }
    if (conditionalRules != null) {
        if (isFileTypeOrListOfFiles(conditionalRules)) {
            fileTypeFound = true;
        }

        if (conditionalRules.getClass().equals(java.io.File.class) ||
            conditionalRules.getClass().equals(Integer.class) ||
            conditionalRules.getClass().equals(String.class) ||
            conditionalRules.getClass().equals(java.net.URI.class)||
            conditionalRules.getClass().isEnum()) {
            map.put("conditionalRules", conditionalRules);
        } else if (isListOfFile(conditionalRules)) {
            for(int i = 0; i< getListSize(conditionalRules); i++) {
                map.put("conditionalRules", conditionalRules);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : conditionalRules) {
            if(item instanceof URI || item instanceof String || item instanceof Integer) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("conditionalRules", objectList);
        }
    }
    if (dataSyncTag != null) {
        if (isFileTypeOrListOfFiles(dataSyncTag)) {
            fileTypeFound = true;
        }

        if (dataSyncTag.getClass().equals(java.io.File.class) ||
            dataSyncTag.getClass().equals(Integer.class) ||
            dataSyncTag.getClass().equals(String.class) ||
            dataSyncTag.getClass().equals(java.net.URI.class)||
            dataSyncTag.getClass().isEnum()) {
            map.put("dataSyncTag", dataSyncTag);
        } else if (isListOfFile(dataSyncTag)) {
            for(int i = 0; i< getListSize(dataSyncTag); i++) {
                map.put("dataSyncTag", dataSyncTag);
            }
        }
        else {
          map.put("dataSyncTag", JSON.serialize(dataSyncTag));
        }
    }
    if (textAlign != null) {
        if (isFileTypeOrListOfFiles(textAlign)) {
            fileTypeFound = true;
        }

        if (textAlign.getClass().equals(java.io.File.class) ||
            textAlign.getClass().equals(Integer.class) ||
            textAlign.getClass().equals(String.class) ||
            textAlign.getClass().equals(java.net.URI.class)||
            textAlign.getClass().isEnum()) {
            map.put("textAlign", textAlign);
        } else if (isListOfFile(textAlign)) {
            for(int i = 0; i< getListSize(textAlign); i++) {
                map.put("textAlign", textAlign);
            }
        }
        else {
          map.put("textAlign", JSON.serialize(textAlign));
        }
    }
    if (textDirection != null) {
        if (isFileTypeOrListOfFiles(textDirection)) {
            fileTypeFound = true;
        }

        if (textDirection.getClass().equals(java.io.File.class) ||
            textDirection.getClass().equals(Integer.class) ||
            textDirection.getClass().equals(String.class) ||
            textDirection.getClass().equals(java.net.URI.class)||
            textDirection.getClass().isEnum()) {
            map.put("textDirection", textDirection);
        } else if (isListOfFile(textDirection)) {
            for(int i = 0; i< getListSize(textDirection); i++) {
                map.put("textDirection", textDirection);
            }
        }
        else {
          map.put("textDirection", JSON.serialize(textDirection));
        }
    }
    if (characterSpacing != null) {
        if (isFileTypeOrListOfFiles(characterSpacing)) {
            fileTypeFound = true;
        }

        if (characterSpacing.getClass().equals(java.io.File.class) ||
            characterSpacing.getClass().equals(Integer.class) ||
            characterSpacing.getClass().equals(String.class) ||
            characterSpacing.getClass().equals(java.net.URI.class)||
            characterSpacing.getClass().isEnum()) {
            map.put("characterSpacing", characterSpacing);
        } else if (isListOfFile(characterSpacing)) {
            for(int i = 0; i< getListSize(characterSpacing); i++) {
                map.put("characterSpacing", characterSpacing);
            }
        }
        else {
          map.put("characterSpacing", JSON.serialize(characterSpacing));
        }
    }
    if (characterLimit != null) {
        if (isFileTypeOrListOfFiles(characterLimit)) {
            fileTypeFound = true;
        }

        if (characterLimit.getClass().equals(java.io.File.class) ||
            characterLimit.getClass().equals(Integer.class) ||
            characterLimit.getClass().equals(String.class) ||
            characterLimit.getClass().equals(java.net.URI.class)||
            characterLimit.getClass().isEnum()) {
            map.put("characterLimit", characterLimit);
        } else if (isListOfFile(characterLimit)) {
            for(int i = 0; i< getListSize(characterLimit); i++) {
                map.put("characterLimit", characterLimit);
            }
        }
        else {
          map.put("characterLimit", JSON.serialize(characterLimit));
        }
    }
    if (hyperlinkText != null) {
        if (isFileTypeOrListOfFiles(hyperlinkText)) {
            fileTypeFound = true;
        }

        if (hyperlinkText.getClass().equals(java.io.File.class) ||
            hyperlinkText.getClass().equals(Integer.class) ||
            hyperlinkText.getClass().equals(String.class) ||
            hyperlinkText.getClass().equals(java.net.URI.class)||
            hyperlinkText.getClass().isEnum()) {
            map.put("hyperlinkText", hyperlinkText);
        } else if (isListOfFile(hyperlinkText)) {
            for(int i = 0; i< getListSize(hyperlinkText); i++) {
                map.put("hyperlinkText", hyperlinkText);
            }
        }
        else {
          map.put("hyperlinkText", JSON.serialize(hyperlinkText));
        }
    }
    if (backgroundHexColor != null) {
        if (isFileTypeOrListOfFiles(backgroundHexColor)) {
            fileTypeFound = true;
        }

        if (backgroundHexColor.getClass().equals(java.io.File.class) ||
            backgroundHexColor.getClass().equals(Integer.class) ||
            backgroundHexColor.getClass().equals(String.class) ||
            backgroundHexColor.getClass().equals(java.net.URI.class)||
            backgroundHexColor.getClass().isEnum()) {
            map.put("backgroundHexColor", backgroundHexColor);
        } else if (isListOfFile(backgroundHexColor)) {
            for(int i = 0; i< getListSize(backgroundHexColor); i++) {
                map.put("backgroundHexColor", backgroundHexColor);
            }
        }
        else {
          map.put("backgroundHexColor", JSON.serialize(backgroundHexColor));
        }
    }
    if (tabIndex != null) {
        if (isFileTypeOrListOfFiles(tabIndex)) {
            fileTypeFound = true;
        }

        if (tabIndex.getClass().equals(java.io.File.class) ||
            tabIndex.getClass().equals(Integer.class) ||
            tabIndex.getClass().equals(String.class) ||
            tabIndex.getClass().equals(java.net.URI.class)||
            tabIndex.getClass().isEnum()) {
            map.put("tabIndex", tabIndex);
        } else if (isListOfFile(tabIndex)) {
            for(int i = 0; i< getListSize(tabIndex); i++) {
                map.put("tabIndex", tabIndex);
            }
        }
        else {
          map.put("tabIndex", JSON.serialize(tabIndex));
        }
    }
    if (formulaFieldSettings != null) {
        if (isFileTypeOrListOfFiles(formulaFieldSettings)) {
            fileTypeFound = true;
        }

        if (formulaFieldSettings.getClass().equals(java.io.File.class) ||
            formulaFieldSettings.getClass().equals(Integer.class) ||
            formulaFieldSettings.getClass().equals(String.class) ||
            formulaFieldSettings.getClass().equals(java.net.URI.class)||
            formulaFieldSettings.getClass().isEnum()) {
            map.put("formulaFieldSettings", formulaFieldSettings);
        } else if (isListOfFile(formulaFieldSettings)) {
            for(int i = 0; i< getListSize(formulaFieldSettings); i++) {
                map.put("formulaFieldSettings", formulaFieldSettings);
            }
        }
        else {
          map.put("formulaFieldSettings", JSON.serialize(formulaFieldSettings));
        }
    }
    if (resizeOption != null) {
        if (isFileTypeOrListOfFiles(resizeOption)) {
            fileTypeFound = true;
        }

        if (resizeOption.getClass().equals(java.io.File.class) ||
            resizeOption.getClass().equals(Integer.class) ||
            resizeOption.getClass().equals(String.class) ||
            resizeOption.getClass().equals(java.net.URI.class)||
            resizeOption.getClass().isEnum()) {
            map.put("resizeOption", resizeOption);
        } else if (isListOfFile(resizeOption)) {
            for(int i = 0; i< getListSize(resizeOption); i++) {
                map.put("resizeOption", resizeOption);
            }
        }
        else {
          map.put("resizeOption", JSON.serialize(resizeOption));
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fieldType");
    openapiFields.add("type");
    openapiFields.add("value");
    openapiFields.add("font");
    openapiFields.add("isRequired");
    openapiFields.add("isReadOnly");
    openapiFields.add("lineHeight");
    openapiFields.add("fontSize");
    openapiFields.add("fontHexColor");
    openapiFields.add("isUnderLineFont");
    openapiFields.add("isItalicFont");
    openapiFields.add("isBoldFont");
    openapiFields.add("groupName");
    openapiFields.add("label");
    openapiFields.add("placeholder");
    openapiFields.add("validationtype");
    openapiFields.add("validationCustomRegex");
    openapiFields.add("validationCustomRegexMessage");
    openapiFields.add("dateFormat");
    openapiFields.add("timeFormat");
    openapiFields.add("imageInfo");
    openapiFields.add("attachmentInfo");
    openapiFields.add("editableDateFieldSettings");
    openapiFields.add("dropdownOptions");
    openapiFields.add("bounds");
    openapiFields.add("pageNumber");
    openapiFields.add("conditionalRules");
    openapiFields.add("dataSyncTag");
    openapiFields.add("textAlign");
    openapiFields.add("textDirection");
    openapiFields.add("characterSpacing");
    openapiFields.add("characterLimit");
    openapiFields.add("hyperlinkText");
    openapiFields.add("backgroundHexColor");
    openapiFields.add("tabIndex");
    openapiFields.add("formulaFieldSettings");
    openapiFields.add("resizeOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TemplateFormFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TemplateFormFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TemplateFormFields is not found in the empty JSON string", TemplateFormFields.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("fieldType") != null && !jsonObj.get("fieldType").isJsonNull()) && !jsonObj.get("fieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("font") != null && !jsonObj.get("font").isJsonNull()) && !jsonObj.get("font").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `font` to be a primitive type in the JSON string but got `%s`", jsonObj.get("font").toString()));
      }
      if ((jsonObj.get("fontHexColor") != null && !jsonObj.get("fontHexColor").isJsonNull()) && !jsonObj.get("fontHexColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fontHexColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fontHexColor").toString()));
      }
      if ((jsonObj.get("groupName") != null && !jsonObj.get("groupName").isJsonNull()) && !jsonObj.get("groupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupName").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("placeholder") != null && !jsonObj.get("placeholder").isJsonNull()) && !jsonObj.get("placeholder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeholder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeholder").toString()));
      }
      if ((jsonObj.get("validationtype") != null && !jsonObj.get("validationtype").isJsonNull()) && !jsonObj.get("validationtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationtype").toString()));
      }
      // validate the optional field `validationtype`
      if (jsonObj.get("validationtype") != null && !jsonObj.get("validationtype").isJsonNull()) {
        ValidationtypeEnum.validateJsonElement(jsonObj.get("validationtype"));
      }
      if ((jsonObj.get("validationCustomRegex") != null && !jsonObj.get("validationCustomRegex").isJsonNull()) && !jsonObj.get("validationCustomRegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationCustomRegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationCustomRegex").toString()));
      }
      if ((jsonObj.get("validationCustomRegexMessage") != null && !jsonObj.get("validationCustomRegexMessage").isJsonNull()) && !jsonObj.get("validationCustomRegexMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationCustomRegexMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationCustomRegexMessage").toString()));
      }
      if ((jsonObj.get("dateFormat") != null && !jsonObj.get("dateFormat").isJsonNull()) && !jsonObj.get("dateFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFormat").toString()));
      }
      if ((jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) && !jsonObj.get("timeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFormat").toString()));
      }
      // validate the optional field `imageInfo`
      if (jsonObj.get("imageInfo") != null && !jsonObj.get("imageInfo").isJsonNull()) {
        ImageInfo.validateJsonElement(jsonObj.get("imageInfo"));
      }
      // validate the optional field `attachmentInfo`
      if (jsonObj.get("attachmentInfo") != null && !jsonObj.get("attachmentInfo").isJsonNull()) {
        AttachmentInfo.validateJsonElement(jsonObj.get("attachmentInfo"));
      }
      // validate the optional field `editableDateFieldSettings`
      if (jsonObj.get("editableDateFieldSettings") != null && !jsonObj.get("editableDateFieldSettings").isJsonNull()) {
        EditableDateFieldSettings.validateJsonElement(jsonObj.get("editableDateFieldSettings"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dropdownOptions") != null && !jsonObj.get("dropdownOptions").isJsonNull() && !jsonObj.get("dropdownOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dropdownOptions` to be an array in the JSON string but got `%s`", jsonObj.get("dropdownOptions").toString()));
      }
      // validate the optional field `bounds`
      if (jsonObj.get("bounds") != null && !jsonObj.get("bounds").isJsonNull()) {
        Rectangle.validateJsonElement(jsonObj.get("bounds"));
      }
      if (jsonObj.get("conditionalRules") != null && !jsonObj.get("conditionalRules").isJsonNull()) {
        JsonArray jsonArrayconditionalRules = jsonObj.getAsJsonArray("conditionalRules");
        if (jsonArrayconditionalRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditionalRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditionalRules` to be an array in the JSON string but got `%s`", jsonObj.get("conditionalRules").toString()));
          }

          // validate the optional field `conditionalRules` (array)
          for (int i = 0; i < jsonArrayconditionalRules.size(); i++) {
            ConditionalRule.validateJsonElement(jsonArrayconditionalRules.get(i));
          };
        }
      }
      if ((jsonObj.get("dataSyncTag") != null && !jsonObj.get("dataSyncTag").isJsonNull()) && !jsonObj.get("dataSyncTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSyncTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSyncTag").toString()));
      }
      if ((jsonObj.get("textAlign") != null && !jsonObj.get("textAlign").isJsonNull()) && !jsonObj.get("textAlign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textAlign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textAlign").toString()));
      }
      // validate the optional field `textAlign`
      if (jsonObj.get("textAlign") != null && !jsonObj.get("textAlign").isJsonNull()) {
        TextAlignEnum.validateJsonElement(jsonObj.get("textAlign"));
      }
      if ((jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) && !jsonObj.get("textDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textDirection").toString()));
      }
      // validate the optional field `textDirection`
      if (jsonObj.get("textDirection") != null && !jsonObj.get("textDirection").isJsonNull()) {
        TextDirectionEnum.validateJsonElement(jsonObj.get("textDirection"));
      }
      if ((jsonObj.get("hyperlinkText") != null && !jsonObj.get("hyperlinkText").isJsonNull()) && !jsonObj.get("hyperlinkText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperlinkText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperlinkText").toString()));
      }
      if ((jsonObj.get("backgroundHexColor") != null && !jsonObj.get("backgroundHexColor").isJsonNull()) && !jsonObj.get("backgroundHexColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backgroundHexColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backgroundHexColor").toString()));
      }
      // validate the optional field `formulaFieldSettings`
      if (jsonObj.get("formulaFieldSettings") != null && !jsonObj.get("formulaFieldSettings").isJsonNull()) {
        FormulaFieldSettings.validateJsonElement(jsonObj.get("formulaFieldSettings"));
      }
      if ((jsonObj.get("resizeOption") != null && !jsonObj.get("resizeOption").isJsonNull()) && !jsonObj.get("resizeOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeOption").toString()));
      }
      // validate the optional field `resizeOption`
      if (jsonObj.get("resizeOption") != null && !jsonObj.get("resizeOption").isJsonNull()) {
        ResizeOptionEnum.validateJsonElement(jsonObj.get("resizeOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TemplateFormFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TemplateFormFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TemplateFormFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TemplateFormFields.class));

       return (TypeAdapter<T>) new TypeAdapter<TemplateFormFields>() {
           @Override
           public void write(JsonWriter out, TemplateFormFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TemplateFormFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TemplateFormFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TemplateFormFields
   * @throws IOException if the JSON string is invalid with respect to TemplateFormFields
   */
  public static TemplateFormFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TemplateFormFields.class);
  }

  /**
   * Convert an instance of TemplateFormFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

