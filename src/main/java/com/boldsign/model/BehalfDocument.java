/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.model;

import java.util.Objects;
import com.boldsign.model.BehalfOf;
import com.boldsign.model.DocumentCcDetails;
import com.boldsign.model.DocumentSenderDetail;
import com.boldsign.model.DocumentSignerDetails;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.lang.reflect.Field;
import java.net.URI;

import com.boldsign.JSON;
import com.boldsign.ApiException;

/**
 * BehalfDocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0")
public class BehalfDocument {
  public static final String SERIALIZED_NAME_BEHALF_OF = "behalfOf";
  @SerializedName(SERIALIZED_NAME_BEHALF_OF)
  private BehalfOf behalfOf;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "documentId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_SENDER_DETAIL = "senderDetail";
  @SerializedName(SERIALIZED_NAME_SENDER_DETAIL)
  private DocumentSenderDetail senderDetail;

  public static final String SERIALIZED_NAME_CC_DETAILS = "ccDetails";
  @SerializedName(SERIALIZED_NAME_CC_DETAILS)
  private List<DocumentCcDetails> ccDetails;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Long createdDate;

  public static final String SERIALIZED_NAME_ACTIVITY_DATE = "activityDate";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DATE)
  private Long activityDate;

  public static final String SERIALIZED_NAME_ACTIVITY_BY = "activityBy";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_BY)
  private String activityBy;

  public static final String SERIALIZED_NAME_MESSAGE_TITLE = "messageTitle";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TITLE)
  private String messageTitle;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    DECLINED("Declined"),
    
    EXPIRED("Expired"),
    
    REVOKED("Revoked"),
    
    DRAFT("Draft");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SIGNER_DETAILS = "signerDetails";
  @SerializedName(SERIALIZED_NAME_SIGNER_DETAILS)
  private List<DocumentSignerDetails> signerDetails;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private Long expiryDate;

  public static final String SERIALIZED_NAME_ENABLE_SIGNING_ORDER = "enableSigningOrder";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIGNING_ORDER)
  private Boolean enableSigningOrder;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels;

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private Long cursor;

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public BehalfDocument() {
  }

  public BehalfDocument behalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
    return this;
  }

  /**
   * Get behalfOf
   * @return behalfOf
   */
  @javax.annotation.Nullable
  public BehalfOf getBehalfOf() {
    return behalfOf;
  }

  public void setBehalfOf(BehalfOf behalfOf) {
    this.behalfOf = behalfOf;
  }


  public BehalfDocument documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Get documentId
   * @return documentId
   */
  @javax.annotation.Nullable
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public BehalfDocument senderDetail(DocumentSenderDetail senderDetail) {
    this.senderDetail = senderDetail;
    return this;
  }

  /**
   * Get senderDetail
   * @return senderDetail
   */
  @javax.annotation.Nullable
  public DocumentSenderDetail getSenderDetail() {
    return senderDetail;
  }

  public void setSenderDetail(DocumentSenderDetail senderDetail) {
    this.senderDetail = senderDetail;
  }


  public BehalfDocument ccDetails(List<DocumentCcDetails> ccDetails) {
    this.ccDetails = ccDetails;
    return this;
  }

  public BehalfDocument addCcDetailsItem(DocumentCcDetails ccDetailsItem) {
    if (this.ccDetails == null) {
      this.ccDetails = new ArrayList<>();
    }
    this.ccDetails.add(ccDetailsItem);
    return this;
  }

  /**
   * Get ccDetails
   * @return ccDetails
   */
  @javax.annotation.Nullable
  public List<DocumentCcDetails> getCcDetails() {
    return ccDetails;
  }

  public void setCcDetails(List<DocumentCcDetails> ccDetails) {
    this.ccDetails = ccDetails;
  }


  public BehalfDocument createdDate(Long createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Long getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public BehalfDocument activityDate(Long activityDate) {
    this.activityDate = activityDate;
    return this;
  }

  /**
   * Get activityDate
   * @return activityDate
   */
  @javax.annotation.Nullable
  public Long getActivityDate() {
    return activityDate;
  }

  public void setActivityDate(Long activityDate) {
    this.activityDate = activityDate;
  }


  public BehalfDocument activityBy(String activityBy) {
    this.activityBy = activityBy;
    return this;
  }

  /**
   * Get activityBy
   * @return activityBy
   */
  @javax.annotation.Nullable
  public String getActivityBy() {
    return activityBy;
  }

  public void setActivityBy(String activityBy) {
    this.activityBy = activityBy;
  }


  public BehalfDocument messageTitle(String messageTitle) {
    this.messageTitle = messageTitle;
    return this;
  }

  /**
   * Get messageTitle
   * @return messageTitle
   */
  @javax.annotation.Nullable
  public String getMessageTitle() {
    return messageTitle;
  }

  public void setMessageTitle(String messageTitle) {
    this.messageTitle = messageTitle;
  }


  public BehalfDocument status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BehalfDocument signerDetails(List<DocumentSignerDetails> signerDetails) {
    this.signerDetails = signerDetails;
    return this;
  }

  public BehalfDocument addSignerDetailsItem(DocumentSignerDetails signerDetailsItem) {
    if (this.signerDetails == null) {
      this.signerDetails = new ArrayList<>();
    }
    this.signerDetails.add(signerDetailsItem);
    return this;
  }

  /**
   * Get signerDetails
   * @return signerDetails
   */
  @javax.annotation.Nullable
  public List<DocumentSignerDetails> getSignerDetails() {
    return signerDetails;
  }

  public void setSignerDetails(List<DocumentSignerDetails> signerDetails) {
    this.signerDetails = signerDetails;
  }


  public BehalfDocument expiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Get expiryDate
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public Long getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(Long expiryDate) {
    this.expiryDate = expiryDate;
  }


  public BehalfDocument enableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
    return this;
  }

  /**
   * Get enableSigningOrder
   * @return enableSigningOrder
   */
  @javax.annotation.Nullable
  public Boolean getEnableSigningOrder() {
    return enableSigningOrder;
  }

  public void setEnableSigningOrder(Boolean enableSigningOrder) {
    this.enableSigningOrder = enableSigningOrder;
  }


  public BehalfDocument isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public BehalfDocument labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public BehalfDocument addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public BehalfDocument cursor(Long cursor) {
    this.cursor = cursor;
    return this;
  }

  /**
   * Get cursor
   * @return cursor
   */
  @javax.annotation.Nullable
  public Long getCursor() {
    return cursor;
  }

  public void setCursor(Long cursor) {
    this.cursor = cursor;
  }


  public BehalfDocument brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Get brandId
   * @return brandId
   */
  @javax.annotation.Nullable
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BehalfDocument behalfDocument = (BehalfDocument) o;
    return Objects.equals(this.behalfOf, behalfDocument.behalfOf) &&
        Objects.equals(this.documentId, behalfDocument.documentId) &&
        Objects.equals(this.senderDetail, behalfDocument.senderDetail) &&
        Objects.equals(this.ccDetails, behalfDocument.ccDetails) &&
        Objects.equals(this.createdDate, behalfDocument.createdDate) &&
        Objects.equals(this.activityDate, behalfDocument.activityDate) &&
        Objects.equals(this.activityBy, behalfDocument.activityBy) &&
        Objects.equals(this.messageTitle, behalfDocument.messageTitle) &&
        Objects.equals(this.status, behalfDocument.status) &&
        Objects.equals(this.signerDetails, behalfDocument.signerDetails) &&
        Objects.equals(this.expiryDate, behalfDocument.expiryDate) &&
        Objects.equals(this.enableSigningOrder, behalfDocument.enableSigningOrder) &&
        Objects.equals(this.isDeleted, behalfDocument.isDeleted) &&
        Objects.equals(this.labels, behalfDocument.labels) &&
        Objects.equals(this.cursor, behalfDocument.cursor) &&
        Objects.equals(this.brandId, behalfDocument.brandId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(behalfOf, documentId, senderDetail, ccDetails, createdDate, activityDate, activityBy, messageTitle, status, signerDetails, expiryDate, enableSigningOrder, isDeleted, labels, cursor, brandId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BehalfDocument {\n");
    sb.append("    behalfOf: ").append(toIndentedString(behalfOf)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    senderDetail: ").append(toIndentedString(senderDetail)).append("\n");
    sb.append("    ccDetails: ").append(toIndentedString(ccDetails)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    activityDate: ").append(toIndentedString(activityDate)).append("\n");
    sb.append("    activityBy: ").append(toIndentedString(activityBy)).append("\n");
    sb.append("    messageTitle: ").append(toIndentedString(messageTitle)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    signerDetails: ").append(toIndentedString(signerDetails)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    enableSigningOrder: ").append(toIndentedString(enableSigningOrder)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("}");
    return sb.toString();
  }
  public Map<String, Object> createFormData() throws ApiException {
    Map<String, Object> map = new HashMap<>();
    boolean fileTypeFound = false;
    try {
    if (behalfOf != null) {
        if (isFileTypeOrListOfFiles(behalfOf)) {
            fileTypeFound = true;
        }

        if (behalfOf.getClass().equals(java.io.File.class) ||
            behalfOf.getClass().equals(Integer.class) ||
            behalfOf.getClass().equals(String.class) ||
            behalfOf.getClass().isEnum()) {
            map.put("behalfOf", behalfOf);
        } else if (isListOfFile(behalfOf)) {
            for(int i = 0; i< getListSize(behalfOf); i++) {
                map.put("behalfOf", behalfOf);
            }
        }
        else {
          map.put("behalfOf", behalfOf);
        }
    }
    if (documentId != null) {
        if (isFileTypeOrListOfFiles(documentId)) {
            fileTypeFound = true;
        }

        if (documentId.getClass().equals(java.io.File.class) ||
            documentId.getClass().equals(Integer.class) ||
            documentId.getClass().equals(String.class) ||
            documentId.getClass().isEnum()) {
            map.put("documentId", documentId);
        } else if (isListOfFile(documentId)) {
            for(int i = 0; i< getListSize(documentId); i++) {
                map.put("documentId", documentId);
            }
        }
        else {
          map.put("documentId", documentId);
        }
    }
    if (senderDetail != null) {
        if (isFileTypeOrListOfFiles(senderDetail)) {
            fileTypeFound = true;
        }

        if (senderDetail.getClass().equals(java.io.File.class) ||
            senderDetail.getClass().equals(Integer.class) ||
            senderDetail.getClass().equals(String.class) ||
            senderDetail.getClass().isEnum()) {
            map.put("senderDetail", senderDetail);
        } else if (isListOfFile(senderDetail)) {
            for(int i = 0; i< getListSize(senderDetail); i++) {
                map.put("senderDetail", senderDetail);
            }
        }
        else {
          map.put("senderDetail", senderDetail);
        }
    }
    if (ccDetails != null) {
        if (isFileTypeOrListOfFiles(ccDetails)) {
            fileTypeFound = true;
        }

        if (ccDetails.getClass().equals(java.io.File.class) ||
            ccDetails.getClass().equals(Integer.class) ||
            ccDetails.getClass().equals(String.class) ||
            ccDetails.getClass().isEnum()) {
            map.put("ccDetails", ccDetails);
        } else if (isListOfFile(ccDetails)) {
            for(int i = 0; i< getListSize(ccDetails); i++) {
                map.put("ccDetails", ccDetails);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : ccDetails) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("ccDetails", objectList);
        }
    }
    if (createdDate != null) {
        if (isFileTypeOrListOfFiles(createdDate)) {
            fileTypeFound = true;
        }

        if (createdDate.getClass().equals(java.io.File.class) ||
            createdDate.getClass().equals(Integer.class) ||
            createdDate.getClass().equals(String.class) ||
            createdDate.getClass().isEnum()) {
            map.put("createdDate", createdDate);
        } else if (isListOfFile(createdDate)) {
            for(int i = 0; i< getListSize(createdDate); i++) {
                map.put("createdDate", createdDate);
            }
        }
        else {
          map.put("createdDate", createdDate);
        }
    }
    if (activityDate != null) {
        if (isFileTypeOrListOfFiles(activityDate)) {
            fileTypeFound = true;
        }

        if (activityDate.getClass().equals(java.io.File.class) ||
            activityDate.getClass().equals(Integer.class) ||
            activityDate.getClass().equals(String.class) ||
            activityDate.getClass().isEnum()) {
            map.put("activityDate", activityDate);
        } else if (isListOfFile(activityDate)) {
            for(int i = 0; i< getListSize(activityDate); i++) {
                map.put("activityDate", activityDate);
            }
        }
        else {
          map.put("activityDate", activityDate);
        }
    }
    if (activityBy != null) {
        if (isFileTypeOrListOfFiles(activityBy)) {
            fileTypeFound = true;
        }

        if (activityBy.getClass().equals(java.io.File.class) ||
            activityBy.getClass().equals(Integer.class) ||
            activityBy.getClass().equals(String.class) ||
            activityBy.getClass().isEnum()) {
            map.put("activityBy", activityBy);
        } else if (isListOfFile(activityBy)) {
            for(int i = 0; i< getListSize(activityBy); i++) {
                map.put("activityBy", activityBy);
            }
        }
        else {
          map.put("activityBy", activityBy);
        }
    }
    if (messageTitle != null) {
        if (isFileTypeOrListOfFiles(messageTitle)) {
            fileTypeFound = true;
        }

        if (messageTitle.getClass().equals(java.io.File.class) ||
            messageTitle.getClass().equals(Integer.class) ||
            messageTitle.getClass().equals(String.class) ||
            messageTitle.getClass().isEnum()) {
            map.put("messageTitle", messageTitle);
        } else if (isListOfFile(messageTitle)) {
            for(int i = 0; i< getListSize(messageTitle); i++) {
                map.put("messageTitle", messageTitle);
            }
        }
        else {
          map.put("messageTitle", messageTitle);
        }
    }
    if (status != null) {
        if (isFileTypeOrListOfFiles(status)) {
            fileTypeFound = true;
        }

        if (status.getClass().equals(java.io.File.class) ||
            status.getClass().equals(Integer.class) ||
            status.getClass().equals(String.class) ||
            status.getClass().isEnum()) {
            map.put("status", status);
        } else if (isListOfFile(status)) {
            for(int i = 0; i< getListSize(status); i++) {
                map.put("status", status);
            }
        }
        else {
          map.put("status", status);
        }
    }
    if (signerDetails != null) {
        if (isFileTypeOrListOfFiles(signerDetails)) {
            fileTypeFound = true;
        }

        if (signerDetails.getClass().equals(java.io.File.class) ||
            signerDetails.getClass().equals(Integer.class) ||
            signerDetails.getClass().equals(String.class) ||
            signerDetails.getClass().isEnum()) {
            map.put("signerDetails", signerDetails);
        } else if (isListOfFile(signerDetails)) {
            for(int i = 0; i< getListSize(signerDetails); i++) {
                map.put("signerDetails", signerDetails);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : signerDetails) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("signerDetails", objectList);
        }
    }
    if (expiryDate != null) {
        if (isFileTypeOrListOfFiles(expiryDate)) {
            fileTypeFound = true;
        }

        if (expiryDate.getClass().equals(java.io.File.class) ||
            expiryDate.getClass().equals(Integer.class) ||
            expiryDate.getClass().equals(String.class) ||
            expiryDate.getClass().isEnum()) {
            map.put("expiryDate", expiryDate);
        } else if (isListOfFile(expiryDate)) {
            for(int i = 0; i< getListSize(expiryDate); i++) {
                map.put("expiryDate", expiryDate);
            }
        }
        else {
          map.put("expiryDate", expiryDate);
        }
    }
    if (enableSigningOrder != null) {
        if (isFileTypeOrListOfFiles(enableSigningOrder)) {
            fileTypeFound = true;
        }

        if (enableSigningOrder.getClass().equals(java.io.File.class) ||
            enableSigningOrder.getClass().equals(Integer.class) ||
            enableSigningOrder.getClass().equals(String.class) ||
            enableSigningOrder.getClass().isEnum()) {
            map.put("enableSigningOrder", enableSigningOrder);
        } else if (isListOfFile(enableSigningOrder)) {
            for(int i = 0; i< getListSize(enableSigningOrder); i++) {
                map.put("enableSigningOrder", enableSigningOrder);
            }
        }
        else {
          map.put("enableSigningOrder", enableSigningOrder);
        }
    }
    if (isDeleted != null) {
        if (isFileTypeOrListOfFiles(isDeleted)) {
            fileTypeFound = true;
        }

        if (isDeleted.getClass().equals(java.io.File.class) ||
            isDeleted.getClass().equals(Integer.class) ||
            isDeleted.getClass().equals(String.class) ||
            isDeleted.getClass().isEnum()) {
            map.put("isDeleted", isDeleted);
        } else if (isListOfFile(isDeleted)) {
            for(int i = 0; i< getListSize(isDeleted); i++) {
                map.put("isDeleted", isDeleted);
            }
        }
        else {
          map.put("isDeleted", isDeleted);
        }
    }
    if (labels != null) {
        if (isFileTypeOrListOfFiles(labels)) {
            fileTypeFound = true;
        }

        if (labels.getClass().equals(java.io.File.class) ||
            labels.getClass().equals(Integer.class) ||
            labels.getClass().equals(String.class) ||
            labels.getClass().isEnum()) {
            map.put("labels", labels);
        } else if (isListOfFile(labels)) {
            for(int i = 0; i< getListSize(labels); i++) {
                map.put("labels", labels);
            }
        }
        else {
          List<String> objectList = new ArrayList<String>();
          for(Object item : labels) {
            if(item instanceof URI) {
              objectList.add(item.toString());
            }
            else {
              String objectData = JSON.serialize(item);
              objectList.add(objectData);
            }
          }
          map.put("labels", objectList);
        }
    }
    if (cursor != null) {
        if (isFileTypeOrListOfFiles(cursor)) {
            fileTypeFound = true;
        }

        if (cursor.getClass().equals(java.io.File.class) ||
            cursor.getClass().equals(Integer.class) ||
            cursor.getClass().equals(String.class) ||
            cursor.getClass().isEnum()) {
            map.put("cursor", cursor);
        } else if (isListOfFile(cursor)) {
            for(int i = 0; i< getListSize(cursor); i++) {
                map.put("cursor", cursor);
            }
        }
        else {
          map.put("cursor", cursor);
        }
    }
    if (brandId != null) {
        if (isFileTypeOrListOfFiles(brandId)) {
            fileTypeFound = true;
        }

        if (brandId.getClass().equals(java.io.File.class) ||
            brandId.getClass().equals(Integer.class) ||
            brandId.getClass().equals(String.class) ||
            brandId.getClass().isEnum()) {
            map.put("brandId", brandId);
        } else if (isListOfFile(brandId)) {
            for(int i = 0; i< getListSize(brandId); i++) {
                map.put("brandId", brandId);
            }
        }
        else {
          map.put("brandId", brandId);
        }
    }
    } catch (Exception e) {
        throw new ApiException(e);
    }
    return fileTypeFound ? map : new HashMap<>();
  }

  private boolean isFileTypeOrListOfFiles(Object obj) throws Exception {
    return obj.getClass().equals(java.io.File.class) || isListOfFile(obj);
  }

  private boolean isListOfFile(Object obj) throws Exception {
      return obj instanceof java.util.List && !isListEmpty(obj) && getFromList(obj, 0) instanceof java.io.File;
  }

  private boolean isListEmpty(Object obj) throws Exception {
    return (boolean) Class.forName(java.util.List.class.getName()).getMethod("isEmpty").invoke(obj);
  }

  private Object getFromList(Object obj, int index) throws Exception {
    return Class.forName(java.util.List.class.getName()).getMethod("get", int.class).invoke(obj, index);
  }

  private int getListSize(Object obj) throws Exception {
    return (int) Class.forName(java.util.List.class.getName()).getMethod("size").invoke(obj);
  }


  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("behalfOf");
    openapiFields.add("documentId");
    openapiFields.add("senderDetail");
    openapiFields.add("ccDetails");
    openapiFields.add("createdDate");
    openapiFields.add("activityDate");
    openapiFields.add("activityBy");
    openapiFields.add("messageTitle");
    openapiFields.add("status");
    openapiFields.add("signerDetails");
    openapiFields.add("expiryDate");
    openapiFields.add("enableSigningOrder");
    openapiFields.add("isDeleted");
    openapiFields.add("labels");
    openapiFields.add("cursor");
    openapiFields.add("brandId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BehalfDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BehalfDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BehalfDocument is not found in the empty JSON string", BehalfDocument.openapiRequiredFields.toString()));
        }
      }
	  //Ignored additional properties from response json. 
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `behalfOf`
      if (jsonObj.get("behalfOf") != null && !jsonObj.get("behalfOf").isJsonNull()) {
        BehalfOf.validateJsonElement(jsonObj.get("behalfOf"));
      }
      if ((jsonObj.get("documentId") != null && !jsonObj.get("documentId").isJsonNull()) && !jsonObj.get("documentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentId").toString()));
      }
      // validate the optional field `senderDetail`
      if (jsonObj.get("senderDetail") != null && !jsonObj.get("senderDetail").isJsonNull()) {
        DocumentSenderDetail.validateJsonElement(jsonObj.get("senderDetail"));
      }
      if (jsonObj.get("ccDetails") != null && !jsonObj.get("ccDetails").isJsonNull()) {
        JsonArray jsonArrayccDetails = jsonObj.getAsJsonArray("ccDetails");
        if (jsonArrayccDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ccDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ccDetails` to be an array in the JSON string but got `%s`", jsonObj.get("ccDetails").toString()));
          }

          // validate the optional field `ccDetails` (array)
          for (int i = 0; i < jsonArrayccDetails.size(); i++) {
            DocumentCcDetails.validateJsonElement(jsonArrayccDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("activityBy") != null && !jsonObj.get("activityBy").isJsonNull()) && !jsonObj.get("activityBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityBy").toString()));
      }
      if ((jsonObj.get("messageTitle") != null && !jsonObj.get("messageTitle").isJsonNull()) && !jsonObj.get("messageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageTitle").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("signerDetails") != null && !jsonObj.get("signerDetails").isJsonNull()) {
        JsonArray jsonArraysignerDetails = jsonObj.getAsJsonArray("signerDetails");
        if (jsonArraysignerDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signerDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signerDetails` to be an array in the JSON string but got `%s`", jsonObj.get("signerDetails").toString()));
          }

          // validate the optional field `signerDetails` (array)
          for (int i = 0; i < jsonArraysignerDetails.size(); i++) {
            DocumentSignerDetails.validateJsonElement(jsonArraysignerDetails.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("brandId") != null && !jsonObj.get("brandId").isJsonNull()) && !jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BehalfDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BehalfDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BehalfDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BehalfDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<BehalfDocument>() {
           @Override
           public void write(JsonWriter out, BehalfDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BehalfDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BehalfDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BehalfDocument
   * @throws IOException if the JSON string is invalid with respect to BehalfDocument
   */
  public static BehalfDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BehalfDocument.class);
  }

  /**
   * Convert an instance of BehalfDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

