/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.api;

import com.boldsign.ApiCallback;
import com.boldsign.ApiClient;
import com.boldsign.ApiException;
import com.boldsign.ApiResponse;
import com.boldsign.Configuration;
import com.boldsign.Pair;
import com.boldsign.ProgressRequestBody;
import com.boldsign.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.boldsign.model.BrandCreated;
import com.boldsign.model.BrandingMessage;
import com.boldsign.model.BrandingRecords;
import com.boldsign.model.ErrorResult;
import java.io.File;
import com.boldsign.model.ProblemDetails;
import com.boldsign.model.ViewBrandDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for brandList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call brandListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return brandListCall(_callback);

    }

    /**
     * List all the brands.
     * 
     * @return BrandingRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public BrandingRecords brandList() throws ApiException {
        ApiResponse<BrandingRecords> localVarResp = brandListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all the brands.
     * 
     * @return ApiResponse&lt;BrandingRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandingRecords> brandListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = brandListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BrandingRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the brands. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call brandListAsync(final ApiCallback<BrandingRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = brandListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BrandingRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBrand
     * @param brandName  (required)
     * @param brandLogo  (required)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandCall(String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (brandName != null) {
            localVarFormParams.put("BrandName", brandName);
        }

        if (brandLogo != null) {
            localVarFormParams.put("BrandLogo", brandLogo);
        }

        if (backgroundColor != null) {
            localVarFormParams.put("BackgroundColor", backgroundColor);
        }

        if (buttonColor != null) {
            localVarFormParams.put("ButtonColor", buttonColor);
        }

        if (buttonTextColor != null) {
            localVarFormParams.put("ButtonTextColor", buttonTextColor);
        }

        if (emailDisplayName != null) {
            localVarFormParams.put("EmailDisplayName", emailDisplayName);
        }

        if (disclaimerDescription != null) {
            localVarFormParams.put("DisclaimerDescription", disclaimerDescription);
        }

        if (disclaimerTitle != null) {
            localVarFormParams.put("DisclaimerTitle", disclaimerTitle);
        }

        if (redirectUrl != null) {
            localVarFormParams.put("RedirectUrl", redirectUrl);
        }

        if (isDefault != null) {
            localVarFormParams.put("IsDefault", isDefault);
        }

        if (canHideTagLine != null) {
            localVarFormParams.put("CanHideTagLine", canHideTagLine);
        }

        if (combineAuditTrail != null) {
            localVarFormParams.put("CombineAuditTrail", combineAuditTrail);
        }

        if (excludeAuditTrailFromEmail != null) {
            localVarFormParams.put("ExcludeAuditTrailFromEmail", excludeAuditTrailFromEmail);
        }

        if (emailSignedDocument != null) {
            localVarFormParams.put("EmailSignedDocument", emailSignedDocument);
        }

        if (documentTimeZone != null) {
            localVarFormParams.put("DocumentTimeZone", documentTimeZone);
        }

        if (showBuiltInFormFields != null) {
            localVarFormParams.put("ShowBuiltInFormFields", showBuiltInFormFields);
        }

        if (allowCustomFieldCreation != null) {
            localVarFormParams.put("AllowCustomFieldCreation", allowCustomFieldCreation);
        }

        if (showSharedCustomFields != null) {
            localVarFormParams.put("ShowSharedCustomFields", showSharedCustomFields);
        }

        if (hideDecline != null) {
            localVarFormParams.put("HideDecline", hideDecline);
        }

        if (hideSave != null) {
            localVarFormParams.put("HideSave", hideSave);
        }

        if (documentExpirySettingsExpiryDateType != null) {
            localVarFormParams.put("DocumentExpirySettings.ExpiryDateType", documentExpirySettingsExpiryDateType);
        }

        if (documentExpirySettingsExpiryValue != null) {
            localVarFormParams.put("DocumentExpirySettings.ExpiryValue", documentExpirySettingsExpiryValue);
        }

        if (documentExpirySettingsEnableDefaultExpiryAlert != null) {
            localVarFormParams.put("DocumentExpirySettings.EnableDefaultExpiryAlert", documentExpirySettingsEnableDefaultExpiryAlert);
        }

        if (documentExpirySettingsEnableAutoReminder != null) {
            localVarFormParams.put("DocumentExpirySettings.EnableAutoReminder", documentExpirySettingsEnableAutoReminder);
        }

        if (documentExpirySettingsReminderDays != null) {
            localVarFormParams.put("DocumentExpirySettings.ReminderDays", documentExpirySettingsReminderDays);
        }

        if (documentExpirySettingsReminderCount != null) {
            localVarFormParams.put("DocumentExpirySettings.ReminderCount", documentExpirySettingsReminderCount);
        }

        if (customDomainSettingsDomainName != null) {
            localVarFormParams.put("CustomDomainSettings.DomainName", customDomainSettingsDomainName);
        }

        if (customDomainSettingsFromName != null) {
            localVarFormParams.put("CustomDomainSettings.FromName", customDomainSettingsFromName);
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBrandValidateBeforeCall(String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandName' is set
        if (brandName == null) {
            throw new ApiException("Missing the required parameter 'brandName' when calling createBrand(Async)");
        }

        // verify the required parameter 'brandLogo' is set
        if (brandLogo == null) {
            throw new ApiException("Missing the required parameter 'brandLogo' when calling createBrand(Async)");
        }

        return createBrandCall(brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, _callback);

    }

    /**
     * Create the brand.
     * 
     * @param brandName  (required)
     * @param brandLogo  (required)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @return BrandCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BrandCreated createBrand(String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName) throws ApiException {
        ApiResponse<BrandCreated> localVarResp = createBrandWithHttpInfo(brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName);
        return localVarResp.getData();
    }

    /**
     * Create the brand.
     * 
     * @param brandName  (required)
     * @param brandLogo  (required)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @return ApiResponse&lt;BrandCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandCreated> createBrandWithHttpInfo(String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName) throws ApiException {
        okhttp3.Call localVarCall = createBrandValidateBeforeCall(brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, null);
        Type localVarReturnType = new TypeToken<BrandCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create the brand. (asynchronously)
     * 
     * @param brandName  (required)
     * @param brandLogo  (required)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBrandAsync(String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback<BrandCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBrandValidateBeforeCall(brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, _callback);
        Type localVarReturnType = new TypeToken<BrandCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBrand
     * @param brandId brand Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (brandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandId", brandId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBrandValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling deleteBrand(Async)");
        }

        return deleteBrandCall(brandId, _callback);

    }

    /**
     * Delete the brand.
     * 
     * @param brandId brand Id. (required)
     * @return BrandingMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BrandingMessage deleteBrand(String brandId) throws ApiException {
        ApiResponse<BrandingMessage> localVarResp = deleteBrandWithHttpInfo(brandId);
        return localVarResp.getData();
    }

    /**
     * Delete the brand.
     * 
     * @param brandId brand Id. (required)
     * @return ApiResponse&lt;BrandingMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandingMessage> deleteBrandWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<BrandingMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the brand. (asynchronously)
     * 
     * @param brandId brand Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBrandAsync(String brandId, final ApiCallback<BrandingMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBrandValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<BrandingMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editBrand
     * @param brandId The brand id. (required)
     * @param brandName  (optional)
     * @param brandLogo  (optional)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editBrandCall(String brandId, String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (brandName != null) {
            localVarFormParams.put("BrandName", brandName);
        }

        if (brandLogo != null) {
            localVarFormParams.put("BrandLogo", brandLogo);
        }

        if (backgroundColor != null) {
            localVarFormParams.put("BackgroundColor", backgroundColor);
        }

        if (buttonColor != null) {
            localVarFormParams.put("ButtonColor", buttonColor);
        }

        if (buttonTextColor != null) {
            localVarFormParams.put("ButtonTextColor", buttonTextColor);
        }

        if (emailDisplayName != null) {
            localVarFormParams.put("EmailDisplayName", emailDisplayName);
        }

        if (disclaimerDescription != null) {
            localVarFormParams.put("DisclaimerDescription", disclaimerDescription);
        }

        if (disclaimerTitle != null) {
            localVarFormParams.put("DisclaimerTitle", disclaimerTitle);
        }

        if (redirectUrl != null) {
            localVarFormParams.put("RedirectUrl", redirectUrl);
        }

        if (isDefault != null) {
            localVarFormParams.put("IsDefault", isDefault);
        }

        if (canHideTagLine != null) {
            localVarFormParams.put("CanHideTagLine", canHideTagLine);
        }

        if (combineAuditTrail != null) {
            localVarFormParams.put("CombineAuditTrail", combineAuditTrail);
        }

        if (excludeAuditTrailFromEmail != null) {
            localVarFormParams.put("ExcludeAuditTrailFromEmail", excludeAuditTrailFromEmail);
        }

        if (emailSignedDocument != null) {
            localVarFormParams.put("EmailSignedDocument", emailSignedDocument);
        }

        if (documentTimeZone != null) {
            localVarFormParams.put("DocumentTimeZone", documentTimeZone);
        }

        if (showBuiltInFormFields != null) {
            localVarFormParams.put("ShowBuiltInFormFields", showBuiltInFormFields);
        }

        if (allowCustomFieldCreation != null) {
            localVarFormParams.put("AllowCustomFieldCreation", allowCustomFieldCreation);
        }

        if (showSharedCustomFields != null) {
            localVarFormParams.put("ShowSharedCustomFields", showSharedCustomFields);
        }

        if (hideDecline != null) {
            localVarFormParams.put("HideDecline", hideDecline);
        }

        if (hideSave != null) {
            localVarFormParams.put("HideSave", hideSave);
        }

        if (documentExpirySettingsExpiryDateType != null) {
            localVarFormParams.put("DocumentExpirySettings.ExpiryDateType", documentExpirySettingsExpiryDateType);
        }

        if (documentExpirySettingsExpiryValue != null) {
            localVarFormParams.put("DocumentExpirySettings.ExpiryValue", documentExpirySettingsExpiryValue);
        }

        if (documentExpirySettingsEnableDefaultExpiryAlert != null) {
            localVarFormParams.put("DocumentExpirySettings.EnableDefaultExpiryAlert", documentExpirySettingsEnableDefaultExpiryAlert);
        }

        if (documentExpirySettingsEnableAutoReminder != null) {
            localVarFormParams.put("DocumentExpirySettings.EnableAutoReminder", documentExpirySettingsEnableAutoReminder);
        }

        if (documentExpirySettingsReminderDays != null) {
            localVarFormParams.put("DocumentExpirySettings.ReminderDays", documentExpirySettingsReminderDays);
        }

        if (documentExpirySettingsReminderCount != null) {
            localVarFormParams.put("DocumentExpirySettings.ReminderCount", documentExpirySettingsReminderCount);
        }

        if (customDomainSettingsDomainName != null) {
            localVarFormParams.put("CustomDomainSettings.DomainName", customDomainSettingsDomainName);
        }

        if (customDomainSettingsFromName != null) {
            localVarFormParams.put("CustomDomainSettings.FromName", customDomainSettingsFromName);
        }

        if (brandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandId", brandId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editBrandValidateBeforeCall(String brandId, String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling editBrand(Async)");
        }

        return editBrandCall(brandId, brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, _callback);

    }

    /**
     * Edit the brand.
     * 
     * @param brandId The brand id. (required)
     * @param brandName  (optional)
     * @param brandLogo  (optional)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @return BrandCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BrandCreated editBrand(String brandId, String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName) throws ApiException {
        ApiResponse<BrandCreated> localVarResp = editBrandWithHttpInfo(brandId, brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName);
        return localVarResp.getData();
    }

    /**
     * Edit the brand.
     * 
     * @param brandId The brand id. (required)
     * @param brandName  (optional)
     * @param brandLogo  (optional)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @return ApiResponse&lt;BrandCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandCreated> editBrandWithHttpInfo(String brandId, String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName) throws ApiException {
        okhttp3.Call localVarCall = editBrandValidateBeforeCall(brandId, brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, null);
        Type localVarReturnType = new TypeToken<BrandCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit the brand. (asynchronously)
     * 
     * @param brandId The brand id. (required)
     * @param brandName  (optional)
     * @param brandLogo  (optional)
     * @param backgroundColor  (optional)
     * @param buttonColor  (optional)
     * @param buttonTextColor  (optional)
     * @param emailDisplayName  (optional)
     * @param disclaimerDescription  (optional)
     * @param disclaimerTitle  (optional)
     * @param redirectUrl  (optional)
     * @param isDefault  (optional, default to false)
     * @param canHideTagLine  (optional, default to false)
     * @param combineAuditTrail  (optional, default to false)
     * @param excludeAuditTrailFromEmail  (optional, default to false)
     * @param emailSignedDocument  (optional, default to Attachment)
     * @param documentTimeZone  (optional)
     * @param showBuiltInFormFields  (optional, default to true)
     * @param allowCustomFieldCreation  (optional, default to false)
     * @param showSharedCustomFields  (optional, default to false)
     * @param hideDecline  (optional)
     * @param hideSave  (optional)
     * @param documentExpirySettingsExpiryDateType  (optional)
     * @param documentExpirySettingsExpiryValue  (optional)
     * @param documentExpirySettingsEnableDefaultExpiryAlert  (optional)
     * @param documentExpirySettingsEnableAutoReminder  (optional)
     * @param documentExpirySettingsReminderDays  (optional)
     * @param documentExpirySettingsReminderCount  (optional)
     * @param customDomainSettingsDomainName  (optional)
     * @param customDomainSettingsFromName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editBrandAsync(String brandId, String brandName, File brandLogo, String backgroundColor, String buttonColor, String buttonTextColor, String emailDisplayName, String disclaimerDescription, String disclaimerTitle, String redirectUrl, Boolean isDefault, Boolean canHideTagLine, Boolean combineAuditTrail, Boolean excludeAuditTrailFromEmail, String emailSignedDocument, String documentTimeZone, Boolean showBuiltInFormFields, Boolean allowCustomFieldCreation, Boolean showSharedCustomFields, Boolean hideDecline, Boolean hideSave, String documentExpirySettingsExpiryDateType, Integer documentExpirySettingsExpiryValue, Boolean documentExpirySettingsEnableDefaultExpiryAlert, Boolean documentExpirySettingsEnableAutoReminder, Integer documentExpirySettingsReminderDays, Integer documentExpirySettingsReminderCount, String customDomainSettingsDomainName, String customDomainSettingsFromName, final ApiCallback<BrandCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = editBrandValidateBeforeCall(brandId, brandName, brandLogo, backgroundColor, buttonColor, buttonTextColor, emailDisplayName, disclaimerDescription, disclaimerTitle, redirectUrl, isDefault, canHideTagLine, combineAuditTrail, excludeAuditTrailFromEmail, emailSignedDocument, documentTimeZone, showBuiltInFormFields, allowCustomFieldCreation, showSharedCustomFields, hideDecline, hideSave, documentExpirySettingsExpiryDateType, documentExpirySettingsExpiryValue, documentExpirySettingsEnableDefaultExpiryAlert, documentExpirySettingsEnableAutoReminder, documentExpirySettingsReminderDays, documentExpirySettingsReminderCount, customDomainSettingsDomainName, customDomainSettingsFromName, _callback);
        Type localVarReturnType = new TypeToken<BrandCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBrand
     * @param brandId The brand id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (brandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandId", brandId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getBrand(Async)");
        }

        return getBrandCall(brandId, _callback);

    }

    /**
     * Get the specific brand details.
     * 
     * @param brandId The brand id. (required)
     * @return ViewBrandDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ViewBrandDetails getBrand(String brandId) throws ApiException {
        ApiResponse<ViewBrandDetails> localVarResp = getBrandWithHttpInfo(brandId);
        return localVarResp.getData();
    }

    /**
     * Get the specific brand details.
     * 
     * @param brandId The brand id. (required)
     * @return ApiResponse&lt;ViewBrandDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewBrandDetails> getBrandWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = getBrandValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<ViewBrandDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specific brand details. (asynchronously)
     * 
     * @param brandId The brand id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandAsync(String brandId, final ApiCallback<ViewBrandDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<ViewBrandDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetDefaultBrand
     * @param brandId brand Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDefaultBrandCall(String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/brand/resetdefault";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (brandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brandId", brandId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetDefaultBrandValidateBeforeCall(String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling resetDefaultBrand(Async)");
        }

        return resetDefaultBrandCall(brandId, _callback);

    }

    /**
     * Reset default brand.
     * 
     * @param brandId brand Id. (required)
     * @return BrandingMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BrandingMessage resetDefaultBrand(String brandId) throws ApiException {
        ApiResponse<BrandingMessage> localVarResp = resetDefaultBrandWithHttpInfo(brandId);
        return localVarResp.getData();
    }

    /**
     * Reset default brand.
     * 
     * @param brandId brand Id. (required)
     * @return ApiResponse&lt;BrandingMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BrandingMessage> resetDefaultBrandWithHttpInfo(String brandId) throws ApiException {
        okhttp3.Call localVarCall = resetDefaultBrandValidateBeforeCall(brandId, null);
        Type localVarReturnType = new TypeToken<BrandingMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset default brand. (asynchronously)
     * 
     * @param brandId brand Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetDefaultBrandAsync(String brandId, final ApiCallback<BrandingMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetDefaultBrandValidateBeforeCall(brandId, _callback);
        Type localVarReturnType = new TypeToken<BrandingMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
