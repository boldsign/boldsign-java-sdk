/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.api;

import com.boldsign.ApiCallback;
import com.boldsign.ApiClient;
import com.boldsign.ApiException;
import com.boldsign.ApiResponse;
import com.boldsign.Configuration;
import com.boldsign.Pair;
import com.boldsign.ProgressRequestBody;
import com.boldsign.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.boldsign.model.AccessCodeDetail;
import com.boldsign.model.AccessCodeDetails;
import com.boldsign.model.BehalfDocumentRecords;
import com.boldsign.model.ChangeRecipient;
import com.boldsign.model.DocumentCreated;
import com.boldsign.model.DocumentProperties;
import com.boldsign.model.DocumentRecords;
import com.boldsign.model.DocumentTags;
import com.boldsign.model.EmbeddedDocumentRequest;
import com.boldsign.model.EmbeddedSendCreated;
import com.boldsign.model.EmbeddedSigningLink;
import com.boldsign.model.ErrorResult;
import com.boldsign.model.ExtendExpiry;
import java.io.File;
import java.time.OffsetDateTime;
import com.boldsign.model.PrefillFieldRequest;
import com.boldsign.model.ReminderMessage;
import com.boldsign.model.RemoveAuthentication;
import com.boldsign.model.RevokeDocument;
import com.boldsign.model.SendForSign;
import com.boldsign.model.TeamDocumentRecords;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAuthentication
     * @param documentId The DocumentId. (required)
     * @param accessCodeDetail Access code details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAuthenticationCall(String documentId, AccessCodeDetail accessCodeDetail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessCodeDetail;

        // create path and map variables
        String localVarPath = "/v1/document/addAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = accessCodeDetail.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAuthenticationValidateBeforeCall(String documentId, AccessCodeDetail accessCodeDetail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling addAuthentication(Async)");
        }

        return addAuthenticationCall(documentId, accessCodeDetail, _callback);

    }

    /**
     * The add authentication to recipient.
     * 
     * @param documentId The DocumentId. (required)
     * @param accessCodeDetail Access code details. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void addAuthentication(String documentId, AccessCodeDetail accessCodeDetail) throws ApiException {
        addAuthenticationWithHttpInfo(documentId, accessCodeDetail);
    }

    /**
     * The add authentication to recipient.
     * 
     * @param documentId The DocumentId. (required)
     * @param accessCodeDetail Access code details. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addAuthenticationWithHttpInfo(String documentId, AccessCodeDetail accessCodeDetail) throws ApiException {
        okhttp3.Call localVarCall = addAuthenticationValidateBeforeCall(documentId, accessCodeDetail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * The add authentication to recipient. (asynchronously)
     * 
     * @param documentId The DocumentId. (required)
     * @param accessCodeDetail Access code details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAuthenticationAsync(String documentId, AccessCodeDetail accessCodeDetail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAuthenticationValidateBeforeCall(documentId, accessCodeDetail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTag
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagCall(DocumentTags documentTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentTags;

        // create path and map variables
        String localVarPath = "/v1/document/addTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = documentTags.createFormData();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagValidateBeforeCall(DocumentTags documentTags, final ApiCallback _callback) throws ApiException {
        return addTagCall(documentTags, _callback);

    }

    /**
     * Add the Tags in Documents.
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void addTag(DocumentTags documentTags) throws ApiException {
        addTagWithHttpInfo(documentTags);
    }

    /**
     * Add the Tags in Documents.
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addTagWithHttpInfo(DocumentTags documentTags) throws ApiException {
        okhttp3.Call localVarCall = addTagValidateBeforeCall(documentTags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add the Tags in Documents. (asynchronously)
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagAsync(DocumentTags documentTags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagValidateBeforeCall(documentTags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for behalfDocuments
     * @param page Page index specified in get document list request. (required)
     * @param pageType The filter used to differentiate between documents sent on the user&#39;s behalf and documents sent by the user on behalf of others. The API will return documents based on the specified value. (optional)
     * @param emailAddress The sender identity&#39;s email used to filter the documents returned in the API. The API will return documents that were sent on behalf of the specified email address. (optional)
     * @param signers A list of signer email addresses used to filter the documents returned in the API. The API will return documents where the signer&#39;s email address matches one of the email addresses provided in this list (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call behalfDocumentsCall(Integer page, String pageType, List<String> emailAddress, List<String> signers, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/behalfList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (pageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageType", pageType));
        }

        if (emailAddress != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EmailAddress", emailAddress));
        }

        if (signers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Signers", signers));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Status", status));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchKey", searchKey));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Labels", labels));
        }

        if (nextCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextCursor", nextCursor));
        }

        if (brandIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BrandIds", brandIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call behalfDocumentsValidateBeforeCall(Integer page, String pageType, List<String> emailAddress, List<String> signers, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling behalfDocuments(Async)");
        }

        return behalfDocumentsCall(page, pageType, emailAddress, signers, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);

    }

    /**
     * Gets the behalf documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param pageType The filter used to differentiate between documents sent on the user&#39;s behalf and documents sent by the user on behalf of others. The API will return documents based on the specified value. (optional)
     * @param emailAddress The sender identity&#39;s email used to filter the documents returned in the API. The API will return documents that were sent on behalf of the specified email address. (optional)
     * @param signers A list of signer email addresses used to filter the documents returned in the API. The API will return documents where the signer&#39;s email address matches one of the email addresses provided in this list (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return BehalfDocumentRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BehalfDocumentRecords behalfDocuments(Integer page, String pageType, List<String> emailAddress, List<String> signers, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        ApiResponse<BehalfDocumentRecords> localVarResp = behalfDocumentsWithHttpInfo(page, pageType, emailAddress, signers, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds);
        return localVarResp.getData();
    }

    /**
     * Gets the behalf documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param pageType The filter used to differentiate between documents sent on the user&#39;s behalf and documents sent by the user on behalf of others. The API will return documents based on the specified value. (optional)
     * @param emailAddress The sender identity&#39;s email used to filter the documents returned in the API. The API will return documents that were sent on behalf of the specified email address. (optional)
     * @param signers A list of signer email addresses used to filter the documents returned in the API. The API will return documents where the signer&#39;s email address matches one of the email addresses provided in this list (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return ApiResponse&lt;BehalfDocumentRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BehalfDocumentRecords> behalfDocumentsWithHttpInfo(Integer page, String pageType, List<String> emailAddress, List<String> signers, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        okhttp3.Call localVarCall = behalfDocumentsValidateBeforeCall(page, pageType, emailAddress, signers, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, null);
        Type localVarReturnType = new TypeToken<BehalfDocumentRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the behalf documents. (asynchronously)
     * 
     * @param page Page index specified in get document list request. (required)
     * @param pageType The filter used to differentiate between documents sent on the user&#39;s behalf and documents sent by the user on behalf of others. The API will return documents based on the specified value. (optional)
     * @param emailAddress The sender identity&#39;s email used to filter the documents returned in the API. The API will return documents that were sent on behalf of the specified email address. (optional)
     * @param signers A list of signer email addresses used to filter the documents returned in the API. The API will return documents where the signer&#39;s email address matches one of the email addresses provided in this list (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call behalfDocumentsAsync(Integer page, String pageType, List<String> emailAddress, List<String> signers, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback<BehalfDocumentRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = behalfDocumentsValidateBeforeCall(page, pageType, emailAddress, signers, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);
        Type localVarReturnType = new TypeToken<BehalfDocumentRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeAccessCode
     * @param documentId  (required)
     * @param accessCodeDetails The new access code. (required)
     * @param emailId  (optional)
     * @param zorder  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAccessCodeCall(String documentId, AccessCodeDetails accessCodeDetails, String emailId, Integer zorder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessCodeDetails;

        // create path and map variables
        String localVarPath = "/v1/document/changeAccessCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = accessCodeDetails.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DocumentId", documentId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmailId", emailId));
        }

        if (zorder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ZOrder", zorder));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeAccessCodeValidateBeforeCall(String documentId, AccessCodeDetails accessCodeDetails, String emailId, Integer zorder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling changeAccessCode(Async)");
        }

        // verify the required parameter 'accessCodeDetails' is set
        if (accessCodeDetails == null) {
            throw new ApiException("Missing the required parameter 'accessCodeDetails' when calling changeAccessCode(Async)");
        }

        return changeAccessCodeCall(documentId, accessCodeDetails, emailId, zorder, _callback);

    }

    /**
     * Changes the access code for the given document signer.
     * 
     * @param documentId  (required)
     * @param accessCodeDetails The new access code. (required)
     * @param emailId  (optional)
     * @param zorder  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void changeAccessCode(String documentId, AccessCodeDetails accessCodeDetails, String emailId, Integer zorder) throws ApiException {
        changeAccessCodeWithHttpInfo(documentId, accessCodeDetails, emailId, zorder);
    }

    /**
     * Changes the access code for the given document signer.
     * 
     * @param documentId  (required)
     * @param accessCodeDetails The new access code. (required)
     * @param emailId  (optional)
     * @param zorder  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeAccessCodeWithHttpInfo(String documentId, AccessCodeDetails accessCodeDetails, String emailId, Integer zorder) throws ApiException {
        okhttp3.Call localVarCall = changeAccessCodeValidateBeforeCall(documentId, accessCodeDetails, emailId, zorder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Changes the access code for the given document signer. (asynchronously)
     * 
     * @param documentId  (required)
     * @param accessCodeDetails The new access code. (required)
     * @param emailId  (optional)
     * @param zorder  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeAccessCodeAsync(String documentId, AccessCodeDetails accessCodeDetails, String emailId, Integer zorder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeAccessCodeValidateBeforeCall(documentId, accessCodeDetails, emailId, zorder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeRecipient
     * @param documentId The documentID details. (required)
     * @param changeRecipient The new recipient details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeRecipientCall(String documentId, ChangeRecipient changeRecipient, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeRecipient;

        // create path and map variables
        String localVarPath = "/v1/document/changeRecipient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = changeRecipient.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeRecipientValidateBeforeCall(String documentId, ChangeRecipient changeRecipient, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling changeRecipient(Async)");
        }

        // verify the required parameter 'changeRecipient' is set
        if (changeRecipient == null) {
            throw new ApiException("Missing the required parameter 'changeRecipient' when calling changeRecipient(Async)");
        }

        return changeRecipientCall(documentId, changeRecipient, _callback);

    }

    /**
     * Change recipient details of a document.
     * 
     * @param documentId The documentID details. (required)
     * @param changeRecipient The new recipient details. (required)
     * @return ErrorResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ErrorResult changeRecipient(String documentId, ChangeRecipient changeRecipient) throws ApiException {
        ApiResponse<ErrorResult> localVarResp = changeRecipientWithHttpInfo(documentId, changeRecipient);
        return localVarResp.getData();
    }

    /**
     * Change recipient details of a document.
     * 
     * @param documentId The documentID details. (required)
     * @param changeRecipient The new recipient details. (required)
     * @return ApiResponse&lt;ErrorResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorResult> changeRecipientWithHttpInfo(String documentId, ChangeRecipient changeRecipient) throws ApiException {
        okhttp3.Call localVarCall = changeRecipientValidateBeforeCall(documentId, changeRecipient, null);
        Type localVarReturnType = new TypeToken<ErrorResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change recipient details of a document. (asynchronously)
     * 
     * @param documentId The documentID details. (required)
     * @param changeRecipient The new recipient details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeRecipientAsync(String documentId, ChangeRecipient changeRecipient, final ApiCallback<ErrorResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeRecipientValidateBeforeCall(documentId, changeRecipient, _callback);
        Type localVarReturnType = new TypeToken<ErrorResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmbeddedRequestUrlDocument
     * @param embeddedDocumentRequest The embedded send document request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedRequestUrlDocumentCall(EmbeddedDocumentRequest embeddedDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embeddedDocumentRequest;

        // create path and map variables
        String localVarPath = "/v1/document/createEmbeddedRequestUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = embeddedDocumentRequest.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbeddedRequestUrlDocumentValidateBeforeCall(EmbeddedDocumentRequest embeddedDocumentRequest, final ApiCallback _callback) throws ApiException {
        return createEmbeddedRequestUrlDocumentCall(embeddedDocumentRequest, _callback);

    }

    /**
     * Generates a send URL which embeds document sending process into your application.
     * 
     * @param embeddedDocumentRequest The embedded send document request body. (optional)
     * @return EmbeddedSendCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedSendCreated createEmbeddedRequestUrlDocument(EmbeddedDocumentRequest embeddedDocumentRequest) throws ApiException {
        ApiResponse<EmbeddedSendCreated> localVarResp = createEmbeddedRequestUrlDocumentWithHttpInfo(embeddedDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Generates a send URL which embeds document sending process into your application.
     * 
     * @param embeddedDocumentRequest The embedded send document request body. (optional)
     * @return ApiResponse&lt;EmbeddedSendCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedSendCreated> createEmbeddedRequestUrlDocumentWithHttpInfo(EmbeddedDocumentRequest embeddedDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmbeddedRequestUrlDocumentValidateBeforeCall(embeddedDocumentRequest, null);
        Type localVarReturnType = new TypeToken<EmbeddedSendCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a send URL which embeds document sending process into your application. (asynchronously)
     * 
     * @param embeddedDocumentRequest The embedded send document request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedRequestUrlDocumentAsync(EmbeddedDocumentRequest embeddedDocumentRequest, final ApiCallback<EmbeddedSendCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbeddedRequestUrlDocumentValidateBeforeCall(embeddedDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedSendCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDocument
     * @param documentId Document Id. (required)
     * @param deletePermanently Delete Permanently. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String documentId, Boolean deletePermanently, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (deletePermanently != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deletePermanently", deletePermanently));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String documentId, Boolean deletePermanently, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(documentId, deletePermanently, _callback);

    }

    /**
     * Delete the document.
     * 
     * @param documentId Document Id. (required)
     * @param deletePermanently Delete Permanently. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String documentId, Boolean deletePermanently) throws ApiException {
        deleteDocumentWithHttpInfo(documentId, deletePermanently);
    }

    /**
     * Delete the document.
     * 
     * @param documentId Document Id. (required)
     * @param deletePermanently Delete Permanently. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String documentId, Boolean deletePermanently) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, deletePermanently, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param deletePermanently Delete Permanently. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String documentId, Boolean deletePermanently, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, deletePermanently, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTag
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagCall(DocumentTags documentTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentTags;

        // create path and map variables
        String localVarPath = "/v1/document/deleteTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = documentTags.createFormData();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagValidateBeforeCall(DocumentTags documentTags, final ApiCallback _callback) throws ApiException {
        return deleteTagCall(documentTags, _callback);

    }

    /**
     * Delete the Tags in Documents.
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTag(DocumentTags documentTags) throws ApiException {
        deleteTagWithHttpInfo(documentTags);
    }

    /**
     * Delete the Tags in Documents.
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTagWithHttpInfo(DocumentTags documentTags) throws ApiException {
        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(documentTags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the Tags in Documents. (asynchronously)
     * 
     * @param documentTags Contains DocumentId and LabelNames for Adding Tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagAsync(DocumentTags documentTags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(documentTags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadAttachment
     * @param documentId Document Id. (required)
     * @param attachmentId Attachment Id(Get attachment ID from Properties API). (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAttachmentCall(String documentId, String attachmentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/downloadAttachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (attachmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentId", attachmentId));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentValidateBeforeCall(String documentId, String attachmentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachment(Async)");
        }

        return downloadAttachmentCall(documentId, attachmentId, onBehalfOf, _callback);

    }

    /**
     * Download the Attachment.
     * 
     * @param documentId Document Id. (required)
     * @param attachmentId Attachment Id(Get attachment ID from Properties API). (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public File downloadAttachment(String documentId, String attachmentId, String onBehalfOf) throws ApiException {
        ApiResponse<File> localVarResp = downloadAttachmentWithHttpInfo(documentId, attachmentId, onBehalfOf);
        return localVarResp.getData();
    }

    /**
     * Download the Attachment.
     * 
     * @param documentId Document Id. (required)
     * @param attachmentId Attachment Id(Get attachment ID from Properties API). (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadAttachmentWithHttpInfo(String documentId, String attachmentId, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentValidateBeforeCall(documentId, attachmentId, onBehalfOf, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the Attachment. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param attachmentId Attachment Id(Get attachment ID from Properties API). (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAttachmentAsync(String documentId, String attachmentId, String onBehalfOf, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentValidateBeforeCall(documentId, attachmentId, onBehalfOf, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadAuditLog
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAuditLogCall(String documentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/downloadAuditLog";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAuditLogValidateBeforeCall(String documentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadAuditLog(Async)");
        }

        return downloadAuditLogCall(documentId, onBehalfOf, _callback);

    }

    /**
     * Download the audit trail document.
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public File downloadAuditLog(String documentId, String onBehalfOf) throws ApiException {
        ApiResponse<File> localVarResp = downloadAuditLogWithHttpInfo(documentId, onBehalfOf);
        return localVarResp.getData();
    }

    /**
     * Download the audit trail document.
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadAuditLogWithHttpInfo(String documentId, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = downloadAuditLogValidateBeforeCall(documentId, onBehalfOf, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the audit trail document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAuditLogAsync(String documentId, String onBehalfOf, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAuditLogValidateBeforeCall(documentId, onBehalfOf, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadDocument
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDocumentCall(String documentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadDocumentValidateBeforeCall(String documentId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadDocument(Async)");
        }

        return downloadDocumentCall(documentId, onBehalfOf, _callback);

    }

    /**
     * Download the document.
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public File downloadDocument(String documentId, String onBehalfOf) throws ApiException {
        ApiResponse<File> localVarResp = downloadDocumentWithHttpInfo(documentId, onBehalfOf);
        return localVarResp.getData();
    }

    /**
     * Download the document.
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadDocumentWithHttpInfo(String documentId, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = downloadDocumentValidateBeforeCall(documentId, onBehalfOf, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadDocumentAsync(String documentId, String onBehalfOf, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadDocumentValidateBeforeCall(documentId, onBehalfOf, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extendExpiry
     * @param documentId Document Id. (required)
     * @param extendExpiry The new expiry value should be specified in yyyy-MM-dd format for days type, ISO date time format for specific date time and integer for hours type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extendExpiryCall(String documentId, ExtendExpiry extendExpiry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extendExpiry;

        // create path and map variables
        String localVarPath = "/v1/document/extendExpiry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = extendExpiry.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendExpiryValidateBeforeCall(String documentId, ExtendExpiry extendExpiry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling extendExpiry(Async)");
        }

        return extendExpiryCall(documentId, extendExpiry, _callback);

    }

    /**
     * Extends the expiration date of the document.
     * 
     * @param documentId Document Id. (required)
     * @param extendExpiry The new expiry value should be specified in yyyy-MM-dd format for days type, ISO date time format for specific date time and integer for hours type. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void extendExpiry(String documentId, ExtendExpiry extendExpiry) throws ApiException {
        extendExpiryWithHttpInfo(documentId, extendExpiry);
    }

    /**
     * Extends the expiration date of the document.
     * 
     * @param documentId Document Id. (required)
     * @param extendExpiry The new expiry value should be specified in yyyy-MM-dd format for days type, ISO date time format for specific date time and integer for hours type. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extendExpiryWithHttpInfo(String documentId, ExtendExpiry extendExpiry) throws ApiException {
        okhttp3.Call localVarCall = extendExpiryValidateBeforeCall(documentId, extendExpiry, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extends the expiration date of the document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param extendExpiry The new expiry value should be specified in yyyy-MM-dd format for days type, ISO date time format for specific date time and integer for hours type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extendExpiryAsync(String documentId, ExtendExpiry extendExpiry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extendExpiryValidateBeforeCall(documentId, extendExpiry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbeddedSignLink
     * @param documentId  (required)
     * @param signerEmail  (optional)
     * @param countryCode  (optional)
     * @param phoneNumber  (optional)
     * @param signLinkValidTill  (optional)
     * @param redirectUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbeddedSignLinkCall(String documentId, String signerEmail, String countryCode, String phoneNumber, OffsetDateTime signLinkValidTill, URI redirectUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/getEmbeddedSignLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DocumentId", documentId));
        }

        if (signerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignerEmail", signerEmail));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CountryCode", countryCode));
        }

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhoneNumber", phoneNumber));
        }

        if (signLinkValidTill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SignLinkValidTill", signLinkValidTill));
        }

        if (redirectUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RedirectUrl", redirectUrl));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbeddedSignLinkValidateBeforeCall(String documentId, String signerEmail, String countryCode, String phoneNumber, OffsetDateTime signLinkValidTill, URI redirectUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getEmbeddedSignLink(Async)");
        }

        return getEmbeddedSignLinkCall(documentId, signerEmail, countryCode, phoneNumber, signLinkValidTill, redirectUrl, _callback);

    }

    /**
     * Get sign link for Embedded Sign.
     * 
     * @param documentId  (required)
     * @param signerEmail  (optional)
     * @param countryCode  (optional)
     * @param phoneNumber  (optional)
     * @param signLinkValidTill  (optional)
     * @param redirectUrl  (optional)
     * @return EmbeddedSigningLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedSigningLink getEmbeddedSignLink(String documentId, String signerEmail, String countryCode, String phoneNumber, OffsetDateTime signLinkValidTill, URI redirectUrl) throws ApiException {
        ApiResponse<EmbeddedSigningLink> localVarResp = getEmbeddedSignLinkWithHttpInfo(documentId, signerEmail, countryCode, phoneNumber, signLinkValidTill, redirectUrl);
        return localVarResp.getData();
    }

    /**
     * Get sign link for Embedded Sign.
     * 
     * @param documentId  (required)
     * @param signerEmail  (optional)
     * @param countryCode  (optional)
     * @param phoneNumber  (optional)
     * @param signLinkValidTill  (optional)
     * @param redirectUrl  (optional)
     * @return ApiResponse&lt;EmbeddedSigningLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedSigningLink> getEmbeddedSignLinkWithHttpInfo(String documentId, String signerEmail, String countryCode, String phoneNumber, OffsetDateTime signLinkValidTill, URI redirectUrl) throws ApiException {
        okhttp3.Call localVarCall = getEmbeddedSignLinkValidateBeforeCall(documentId, signerEmail, countryCode, phoneNumber, signLinkValidTill, redirectUrl, null);
        Type localVarReturnType = new TypeToken<EmbeddedSigningLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sign link for Embedded Sign. (asynchronously)
     * 
     * @param documentId  (required)
     * @param signerEmail  (optional)
     * @param countryCode  (optional)
     * @param phoneNumber  (optional)
     * @param signLinkValidTill  (optional)
     * @param redirectUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbeddedSignLinkAsync(String documentId, String signerEmail, String countryCode, String phoneNumber, OffsetDateTime signLinkValidTill, URI redirectUrl, final ApiCallback<EmbeddedSigningLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbeddedSignLinkValidateBeforeCall(documentId, signerEmail, countryCode, phoneNumber, signLinkValidTill, redirectUrl, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedSigningLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperties
     * @param documentId Document Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesCall(String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertiesValidateBeforeCall(String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getProperties(Async)");
        }

        return getPropertiesCall(documentId, _callback);

    }

    /**
     * Get summary of the document.
     * 
     * @param documentId Document Id. (required)
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DocumentProperties getProperties(String documentId) throws ApiException {
        ApiResponse<DocumentProperties> localVarResp = getPropertiesWithHttpInfo(documentId);
        return localVarResp.getData();
    }

    /**
     * Get summary of the document.
     * 
     * @param documentId Document Id. (required)
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentProperties> getPropertiesWithHttpInfo(String documentId) throws ApiException {
        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(documentId, null);
        Type localVarReturnType = new TypeToken<DocumentProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of the document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesAsync(String documentId, final ApiCallback<DocumentProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(documentId, _callback);
        Type localVarReturnType = new TypeToken<DocumentProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDocuments
     * @param page Page index specified in get document list request. (required)
     * @param sentBy  (optional)
     * @param recipients  (optional)
     * @param transmitType  (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentsCall(Integer page, List<String> sentBy, List<String> recipients, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (sentBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SentBy", sentBy));
        }

        if (recipients != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Recipients", recipients));
        }

        if (transmitType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransmitType", transmitType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Status", status));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchKey", searchKey));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Labels", labels));
        }

        if (nextCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextCursor", nextCursor));
        }

        if (brandIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BrandIds", brandIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentsValidateBeforeCall(Integer page, List<String> sentBy, List<String> recipients, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listDocuments(Async)");
        }

        return listDocumentsCall(page, sentBy, recipients, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);

    }

    /**
     * List user documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param sentBy  (optional)
     * @param recipients  (optional)
     * @param transmitType  (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return DocumentRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public DocumentRecords listDocuments(Integer page, List<String> sentBy, List<String> recipients, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        ApiResponse<DocumentRecords> localVarResp = listDocumentsWithHttpInfo(page, sentBy, recipients, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds);
        return localVarResp.getData();
    }

    /**
     * List user documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param sentBy  (optional)
     * @param recipients  (optional)
     * @param transmitType  (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return ApiResponse&lt;DocumentRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentRecords> listDocumentsWithHttpInfo(Integer page, List<String> sentBy, List<String> recipients, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(page, sentBy, recipients, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, null);
        Type localVarReturnType = new TypeToken<DocumentRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List user documents. (asynchronously)
     * 
     * @param page Page index specified in get document list request. (required)
     * @param sentBy  (optional)
     * @param recipients  (optional)
     * @param transmitType  (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentsAsync(Integer page, List<String> sentBy, List<String> recipients, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback<DocumentRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentsValidateBeforeCall(page, sentBy, recipients, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);
        Type localVarReturnType = new TypeToken<DocumentRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for prefillFields
     * @param documentId The DocumentId. (required)
     * @param prefillFieldRequest The prefill field request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefillFieldsCall(String documentId, PrefillFieldRequest prefillFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prefillFieldRequest;

        // create path and map variables
        String localVarPath = "/v1/document/prefillFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = prefillFieldRequest.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call prefillFieldsValidateBeforeCall(String documentId, PrefillFieldRequest prefillFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling prefillFields(Async)");
        }

        // verify the required parameter 'prefillFieldRequest' is set
        if (prefillFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'prefillFieldRequest' when calling prefillFields(Async)");
        }

        return prefillFieldsCall(documentId, prefillFieldRequest, _callback);

    }

    /**
     * Updates the value (prefill) of the fields in the document.
     * 
     * @param documentId The DocumentId. (required)
     * @param prefillFieldRequest The prefill field request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void prefillFields(String documentId, PrefillFieldRequest prefillFieldRequest) throws ApiException {
        prefillFieldsWithHttpInfo(documentId, prefillFieldRequest);
    }

    /**
     * Updates the value (prefill) of the fields in the document.
     * 
     * @param documentId The DocumentId. (required)
     * @param prefillFieldRequest The prefill field request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> prefillFieldsWithHttpInfo(String documentId, PrefillFieldRequest prefillFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = prefillFieldsValidateBeforeCall(documentId, prefillFieldRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the value (prefill) of the fields in the document. (asynchronously)
     * 
     * @param documentId The DocumentId. (required)
     * @param prefillFieldRequest The prefill field request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call prefillFieldsAsync(String documentId, PrefillFieldRequest prefillFieldRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = prefillFieldsValidateBeforeCall(documentId, prefillFieldRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for remindDocument
     * @param documentId Document Id. (required)
     * @param receiverEmails Signer emails. (optional)
     * @param reminderMessage Reminder Message for signers. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remindDocumentCall(String documentId, List<String> receiverEmails, ReminderMessage reminderMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reminderMessage;

        // create path and map variables
        String localVarPath = "/v1/document/remind";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = reminderMessage.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        if (receiverEmails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "receiverEmails", receiverEmails));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remindDocumentValidateBeforeCall(String documentId, List<String> receiverEmails, ReminderMessage reminderMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling remindDocument(Async)");
        }

        return remindDocumentCall(documentId, receiverEmails, reminderMessage, _callback);

    }

    /**
     * Send reminder to pending signers.
     * 
     * @param documentId Document Id. (required)
     * @param receiverEmails Signer emails. (optional)
     * @param reminderMessage Reminder Message for signers. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void remindDocument(String documentId, List<String> receiverEmails, ReminderMessage reminderMessage) throws ApiException {
        remindDocumentWithHttpInfo(documentId, receiverEmails, reminderMessage);
    }

    /**
     * Send reminder to pending signers.
     * 
     * @param documentId Document Id. (required)
     * @param receiverEmails Signer emails. (optional)
     * @param reminderMessage Reminder Message for signers. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> remindDocumentWithHttpInfo(String documentId, List<String> receiverEmails, ReminderMessage reminderMessage) throws ApiException {
        okhttp3.Call localVarCall = remindDocumentValidateBeforeCall(documentId, receiverEmails, reminderMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send reminder to pending signers. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param receiverEmails Signer emails. (optional)
     * @param reminderMessage Reminder Message for signers. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remindDocumentAsync(String documentId, List<String> receiverEmails, ReminderMessage reminderMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = remindDocumentValidateBeforeCall(documentId, receiverEmails, reminderMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAuthentication
     * @param documentId Document ID of the signature request (required)
     * @param removeAuthentication To remove access code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAuthenticationCall(String documentId, RemoveAuthentication removeAuthentication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeAuthentication;

        // create path and map variables
        String localVarPath = "/v1/document/RemoveAuthentication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = removeAuthentication.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DocumentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "text/plain",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAuthenticationValidateBeforeCall(String documentId, RemoveAuthentication removeAuthentication, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling removeAuthentication(Async)");
        }

        return removeAuthenticationCall(documentId, removeAuthentication, _callback);

    }

    /**
     * Remove the access code for the given document signer.
     * 
     * @param documentId Document ID of the signature request (required)
     * @param removeAuthentication To remove access code. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void removeAuthentication(String documentId, RemoveAuthentication removeAuthentication) throws ApiException {
        removeAuthenticationWithHttpInfo(documentId, removeAuthentication);
    }

    /**
     * Remove the access code for the given document signer.
     * 
     * @param documentId Document ID of the signature request (required)
     * @param removeAuthentication To remove access code. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeAuthenticationWithHttpInfo(String documentId, RemoveAuthentication removeAuthentication) throws ApiException {
        okhttp3.Call localVarCall = removeAuthenticationValidateBeforeCall(documentId, removeAuthentication, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove the access code for the given document signer. (asynchronously)
     * 
     * @param documentId Document ID of the signature request (required)
     * @param removeAuthentication To remove access code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAuthenticationAsync(String documentId, RemoveAuthentication removeAuthentication, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAuthenticationValidateBeforeCall(documentId, removeAuthentication, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeDocument
     * @param documentId Document Id. (required)
     * @param revokeDocument RevokeDetails. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeDocumentCall(String documentId, RevokeDocument revokeDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeDocument;

        // create path and map variables
        String localVarPath = "/v1/document/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = revokeDocument.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/xml",
            "application/prs.odatatestxx-odata",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeDocumentValidateBeforeCall(String documentId, RevokeDocument revokeDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling revokeDocument(Async)");
        }

        // verify the required parameter 'revokeDocument' is set
        if (revokeDocument == null) {
            throw new ApiException("Missing the required parameter 'revokeDocument' when calling revokeDocument(Async)");
        }

        return revokeDocumentCall(documentId, revokeDocument, _callback);

    }

    /**
     * Revoke the document.
     * 
     * @param documentId Document Id. (required)
     * @param revokeDocument RevokeDetails. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void revokeDocument(String documentId, RevokeDocument revokeDocument) throws ApiException {
        revokeDocumentWithHttpInfo(documentId, revokeDocument);
    }

    /**
     * Revoke the document.
     * 
     * @param documentId Document Id. (required)
     * @param revokeDocument RevokeDetails. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeDocumentWithHttpInfo(String documentId, RevokeDocument revokeDocument) throws ApiException {
        okhttp3.Call localVarCall = revokeDocumentValidateBeforeCall(documentId, revokeDocument, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke the document. (asynchronously)
     * 
     * @param documentId Document Id. (required)
     * @param revokeDocument RevokeDetails. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeDocumentAsync(String documentId, RevokeDocument revokeDocument, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeDocumentValidateBeforeCall(documentId, revokeDocument, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDocument
     * @param sendForSign The send for sign request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDocumentCall(SendForSign sendForSign, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendForSign;

        // create path and map variables
        String localVarPath = "/v1/document/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = sendForSign.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDocumentValidateBeforeCall(SendForSign sendForSign, final ApiCallback _callback) throws ApiException {
        return sendDocumentCall(sendForSign, _callback);

    }

    /**
     * Sends the document for sign.
     * 
     * @param sendForSign The send for sign request body. (optional)
     * @return DocumentCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCreated sendDocument(SendForSign sendForSign) throws ApiException {
        ApiResponse<DocumentCreated> localVarResp = sendDocumentWithHttpInfo(sendForSign);
        return localVarResp.getData();
    }

    /**
     * Sends the document for sign.
     * 
     * @param sendForSign The send for sign request body. (optional)
     * @return ApiResponse&lt;DocumentCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCreated> sendDocumentWithHttpInfo(SendForSign sendForSign) throws ApiException {
        okhttp3.Call localVarCall = sendDocumentValidateBeforeCall(sendForSign, null);
        Type localVarReturnType = new TypeToken<DocumentCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends the document for sign. (asynchronously)
     * 
     * @param sendForSign The send for sign request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDocumentAsync(SendForSign sendForSign, final ApiCallback<DocumentCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDocumentValidateBeforeCall(sendForSign, _callback);
        Type localVarReturnType = new TypeToken<DocumentCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamDocuments
     * @param page Page index specified in get document list request. (required)
     * @param userId UserId of the  Team document. (optional)
     * @param teamId TeamId  of the  Team document. (optional)
     * @param transmitType Transmit type as Sent, Received and Both. (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamDocumentsCall(Integer page, List<String> userId, List<String> teamId, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/document/teamlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (userId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserId", userId));
        }

        if (teamId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TeamId", teamId));
        }

        if (transmitType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransmitType", transmitType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Status", status));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchKey", searchKey));
        }

        if (labels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Labels", labels));
        }

        if (nextCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextCursor", nextCursor));
        }

        if (brandIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BrandIds", brandIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamDocumentsValidateBeforeCall(Integer page, List<String> userId, List<String> teamId, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling teamDocuments(Async)");
        }

        return teamDocumentsCall(page, userId, teamId, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);

    }

    /**
     * Get user Team documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param userId UserId of the  Team document. (optional)
     * @param teamId TeamId  of the  Team document. (optional)
     * @param transmitType Transmit type as Sent, Received and Both. (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return TeamDocumentRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TeamDocumentRecords teamDocuments(Integer page, List<String> userId, List<String> teamId, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        ApiResponse<TeamDocumentRecords> localVarResp = teamDocumentsWithHttpInfo(page, userId, teamId, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds);
        return localVarResp.getData();
    }

    /**
     * Get user Team documents.
     * 
     * @param page Page index specified in get document list request. (required)
     * @param userId UserId of the  Team document. (optional)
     * @param teamId TeamId  of the  Team document. (optional)
     * @param transmitType Transmit type as Sent, Received and Both. (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @return ApiResponse&lt;TeamDocumentRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamDocumentRecords> teamDocumentsWithHttpInfo(Integer page, List<String> userId, List<String> teamId, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds) throws ApiException {
        okhttp3.Call localVarCall = teamDocumentsValidateBeforeCall(page, userId, teamId, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, null);
        Type localVarReturnType = new TypeToken<TeamDocumentRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user Team documents. (asynchronously)
     * 
     * @param page Page index specified in get document list request. (required)
     * @param userId UserId of the  Team document. (optional)
     * @param teamId TeamId  of the  Team document. (optional)
     * @param transmitType Transmit type as Sent, Received and Both. (optional)
     * @param pageSize Page size specified in get document list request. (optional, default to 10)
     * @param startDate Start date of the document (optional)
     * @param status Status of the document such as In-progress, Completed, Decline, Expired, Revoked, Draft. (optional)
     * @param endDate End date of the document (optional)
     * @param searchKey Documents can be listed by the search key present in the document like document title, document ID, sender or recipient(s) name, etc., (optional)
     * @param labels Labels of the document. (optional)
     * @param nextCursor Next cursor value for pagination, required for fetching the next set of documents beyond 10,000 records. (optional)
     * @param brandIds BrandId(s) of the document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamDocumentsAsync(Integer page, List<String> userId, List<String> teamId, String transmitType, Integer pageSize, OffsetDateTime startDate, List<String> status, OffsetDateTime endDate, String searchKey, List<String> labels, Long nextCursor, List<String> brandIds, final ApiCallback<TeamDocumentRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamDocumentsValidateBeforeCall(page, userId, teamId, transmitType, pageSize, startDate, status, endDate, searchKey, labels, nextCursor, brandIds, _callback);
        Type localVarReturnType = new TypeToken<TeamDocumentRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
