/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.api;

import com.boldsign.ApiCallback;
import com.boldsign.ApiClient;
import com.boldsign.ApiException;
import com.boldsign.ApiResponse;
import com.boldsign.Configuration;
import com.boldsign.Pair;
import com.boldsign.ProgressRequestBody;
import com.boldsign.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.boldsign.model.DownloadImageRequest;
import com.boldsign.model.EmbeddedFileDetails;
import com.boldsign.model.EmbeddedFileLink;
import com.boldsign.model.ErrorResult;
import java.io.File;
import com.boldsign.model.IdReport;
import com.boldsign.model.VerificationDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentityVerificationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentityVerificationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentityVerificationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEmbeddedVerificationUrl
     * @param documentId The document id. (required)
     * @param embeddedFileDetails The embedded verification link request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedVerificationUrlCall(String documentId, EmbeddedFileDetails embeddedFileDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embeddedFileDetails;

        // create path and map variables
        String localVarPath = "/v1/identityVerification/createEmbeddedVerificationUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = embeddedFileDetails.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbeddedVerificationUrlValidateBeforeCall(String documentId, EmbeddedFileDetails embeddedFileDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling createEmbeddedVerificationUrl(Async)");
        }

        return createEmbeddedVerificationUrlCall(documentId, embeddedFileDetails, _callback);

    }

    /**
     * Generate a URL that embeds manual ID verification for the specified document signer into your application.
     * 
     * @param documentId The document id. (required)
     * @param embeddedFileDetails The embedded verification link request. (optional)
     * @return EmbeddedFileLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedFileLink createEmbeddedVerificationUrl(String documentId, EmbeddedFileDetails embeddedFileDetails) throws ApiException {
        ApiResponse<EmbeddedFileLink> localVarResp = createEmbeddedVerificationUrlWithHttpInfo(documentId, embeddedFileDetails);
        return localVarResp.getData();
    }

    /**
     * Generate a URL that embeds manual ID verification for the specified document signer into your application.
     * 
     * @param documentId The document id. (required)
     * @param embeddedFileDetails The embedded verification link request. (optional)
     * @return ApiResponse&lt;EmbeddedFileLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedFileLink> createEmbeddedVerificationUrlWithHttpInfo(String documentId, EmbeddedFileDetails embeddedFileDetails) throws ApiException {
        okhttp3.Call localVarCall = createEmbeddedVerificationUrlValidateBeforeCall(documentId, embeddedFileDetails, null);
        Type localVarReturnType = new TypeToken<EmbeddedFileLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a URL that embeds manual ID verification for the specified document signer into your application. (asynchronously)
     * 
     * @param documentId The document id. (required)
     * @param embeddedFileDetails The embedded verification link request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedVerificationUrlAsync(String documentId, EmbeddedFileDetails embeddedFileDetails, final ApiCallback<EmbeddedFileLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbeddedVerificationUrlValidateBeforeCall(documentId, embeddedFileDetails, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedFileLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for image
     * @param documentId The document id. (required)
     * @param downloadImageRequest The download image request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCall(String documentId, DownloadImageRequest downloadImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = downloadImageRequest;

        // create path and map variables
        String localVarPath = "/v1/identityVerification/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = downloadImageRequest.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageValidateBeforeCall(String documentId, DownloadImageRequest downloadImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling image(Async)");
        }

        // verify the required parameter 'downloadImageRequest' is set
        if (downloadImageRequest == null) {
            throw new ApiException("Missing the required parameter 'downloadImageRequest' when calling image(Async)");
        }

        return imageCall(documentId, downloadImageRequest, _callback);

    }

    /**
     * Retrieve the uploaded ID verification document or selfie image for the specified document signer using the file ID.
     * 
     * @param documentId The document id. (required)
     * @param downloadImageRequest The download image request. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public File image(String documentId, DownloadImageRequest downloadImageRequest) throws ApiException {
        ApiResponse<File> localVarResp = imageWithHttpInfo(documentId, downloadImageRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the uploaded ID verification document or selfie image for the specified document signer using the file ID.
     * 
     * @param documentId The document id. (required)
     * @param downloadImageRequest The download image request. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageWithHttpInfo(String documentId, DownloadImageRequest downloadImageRequest) throws ApiException {
        okhttp3.Call localVarCall = imageValidateBeforeCall(documentId, downloadImageRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the uploaded ID verification document or selfie image for the specified document signer using the file ID. (asynchronously)
     * 
     * @param documentId The document id. (required)
     * @param downloadImageRequest The download image request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageAsync(String documentId, DownloadImageRequest downloadImageRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageValidateBeforeCall(documentId, downloadImageRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for report
     * @param documentId The document id. (required)
     * @param verificationDataRequest The download image request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportCall(String documentId, VerificationDataRequest verificationDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verificationDataRequest;

        // create path and map variables
        String localVarPath = "/v1/identityVerification/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = verificationDataRequest.createFormData();

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("documentId", documentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportValidateBeforeCall(String documentId, VerificationDataRequest verificationDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling report(Async)");
        }

        // verify the required parameter 'verificationDataRequest' is set
        if (verificationDataRequest == null) {
            throw new ApiException("Missing the required parameter 'verificationDataRequest' when calling report(Async)");
        }

        return reportCall(documentId, verificationDataRequest, _callback);

    }

    /**
     * Retrieve the ID verification report for the specified document signer.
     * 
     * @param documentId The document id. (required)
     * @param verificationDataRequest The download image request. (required)
     * @return IdReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public IdReport report(String documentId, VerificationDataRequest verificationDataRequest) throws ApiException {
        ApiResponse<IdReport> localVarResp = reportWithHttpInfo(documentId, verificationDataRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the ID verification report for the specified document signer.
     * 
     * @param documentId The document id. (required)
     * @param verificationDataRequest The download image request. (required)
     * @return ApiResponse&lt;IdReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdReport> reportWithHttpInfo(String documentId, VerificationDataRequest verificationDataRequest) throws ApiException {
        okhttp3.Call localVarCall = reportValidateBeforeCall(documentId, verificationDataRequest, null);
        Type localVarReturnType = new TypeToken<IdReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the ID verification report for the specified document signer. (asynchronously)
     * 
     * @param documentId The document id. (required)
     * @param verificationDataRequest The download image request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportAsync(String documentId, VerificationDataRequest verificationDataRequest, final ApiCallback<IdReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportValidateBeforeCall(documentId, verificationDataRequest, _callback);
        Type localVarReturnType = new TypeToken<IdReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
