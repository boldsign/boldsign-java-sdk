/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.api;

import com.boldsign.ApiCallback;
import com.boldsign.ApiClient;
import com.boldsign.ApiException;
import com.boldsign.ApiResponse;
import com.boldsign.Configuration;
import com.boldsign.Pair;
import com.boldsign.ProgressRequestBody;
import com.boldsign.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.boldsign.model.CreateTeamRequest;
import com.boldsign.model.ErrorResult;
import com.boldsign.model.TeamCreated;
import com.boldsign.model.TeamListResponse;
import com.boldsign.model.TeamResponse;
import com.boldsign.model.TeamUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTeam
     * @param createTeamRequest team creation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamCall(CreateTeamRequest createTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamRequest;

        // create path and map variables
        String localVarPath = "/v1/teams/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = createTeamRequest.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamValidateBeforeCall(CreateTeamRequest createTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTeamRequest' is set
        if (createTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'createTeamRequest' when calling createTeam(Async)");
        }

        return createTeamCall(createTeamRequest, _callback);

    }

    /**
     * Create Team.
     * 
     * @param createTeamRequest team creation. (required)
     * @return TeamCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TeamCreated createTeam(CreateTeamRequest createTeamRequest) throws ApiException {
        ApiResponse<TeamCreated> localVarResp = createTeamWithHttpInfo(createTeamRequest);
        return localVarResp.getData();
    }

    /**
     * Create Team.
     * 
     * @param createTeamRequest team creation. (required)
     * @return ApiResponse&lt;TeamCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamCreated> createTeamWithHttpInfo(CreateTeamRequest createTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = createTeamValidateBeforeCall(createTeamRequest, null);
        Type localVarReturnType = new TypeToken<TeamCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Team. (asynchronously)
     * 
     * @param createTeamRequest team creation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTeamAsync(CreateTeamRequest createTeamRequest, final ApiCallback<TeamCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamValidateBeforeCall(createTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeam
     * @param teamId Team Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamId", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getTeam(Async)");
        }

        return getTeamCall(teamId, _callback);

    }

    /**
     * Get Team details.
     * 
     * @param teamId Team Id. (required)
     * @return TeamResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TeamResponse getTeam(String teamId) throws ApiException {
        ApiResponse<TeamResponse> localVarResp = getTeamWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get Team details.
     * 
     * @param teamId Team Id. (required)
     * @return ApiResponse&lt;TeamResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamResponse> getTeamWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = getTeamValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<TeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Team details. (asynchronously)
     * 
     * @param teamId Team Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamAsync(String teamId, final ApiCallback<TeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<TeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTeams
     * @param page Page index specified in get team list request. (required)
     * @param pageSize Page size specified in get team list request. (optional, default to 10)
     * @param searchKey Teams can be listed by the search key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamsCall(Integer page, Integer pageSize, String searchKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/teams/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchKey", searchKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamsValidateBeforeCall(Integer page, Integer pageSize, String searchKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listTeams(Async)");
        }

        return listTeamsCall(page, pageSize, searchKey, _callback);

    }

    /**
     * List Teams.
     * 
     * @param page Page index specified in get team list request. (required)
     * @param pageSize Page size specified in get team list request. (optional, default to 10)
     * @param searchKey Teams can be listed by the search key (optional)
     * @return TeamListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TeamListResponse listTeams(Integer page, Integer pageSize, String searchKey) throws ApiException {
        ApiResponse<TeamListResponse> localVarResp = listTeamsWithHttpInfo(page, pageSize, searchKey);
        return localVarResp.getData();
    }

    /**
     * List Teams.
     * 
     * @param page Page index specified in get team list request. (required)
     * @param pageSize Page size specified in get team list request. (optional, default to 10)
     * @param searchKey Teams can be listed by the search key (optional)
     * @return ApiResponse&lt;TeamListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamListResponse> listTeamsWithHttpInfo(Integer page, Integer pageSize, String searchKey) throws ApiException {
        okhttp3.Call localVarCall = listTeamsValidateBeforeCall(page, pageSize, searchKey, null);
        Type localVarReturnType = new TypeToken<TeamListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Teams. (asynchronously)
     * 
     * @param page Page index specified in get team list request. (required)
     * @param pageSize Page size specified in get team list request. (optional, default to 10)
     * @param searchKey Teams can be listed by the search key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTeamsAsync(Integer page, Integer pageSize, String searchKey, final ApiCallback<TeamListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamsValidateBeforeCall(page, pageSize, searchKey, _callback);
        Type localVarReturnType = new TypeToken<TeamListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTeam
     * @param teamUpdateRequest update team. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamCall(TeamUpdateRequest teamUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/teams/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = teamUpdateRequest.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeamValidateBeforeCall(TeamUpdateRequest teamUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamUpdateRequest' is set
        if (teamUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamUpdateRequest' when calling updateTeam(Async)");
        }

        return updateTeamCall(teamUpdateRequest, _callback);

    }

    /**
     * Update Team.
     * 
     * @param teamUpdateRequest update team. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void updateTeam(TeamUpdateRequest teamUpdateRequest) throws ApiException {
        updateTeamWithHttpInfo(teamUpdateRequest);
    }

    /**
     * Update Team.
     * 
     * @param teamUpdateRequest update team. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTeamWithHttpInfo(TeamUpdateRequest teamUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(teamUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Team. (asynchronously)
     * 
     * @param teamUpdateRequest update team. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTeamAsync(TeamUpdateRequest teamUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeamValidateBeforeCall(teamUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
