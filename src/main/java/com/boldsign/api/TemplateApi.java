/*
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Contact: support@boldsign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.boldsign.api;

import com.boldsign.ApiCallback;
import com.boldsign.ApiClient;
import com.boldsign.ApiException;
import com.boldsign.ApiResponse;
import com.boldsign.Configuration;
import com.boldsign.Pair;
import com.boldsign.ProgressRequestBody;
import com.boldsign.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.boldsign.model.CreateTemplateRequest;
import com.boldsign.model.DocumentCreated;
import com.boldsign.model.EditTemplateRequest;
import com.boldsign.model.EmbeddedCreateTemplateRequest;
import com.boldsign.model.EmbeddedSendCreated;
import com.boldsign.model.EmbeddedSendTemplateFormRequest;
import com.boldsign.model.EmbeddedTemplateCreated;
import com.boldsign.model.EmbeddedTemplateEditRequest;
import com.boldsign.model.EmbeddedTemplateEdited;
import com.boldsign.model.ErrorResult;
import java.io.File;
import com.boldsign.model.MergeAndSendForSignForm;
import java.time.OffsetDateTime;
import com.boldsign.model.ProblemDetails;
import com.boldsign.model.SendForSignFromTemplateForm;
import com.boldsign.model.TemplateCreated;
import com.boldsign.model.TemplateProperties;
import com.boldsign.model.TemplateRecords;
import com.boldsign.model.TemplateTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTag
     * @param templateTag ContainsTemplateId and Label Names for AddingTags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagCall(TemplateTag templateTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateTag;

        // create path and map variables
        String localVarPath = "/v1/template/addTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = templateTag.createFormData();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagValidateBeforeCall(TemplateTag templateTag, final ApiCallback _callback) throws ApiException {
        return addTagCall(templateTag, _callback);

    }

    /**
     * Add the Tags in Templates.
     * 
     * @param templateTag ContainsTemplateId and Label Names for AddingTags. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public void addTag(TemplateTag templateTag) throws ApiException {
        addTagWithHttpInfo(templateTag);
    }

    /**
     * Add the Tags in Templates.
     * 
     * @param templateTag ContainsTemplateId and Label Names for AddingTags. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addTagWithHttpInfo(TemplateTag templateTag) throws ApiException {
        okhttp3.Call localVarCall = addTagValidateBeforeCall(templateTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add the Tags in Templates. (asynchronously)
     * 
     * @param templateTag ContainsTemplateId and Label Names for AddingTags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagAsync(TemplateTag templateTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagValidateBeforeCall(templateTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmbeddedRequestUrlTemplate
     * @param templateId The template id. (required)
     * @param embeddedSendTemplateFormRequest Embedded send template json request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedRequestUrlTemplateCall(String templateId, EmbeddedSendTemplateFormRequest embeddedSendTemplateFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embeddedSendTemplateFormRequest;

        // create path and map variables
        String localVarPath = "/v1/template/createEmbeddedRequestUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = embeddedSendTemplateFormRequest.createFormData();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbeddedRequestUrlTemplateValidateBeforeCall(String templateId, EmbeddedSendTemplateFormRequest embeddedSendTemplateFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createEmbeddedRequestUrlTemplate(Async)");
        }

        return createEmbeddedRequestUrlTemplateCall(templateId, embeddedSendTemplateFormRequest, _callback);

    }

    /**
     * Generates a send URL using a template which embeds document sending process into your application.
     * 
     * @param templateId The template id. (required)
     * @param embeddedSendTemplateFormRequest Embedded send template json request. (optional)
     * @return EmbeddedSendCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedSendCreated createEmbeddedRequestUrlTemplate(String templateId, EmbeddedSendTemplateFormRequest embeddedSendTemplateFormRequest) throws ApiException {
        ApiResponse<EmbeddedSendCreated> localVarResp = createEmbeddedRequestUrlTemplateWithHttpInfo(templateId, embeddedSendTemplateFormRequest);
        return localVarResp.getData();
    }

    /**
     * Generates a send URL using a template which embeds document sending process into your application.
     * 
     * @param templateId The template id. (required)
     * @param embeddedSendTemplateFormRequest Embedded send template json request. (optional)
     * @return ApiResponse&lt;EmbeddedSendCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedSendCreated> createEmbeddedRequestUrlTemplateWithHttpInfo(String templateId, EmbeddedSendTemplateFormRequest embeddedSendTemplateFormRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmbeddedRequestUrlTemplateValidateBeforeCall(templateId, embeddedSendTemplateFormRequest, null);
        Type localVarReturnType = new TypeToken<EmbeddedSendCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a send URL using a template which embeds document sending process into your application. (asynchronously)
     * 
     * @param templateId The template id. (required)
     * @param embeddedSendTemplateFormRequest Embedded send template json request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedRequestUrlTemplateAsync(String templateId, EmbeddedSendTemplateFormRequest embeddedSendTemplateFormRequest, final ApiCallback<EmbeddedSendCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbeddedRequestUrlTemplateValidateBeforeCall(templateId, embeddedSendTemplateFormRequest, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedSendCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEmbeddedTemplateUrl
     * @param embeddedCreateTemplateRequest The create embedded template request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedTemplateUrlCall(EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embeddedCreateTemplateRequest;

        // create path and map variables
        String localVarPath = "/v1/template/createEmbeddedTemplateUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = embeddedCreateTemplateRequest.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmbeddedTemplateUrlValidateBeforeCall(EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        return createEmbeddedTemplateUrlCall(embeddedCreateTemplateRequest, _callback);

    }

    /**
     * Generates a create URL to embeds template create process into your application.
     * 
     * @param embeddedCreateTemplateRequest The create embedded template request body. (optional)
     * @return EmbeddedTemplateCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedTemplateCreated createEmbeddedTemplateUrl(EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest) throws ApiException {
        ApiResponse<EmbeddedTemplateCreated> localVarResp = createEmbeddedTemplateUrlWithHttpInfo(embeddedCreateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Generates a create URL to embeds template create process into your application.
     * 
     * @param embeddedCreateTemplateRequest The create embedded template request body. (optional)
     * @return ApiResponse&lt;EmbeddedTemplateCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedTemplateCreated> createEmbeddedTemplateUrlWithHttpInfo(EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmbeddedTemplateUrlValidateBeforeCall(embeddedCreateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<EmbeddedTemplateCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a create URL to embeds template create process into your application. (asynchronously)
     * 
     * @param embeddedCreateTemplateRequest The create embedded template request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEmbeddedTemplateUrlAsync(EmbeddedCreateTemplateRequest embeddedCreateTemplateRequest, final ApiCallback<EmbeddedTemplateCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmbeddedTemplateUrlValidateBeforeCall(embeddedCreateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedTemplateCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTemplate
     * @param createTemplateRequest The create template request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateCall(CreateTemplateRequest createTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTemplateRequest;

        // create path and map variables
        String localVarPath = "/v1/template/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = createTemplateRequest.createFormData();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateValidateBeforeCall(CreateTemplateRequest createTemplateRequest, final ApiCallback _callback) throws ApiException {
        return createTemplateCall(createTemplateRequest, _callback);

    }

    /**
     * Creates a new template.
     * 
     * @param createTemplateRequest The create template request body. (optional)
     * @return TemplateCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TemplateCreated createTemplate(CreateTemplateRequest createTemplateRequest) throws ApiException {
        ApiResponse<TemplateCreated> localVarResp = createTemplateWithHttpInfo(createTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new template.
     * 
     * @param createTemplateRequest The create template request body. (optional)
     * @return ApiResponse&lt;TemplateCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateCreated> createTemplateWithHttpInfo(CreateTemplateRequest createTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(createTemplateRequest, null);
        Type localVarReturnType = new TypeToken<TemplateCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new template. (asynchronously)
     * 
     * @param createTemplateRequest The create template request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateAsync(CreateTemplateRequest createTemplateRequest, final ApiCallback<TemplateCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateValidateBeforeCall(createTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplateCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTag
     * @param templateTag Contains TemplateId and LabelNames for Adding Tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagCall(TemplateTag templateTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateTag;

        // create path and map variables
        String localVarPath = "/v1/template/deleteTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = templateTag.createFormData();

        final String[] localVarAccepts = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/octet-stream",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagValidateBeforeCall(TemplateTag templateTag, final ApiCallback _callback) throws ApiException {
        return deleteTagCall(templateTag, _callback);

    }

    /**
     * Delete the Tags in Templates.
     * 
     * @param templateTag Contains TemplateId and LabelNames for Adding Tags. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTag(TemplateTag templateTag) throws ApiException {
        deleteTagWithHttpInfo(templateTag);
    }

    /**
     * Delete the Tags in Templates.
     * 
     * @param templateTag Contains TemplateId and LabelNames for Adding Tags. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTagWithHttpInfo(TemplateTag templateTag) throws ApiException {
        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(templateTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the Tags in Templates. (asynchronously)
     * 
     * @param templateTag Contains TemplateId and LabelNames for Adding Tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagAsync(TemplateTag templateTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(templateTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTemplate
     * @param templateId The template id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateCall(String templateId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateValidateBeforeCall(String templateId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling deleteTemplate(Async)");
        }

        return deleteTemplateCall(templateId, onBehalfOf, _callback);

    }

    /**
     * Deletes a template.
     * 
     * @param templateId The template id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTemplate(String templateId, String onBehalfOf) throws ApiException {
        deleteTemplateWithHttpInfo(templateId, onBehalfOf);
    }

    /**
     * Deletes a template.
     * 
     * @param templateId The template id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTemplateWithHttpInfo(String templateId, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(templateId, onBehalfOf, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a template. (asynchronously)
     * 
     * @param templateId The template id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTemplateAsync(String templateId, String onBehalfOf, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(templateId, onBehalfOf, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for download
     * @param templateId Template Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadCall(String templateId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (onBehalfOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onBehalfOf", onBehalfOf));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadValidateBeforeCall(String templateId, String onBehalfOf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling download(Async)");
        }

        return downloadCall(templateId, onBehalfOf, _callback);

    }

    /**
     * Download the template.
     * 
     * @param templateId Template Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public File download(String templateId, String onBehalfOf) throws ApiException {
        ApiResponse<File> localVarResp = downloadWithHttpInfo(templateId, onBehalfOf);
        return localVarResp.getData();
    }

    /**
     * Download the template.
     * 
     * @param templateId Template Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadWithHttpInfo(String templateId, String onBehalfOf) throws ApiException {
        okhttp3.Call localVarCall = downloadValidateBeforeCall(templateId, onBehalfOf, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the template. (asynchronously)
     * 
     * @param templateId Template Id. (required)
     * @param onBehalfOf The on behalfof email address. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadAsync(String templateId, String onBehalfOf, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadValidateBeforeCall(templateId, onBehalfOf, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editTemplate
     * @param templateId The template id. (required)
     * @param editTemplateRequest The edit template request body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTemplateCall(String templateId, EditTemplateRequest editTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editTemplateRequest;

        // create path and map variables
        String localVarPath = "/v1/template/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = editTemplateRequest.createFormData();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;odata.metadata=minimal;odata.streaming=true",
            "application/json;odata.metadata=minimal;odata.streaming=false",
            "application/json;odata.metadata=minimal",
            "application/json;odata.metadata=full;odata.streaming=true",
            "application/json;odata.metadata=full;odata.streaming=false",
            "application/json;odata.metadata=full",
            "application/json;odata.metadata=none;odata.streaming=true",
            "application/json;odata.metadata=none;odata.streaming=false",
            "application/json;odata.metadata=none",
            "application/json;odata.streaming=true",
            "application/json;odata.streaming=false",
            "application/json",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=minimal;IEEE754Compatible=false",
            "application/json;odata.metadata=minimal;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=full;IEEE754Compatible=false",
            "application/json;odata.metadata=full;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true",
            "application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=false",
            "application/json;odata.metadata=none;IEEE754Compatible=true",
            "application/json;odata.streaming=true;IEEE754Compatible=false",
            "application/json;odata.streaming=true;IEEE754Compatible=true",
            "application/json;odata.streaming=false;IEEE754Compatible=false",
            "application/json;odata.streaming=false;IEEE754Compatible=true",
            "application/json;IEEE754Compatible=false",
            "application/json;IEEE754Compatible=true",
            "application/xml",
            "text/plain",
            "application/json-patch+json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTemplateValidateBeforeCall(String templateId, EditTemplateRequest editTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling editTemplate(Async)");
        }

        // verify the required parameter 'editTemplateRequest' is set
        if (editTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'editTemplateRequest' when calling editTemplate(Async)");
        }

        return editTemplateCall(templateId, editTemplateRequest, _callback);

    }

    /**
     * Edit and updates an existing template.
     * 
     * @param templateId The template id. (required)
     * @param editTemplateRequest The edit template request body. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void editTemplate(String templateId, EditTemplateRequest editTemplateRequest) throws ApiException {
        editTemplateWithHttpInfo(templateId, editTemplateRequest);
    }

    /**
     * Edit and updates an existing template.
     * 
     * @param templateId The template id. (required)
     * @param editTemplateRequest The edit template request body. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editTemplateWithHttpInfo(String templateId, EditTemplateRequest editTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = editTemplateValidateBeforeCall(templateId, editTemplateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit and updates an existing template. (asynchronously)
     * 
     * @param templateId The template id. (required)
     * @param editTemplateRequest The edit template request body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTemplateAsync(String templateId, EditTemplateRequest editTemplateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTemplateValidateBeforeCall(templateId, editTemplateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmbeddedTemplateEditUrl
     * @param templateId The template id. (required)
     * @param embeddedTemplateEditRequest The embedded edit template request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbeddedTemplateEditUrlCall(String templateId, EmbeddedTemplateEditRequest embeddedTemplateEditRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = embeddedTemplateEditRequest;

        // create path and map variables
        String localVarPath = "/v1/template/getEmbeddedTemplateEditUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = embeddedTemplateEditRequest.createFormData();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmbeddedTemplateEditUrlValidateBeforeCall(String templateId, EmbeddedTemplateEditRequest embeddedTemplateEditRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getEmbeddedTemplateEditUrl(Async)");
        }

        return getEmbeddedTemplateEditUrlCall(templateId, embeddedTemplateEditRequest, _callback);

    }

    /**
     * Generates a edit URL to embeds template edit process into your application.
     * 
     * @param templateId The template id. (required)
     * @param embeddedTemplateEditRequest The embedded edit template request body. (optional)
     * @return EmbeddedTemplateEdited
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public EmbeddedTemplateEdited getEmbeddedTemplateEditUrl(String templateId, EmbeddedTemplateEditRequest embeddedTemplateEditRequest) throws ApiException {
        ApiResponse<EmbeddedTemplateEdited> localVarResp = getEmbeddedTemplateEditUrlWithHttpInfo(templateId, embeddedTemplateEditRequest);
        return localVarResp.getData();
    }

    /**
     * Generates a edit URL to embeds template edit process into your application.
     * 
     * @param templateId The template id. (required)
     * @param embeddedTemplateEditRequest The embedded edit template request body. (optional)
     * @return ApiResponse&lt;EmbeddedTemplateEdited&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmbeddedTemplateEdited> getEmbeddedTemplateEditUrlWithHttpInfo(String templateId, EmbeddedTemplateEditRequest embeddedTemplateEditRequest) throws ApiException {
        okhttp3.Call localVarCall = getEmbeddedTemplateEditUrlValidateBeforeCall(templateId, embeddedTemplateEditRequest, null);
        Type localVarReturnType = new TypeToken<EmbeddedTemplateEdited>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a edit URL to embeds template edit process into your application. (asynchronously)
     * 
     * @param templateId The template id. (required)
     * @param embeddedTemplateEditRequest The embedded edit template request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmbeddedTemplateEditUrlAsync(String templateId, EmbeddedTemplateEditRequest embeddedTemplateEditRequest, final ApiCallback<EmbeddedTemplateEdited> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmbeddedTemplateEditUrlValidateBeforeCall(templateId, embeddedTemplateEditRequest, _callback);
        Type localVarReturnType = new TypeToken<EmbeddedTemplateEdited>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProperties
     * @param templateId Template Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertiesValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getProperties(Async)");
        }

        return getPropertiesCall(templateId, _callback);

    }

    /**
     * Get summary of the template.
     * 
     * @param templateId Template Id. (required)
     * @return TemplateProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public TemplateProperties getProperties(String templateId) throws ApiException {
        ApiResponse<TemplateProperties> localVarResp = getPropertiesWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Get summary of the template.
     * 
     * @param templateId Template Id. (required)
     * @return ApiResponse&lt;TemplateProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateProperties> getPropertiesWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<TemplateProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of the template. (asynchronously)
     * 
     * @param templateId Template Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertiesAsync(String templateId, final ApiCallback<TemplateProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertiesValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<TemplateProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplates
     * @param page  (required)
     * @param templateType  (optional)
     * @param pageSize  (optional, default to 10)
     * @param searchKey  (optional)
     * @param onBehalfOf The sender identity&#39;s email used to filter the templates returned in the API. The API will return templates that were sent on behalf of the specified email address. (optional)
     * @param createdBy The templates can be listed by the creator of the template. (optional)
     * @param templateLabels Labels of the template. (optional)
     * @param startDate Start date of the template (optional)
     * @param endDate End date of the template (optional)
     * @param brandIds BrandId(s) of the template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesCall(Integer page, String templateType, Integer pageSize, String searchKey, List<String> onBehalfOf, List<String> createdBy, List<String> templateLabels, OffsetDateTime startDate, OffsetDateTime endDate, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/template/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        if (templateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateType", templateType));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SearchKey", searchKey));
        }

        if (onBehalfOf != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OnBehalfOf", onBehalfOf));
        }

        if (createdBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CreatedBy", createdBy));
        }

        if (templateLabels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TemplateLabels", templateLabels));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (brandIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BrandIds", brandIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(Integer page, String templateType, Integer pageSize, String searchKey, List<String> onBehalfOf, List<String> createdBy, List<String> templateLabels, OffsetDateTime startDate, OffsetDateTime endDate, List<String> brandIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listTemplates(Async)");
        }

        return listTemplatesCall(page, templateType, pageSize, searchKey, onBehalfOf, createdBy, templateLabels, startDate, endDate, brandIds, _callback);

    }

    /**
     * List all the templates.
     * 
     * @param page  (required)
     * @param templateType  (optional)
     * @param pageSize  (optional, default to 10)
     * @param searchKey  (optional)
     * @param onBehalfOf The sender identity&#39;s email used to filter the templates returned in the API. The API will return templates that were sent on behalf of the specified email address. (optional)
     * @param createdBy The templates can be listed by the creator of the template. (optional)
     * @param templateLabels Labels of the template. (optional)
     * @param startDate Start date of the template (optional)
     * @param endDate End date of the template (optional)
     * @param brandIds BrandId(s) of the template. (optional)
     * @return TemplateRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public TemplateRecords listTemplates(Integer page, String templateType, Integer pageSize, String searchKey, List<String> onBehalfOf, List<String> createdBy, List<String> templateLabels, OffsetDateTime startDate, OffsetDateTime endDate, List<String> brandIds) throws ApiException {
        ApiResponse<TemplateRecords> localVarResp = listTemplatesWithHttpInfo(page, templateType, pageSize, searchKey, onBehalfOf, createdBy, templateLabels, startDate, endDate, brandIds);
        return localVarResp.getData();
    }

    /**
     * List all the templates.
     * 
     * @param page  (required)
     * @param templateType  (optional)
     * @param pageSize  (optional, default to 10)
     * @param searchKey  (optional)
     * @param onBehalfOf The sender identity&#39;s email used to filter the templates returned in the API. The API will return templates that were sent on behalf of the specified email address. (optional)
     * @param createdBy The templates can be listed by the creator of the template. (optional)
     * @param templateLabels Labels of the template. (optional)
     * @param startDate Start date of the template (optional)
     * @param endDate End date of the template (optional)
     * @param brandIds BrandId(s) of the template. (optional)
     * @return ApiResponse&lt;TemplateRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateRecords> listTemplatesWithHttpInfo(Integer page, String templateType, Integer pageSize, String searchKey, List<String> onBehalfOf, List<String> createdBy, List<String> templateLabels, OffsetDateTime startDate, OffsetDateTime endDate, List<String> brandIds) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(page, templateType, pageSize, searchKey, onBehalfOf, createdBy, templateLabels, startDate, endDate, brandIds, null);
        Type localVarReturnType = new TypeToken<TemplateRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the templates. (asynchronously)
     * 
     * @param page  (required)
     * @param templateType  (optional)
     * @param pageSize  (optional, default to 10)
     * @param searchKey  (optional)
     * @param onBehalfOf The sender identity&#39;s email used to filter the templates returned in the API. The API will return templates that were sent on behalf of the specified email address. (optional)
     * @param createdBy The templates can be listed by the creator of the template. (optional)
     * @param templateLabels Labels of the template. (optional)
     * @param startDate Start date of the template (optional)
     * @param endDate End date of the template (optional)
     * @param brandIds BrandId(s) of the template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplatesAsync(Integer page, String templateType, Integer pageSize, String searchKey, List<String> onBehalfOf, List<String> createdBy, List<String> templateLabels, OffsetDateTime startDate, OffsetDateTime endDate, List<String> brandIds, final ApiCallback<TemplateRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(page, templateType, pageSize, searchKey, onBehalfOf, createdBy, templateLabels, startDate, endDate, brandIds, _callback);
        Type localVarReturnType = new TypeToken<TemplateRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergeAndSend
     * @param mergeAndSendForSignForm The merge and send details as JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAndSendCall(MergeAndSendForSignForm mergeAndSendForSignForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeAndSendForSignForm;

        // create path and map variables
        String localVarPath = "/v1/template/mergeAndSend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = mergeAndSendForSignForm.createFormData();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeAndSendValidateBeforeCall(MergeAndSendForSignForm mergeAndSendForSignForm, final ApiCallback _callback) throws ApiException {
        return mergeAndSendCall(mergeAndSendForSignForm, _callback);

    }

    /**
     * Send the document by merging multiple templates.
     * 
     * @param mergeAndSendForSignForm The merge and send details as JSON. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void mergeAndSend(MergeAndSendForSignForm mergeAndSendForSignForm) throws ApiException {
        mergeAndSendWithHttpInfo(mergeAndSendForSignForm);
    }

    /**
     * Send the document by merging multiple templates.
     * 
     * @param mergeAndSendForSignForm The merge and send details as JSON. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mergeAndSendWithHttpInfo(MergeAndSendForSignForm mergeAndSendForSignForm) throws ApiException {
        okhttp3.Call localVarCall = mergeAndSendValidateBeforeCall(mergeAndSendForSignForm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send the document by merging multiple templates. (asynchronously)
     * 
     * @param mergeAndSendForSignForm The merge and send details as JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAndSendAsync(MergeAndSendForSignForm mergeAndSendForSignForm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeAndSendValidateBeforeCall(mergeAndSendForSignForm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendUsingTemplate
     * @param templateId The template id. (required)
     * @param sendForSignFromTemplateForm The send template details as JSON. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendUsingTemplateCall(String templateId, SendForSignFromTemplateForm sendForSignFromTemplateForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendForSignFromTemplateForm;

        // create path and map variables
        String localVarPath = "/v1/template/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarFormParams = sendForSignFromTemplateForm.createFormData();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-API-KEY", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendUsingTemplateValidateBeforeCall(String templateId, SendForSignFromTemplateForm sendForSignFromTemplateForm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling sendUsingTemplate(Async)");
        }

        return sendUsingTemplateCall(templateId, sendForSignFromTemplateForm, _callback);

    }

    /**
     * Send a document for signature using a Template.
     * 
     * @param templateId The template id. (required)
     * @param sendForSignFromTemplateForm The send template details as JSON. (optional)
     * @return DocumentCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCreated sendUsingTemplate(String templateId, SendForSignFromTemplateForm sendForSignFromTemplateForm) throws ApiException {
        ApiResponse<DocumentCreated> localVarResp = sendUsingTemplateWithHttpInfo(templateId, sendForSignFromTemplateForm);
        return localVarResp.getData();
    }

    /**
     * Send a document for signature using a Template.
     * 
     * @param templateId The template id. (required)
     * @param sendForSignFromTemplateForm The send template details as JSON. (optional)
     * @return ApiResponse&lt;DocumentCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCreated> sendUsingTemplateWithHttpInfo(String templateId, SendForSignFromTemplateForm sendForSignFromTemplateForm) throws ApiException {
        okhttp3.Call localVarCall = sendUsingTemplateValidateBeforeCall(templateId, sendForSignFromTemplateForm, null);
        Type localVarReturnType = new TypeToken<DocumentCreated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a document for signature using a Template. (asynchronously)
     * 
     * @param templateId The template id. (required)
     * @param sendForSignFromTemplateForm The send template details as JSON. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendUsingTemplateAsync(String templateId, SendForSignFromTemplateForm sendForSignFromTemplateForm, final ApiCallback<DocumentCreated> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendUsingTemplateValidateBeforeCall(templateId, sendForSignFromTemplateForm, _callback);
        Type localVarReturnType = new TypeToken<DocumentCreated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
